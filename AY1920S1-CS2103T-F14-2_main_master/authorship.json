[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d TutorAid"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F14-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-F14-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F14-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F14-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/352c9330407b4166b0c0501d47f26362[\"Codacy code quality\", link\u003d\"https://www.codacy.com/manual/AY1920S1-CS2103T-F14-2/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103T-F14-2/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "## Track All Your Teaching Related Tasks!"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Are you a teaching assistant that is *struggling* to keep up with the additional responsibility of teaching a class?"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Do you sometimes *wish* that there was an easier way to organize and filter through your students?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "As a broke uni student, do you *desperately* need a tool to keep track of your earnings?"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "### Look no further! TutorAid is the one stop solution to answer all of your TA woes!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "## What Is TutorAid?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "TutorAid is a desktop task manager and tracker application. It has a Graphical User Interface (GUI) but most of the user interactions happens using a CLI (Command Line Interface). To put it in layman terms, you type in information about your classes and TutorAid takes note of them for you!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "## Why Should I Use TutorAid?"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "TutorAid simply makes your life 200% easier as a TA. No more messy unorganized notes on when your tutorial classes are, where they are or even what you want to cover in class later on. All the information you need can now be easily retrieved with TutorAid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* Add, delete or edit classes and locations to your schedule and view them in calender form!"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* Reminder feature that keeps track of when your next class is!"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* Track your earnings from teaching and view reports of your daily, weekly or monthly earnings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* Keep track of the progress of your students. View and input their attendance, results and participation!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* Takes notes for individual lessons to remind yourself of what to go through during the class!"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Original Source of code: AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 26,
      "Xuerneas": 1,
      "caesarpjz": 2,
      "-": 24
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d About TutorAid"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Tutor Aid was Founded to help teacher assistant and improve their efficiency by 200% in NUS School of Computing  +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "We are a team based in the +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d Caesar Pang"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "image::caesarpjz.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "link:https://github.com/caesarpjz[image:github_logo.png[width\u003d\"30\", align\u003d\"left\"]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Role: Team Leader"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Responsibilities: Data + Dev Ops"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d Kerwin Lim"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "image::kerwin97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "link:https://github.com/kerwin97[image:github_logo.png[width\u003d\"30\", align\u003d\"left\"]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Responsibilities: UI + Dev Ops"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d Bryan Ng"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "image::ngswbryan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "link:https://github.com/ngswbryan[image:github_logo.png[width\u003d\"30\", align\u003d\"left\"]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Responsibilities: Data + Dev Ops"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d Teo Shyan Jie"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "image::teoshyanjie.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "link:https://github.com/TeoShyanJie[image:github_logo.png[width\u003d\"30\", align\u003d\"left\"]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Responsibilities: Data + Dev Ops"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d Xu Tunan"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "image::xuerneas.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "link:https://github.com/Xuerneas[image:github_logo.png[width\u003d\"30\", align\u003d\"left\"]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Responsibilities: UI + Dev Ops"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 29,
      "-": 28
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F14-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/AY1920S1-CS2103T-F14-2/main[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* *Email us* : You can also reach us at +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "- *Caesar Pang* `e0357450 [at] u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "- *Kerwin Lim* `e0325440 [at] u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "- *Bryan Ng* `bryan.ng.soon.wei [at] u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "- *Teo Shyan Jie* `e0191413 [at] u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "- *Xu Tunan* `e0316056 [at] u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* *THANK YOU* Please do not hesitate to contact us."
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 10,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d TutorAid - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F14-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "By: `Team F14-2`      Since: `Sept 2019`      Licence: `NUS`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ".  `Logic` uses the `TutorAidParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Earnings Feature"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d Add Earnings"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "The `add_earnings` command allows for tutors to add their earnings into TutorAid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "The format for the `add_earnings` command is as follows:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " add_earnings d/\u003cDATE\u003e type/\u003cTYPE\u003e c/\u003cCLASSID\u003e amt/\u003cAMOUNT\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "*Overview*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "The add claim `add_earnings` mechanism is facilitated by `AddEarningsCommand` and `AddEarningsCommandParser`, taking in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "following input from the user: `Date`, `Type`, `ClassId`, `Amount`, which will construct `Earnings` objects."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ".Add Earnings Command Sequence Diagram"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "image::AddEarningsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "The `AddEarningsCommand` implements `Parser` with the following operation:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `AddEarningsCommandParser#parse()` - This operation will take in a `String` input from the user and create"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " individual objects based on the prefixes `d/`, `c/` and `amt/`. The `String` value after the respective prefixes"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " will create the respective objects. A validation check will be done to ensure that the strings that are entered"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "by the user is entered correctly. If any of the strings entered are invalid, an error will be shown to the user to"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "enter the correct format of the respectives objects."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "** `date` would use `ParserUtil#parseDate()` to ensure that the date typed by the user is in the correct format of"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "DD/MM/YYYY."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "** `type` would use `ParserUtil#parseType()` to ensure that the type entered by the user is valid."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "** `classId` would use `ParserUtil#parseClassId()` to ensure that the class id typed in by the user is in the correct format."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "** `amount` would use `ParserUtil#parseAmount()` to ensure that the amount entered by the user is in the correct format with"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "2 decimal places to represent the cents."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* After validation of the individual objects, an `Earnings` object would be created with the parameters `date`, `type`, `classId`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " and `amount`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `AddEarningsCommandParser` would then return a `AddEarningsCommand` object with the parameter, `Earnings` object."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "image::AddEarningsActivityDiagram.png[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "*Example Scenerio*"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 1: The user enters `add_earnings d/04/08/2019 c/CS1231 amt/50.00` to add an earning for teaching classes."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "This adds an `Earnings` object that the user has earned by teaching a CS1231 class on 4th August 2019. The user has"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "earned $50.00."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 2: `LogicManager` would use `TutorAidParser#parse()` to parse input from the user."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 3: `TutorAidParser` would match the command word given by the user with the correct command. In this example,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "the given command is `add_earnings`, thus, `AddEarningsCommandParser` object would be created with the user\u0027s input."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 4: `AddEarningsCommandParser` performs a validation check on each of the respective objects through"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`AddEarningsCommandParser#parse()`. In this case, it would use `ParserUtil#parseDate()`, `ParserUtil#parseType()`, `ParserUtil#parseClassId()`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "and `ParserUtil#parseAmount()`. It would then return a `AddEarningsCommand` object with an `Earnings` object."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 5: `LogicManager` would execute `AddEarningsCommand#execute`. In this particular method, the `Earnings` object will be"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "check with the rest of the prior `Earnings` object, to ensure that there is no duplicate `Earnings` object. If there are no similar"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`Earnings` object with the same parameters created previously, it would then be added into the earnings list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 6: `AddEarningsCommand` would then return a `CommandResult` to `LogicManager`, which would show the user that the new `Earnings`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "object have been successfully added."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "//tag::Calendar[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d Calendar Feature"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d Add Tasks"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The `add_task` command allows for tutors to add their tasks into TutorAid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The format for the `add_task` command is as follows:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " add_task c/\u003cCLASSID\u003e mark/\u003cMARKING\u003e tt/\u003cTASKTIME\u003e ..."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "*Overview*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The add claim `add_task` mechanism is facilitated by `AddTaskCommand` and `AddTaskCommandParser`, taking in the"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "following input from the user: `ClassId`, `Marking`, `TaskTime` which will construct `Task` objects."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ".Add Task Command Sequence Diagram"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "image::AddTaskSequenceDiagram.png[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "NOTE: The lifeline for `AddTaskCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The `AddTaskCommand` implements `Parser` with the following operation:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `AddTaskCommandParser#parse()` - This operation will take in a `String` input from the user and create"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "individual objects based on the prefixes `c/`, `mark/` and `tt/`. The `String` value after the respective prefixes"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "will create the respective objects. A validation check will be done to ensure that the strings that are entered"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "by the user is entered correctly. If any of the strings entered are invalid, an error will be shown to the user to"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "enter the correct format of the respective objects."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "** `classId` would use `ParserUtil#parseClassId()` to ensure that the class id typed in by the user is in the correct format."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "** `mark` would use `ParserUtil#parseMarking()` to ensure that the Marking entered by the user is in the correct format with only \"Y\" or \"N\"."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "** `taskTime` would use `ParseUtil#parseTaskTimes()` to ensure that the TaskTime entered by the user is in the correct format."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* After validation of the individual objects, an `Task` object would be created with the parameters `classId`, `Marking`,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "and `taskTime`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `AddTaskCommandParser` would then return a `AddTaskCommand` object with the parameter, `Task` object."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "image::AddTaskActivityDiagram.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "*Example Scenerio*"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Step 1: The user enters `add_earnings d/04/08/2019 c/CS1231 amt/50.00` to add an earning for teaching classes."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "This adds an `Earnings` object that the user has earned by teaching a CS1231 class on 4th August 2019. The user has"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "earned $50.00."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 2: `LogicManager` would use `TutorAidParser#parse()` to parse input from the user."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 3: `TutorAidParser` would match the command word given by the user with the correct command. In this example,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "the given command is `add_earnings`, thus, `AddEarningsCommandParser` object would be created with the user\u0027s input."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Step 4: `AddEarningsCommandParser` performs a validation check on each of the respective objects through"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`AddEarningsCommandParser#parse()`. In this case, it would use `ParserUtil#parseDate()`, `ParserUtil#parseClassId()` and"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`ParserUtil#parseAmount()`. It would then return a `AddEarningsCommand` object with an `Earnings` object."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Step 5: `LogicManager` would execute `AddEarningsCommand#execute`. In this particular method, the `Earnings` object will be"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "check with the rest of the prior `Earnings` object, to ensure that there is no duplicate `Earnings` object. If there are no similar"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "`Earnings` object with the same parameters created previously, it would then be added into the earnings list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Step 6: `AddEarningsCommand` would then return a `CommandResult` to `LogicManager`, which would show the user that the new `Earnings`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "object have been successfully added."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "//end::Calendar[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d Notes Features"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Add Notes"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "The `addnote` command allows for tutors to add their notes into TutorAid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "The format for the `addnote` command is as follows:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " addnote mod/\u003cMODULE_CODE\u003e c/\u003cCONTENT\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "*Overview*"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "The add claim `addnotes` mechanism is facilitated by `AddNotesCommand` and `AddNotesCommandParser`, taking in the"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "following input from the user: `Module_Code`, `Content`, which will construct `Notes` objects."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ".Add Note Command Sequence Diagram"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "image::AddNotesSequenceDiagram.png[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "The `AddNotesCommand` implements `Parser` with the following operation:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `AddNotesCommandParser#parse()` - This operation will take in a `String` input from the user and create"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "individual objects based on the prefixes `mod/` and `c/`. The `String` value after the respective prefixes"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "will create the respective objects. A validation check will be done to ensure that the strings that are entered"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "by the user is entered correctly. If any of the strings entered are invalid, an error will be shown to the user to"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "enter the correct format of the respectives objects."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "** `code` would use `ParserUtil#parseModuleCode()` to ensure that the module code typed by the user is in the correct format of"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "CSXXXX."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "** `content` would use `ParserUtil#parseContent()` to ensure that the content typed in by the user is in not empty."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* After validation of the individual objects, a `Notes` object would be created with the parameters `code` and `content`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `AddNotesCommandParser` would then return a `AddNotesCommand` object with the parameter, `Notes` object."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "##diagram to be added"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "*Example Scenerio*"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* Step 1: The user enters `addnote mod/CS2103T c/Update Project` to add a note for teaching classes."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "This adds a `Notes` object that the user has added to record what needs to be done for the class."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 2: `LogicManager` would use `TutorAidParser#parse()` to parse input from the user."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 3: `TutorAidParser` would match the command word given by the user with the correct command. In this example,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "the given command is `addnote`, thus, `AddNotesCommandParser` object would be created with the user\u0027s input."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* Step 4: `AddNotesCommandParser` performs a validation check on each of the respective objects through"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "`AddNotesCommandParser#parse()`. In this case, it would use `ParserUtil#parseModuleCode()` and `ParserUtil#parseContent()`."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "It would then return a `AddNotesCommand` object with an `Notes` object."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* Step 5: `LogicManager` would execute `AddNotesCommand#execute`. In this particular method, the `Notes` object will be"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "check with the rest of the prior `Notes` object, to ensure that there is no duplicate `Notes` object. If there are no similar"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "`Notes` object with the same parameters created previously, it would then be added into the notes list."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* Step 6: `AddNotesCommand` would then return a `CommandResult` to `LogicManager`, which would show the user that the new"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "`Notes` object have been successfully added."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003d\u003d\u003d Reminder Features"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003d\u003d\u003d\u003d Add Reminder"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "The `addReminder` command allows for tutors to add their reminders into TutorAid."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "The format for the `addReminder` command is as follows:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " addReminder rd/\u003cDESCRIPTION rt/\u003cTIME\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "*Overview*"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "The add claim `addReminder` mechanism is facilitated by `AddReminderCommand` and `AddReminderParser`, taking in the"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "following input from the user: `Description`, `Time`, which will construct `Reminder` objects."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ".Add Reminder Command Sequence Diagram"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "##diagram to be added"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "The `AddReminderCommand` implements `Parser` with the following operation:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* `AddReminderParser#parse()` - This operation will take in a `String` input from the user and create"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "individual objects based on the prefixes `rd/` and `rt/`. The `String` value after the respective prefixes"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "will create the respective objects. A validation check will be done to ensure that the strings that are entered"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "by the user is entered correctly. If any of the strings entered are invalid, an error will be shown to the user to"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "enter the correct format of the respectives objects."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "** `description` would use `ParserUtil#parseReminderDescription()` to ensure that the description typed by the user is in the correct format."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "** `time` would use `ParserUtil#parseReminderTime()` to ensure that the content is in the correct format."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* After validation of the individual objects, a `Reminder` object would be created with the parameters `description` and `time`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* `AddReminderParser` would then return a `AddReminderCommand` object with the parameter, `Reminder` object."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "##diagram to be added"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "*Example Scenerio*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* Step 1: The user enters `addReminder rd/teach rt/23/01/2019` to add a reminder for teaching classes."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "This adds an `Notes` object that the user has added to record what needs to be done for the class."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 2: `LogicManager` would use `TutorAidParser#parse()` to parse input from the user."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Step 3: `TutorAidParser` would match the command word given by the user with the correct command. In this example,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "the given command is `addReminder`, thus, `AddReminderParser` object would be created with the user\u0027s input."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* Step 4: `AddReminderParser` performs a validation check on each of the respective objects through"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "`AddReminderParser#parse()`. In this case, it would use `ParserUtil#parseReminderDescription()` and `ParserUtil#parseReminderTime()`."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "It would then return a `AddReminderCommand` object with a `Reminder` object."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* Step 5: `LogicManager` would execute `AddReminderCommand#execute`. In this particular method, the `Reminder` object will be"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "check with the rest of the prior `Reminder` object, to ensure that there is no duplicate `Reminder` object. If there are no similar"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "`Reminder` object with the same parameters created previously, it would then be added into the reminder list."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* Step 6: `AddReminderCommand` would then return a `CommandResult` to `LogicManager`, which would show the user that the new"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "`Reminder` object have been successfully added."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "// tag::learncustomcommands[]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d Learn wrong commands as custom commands feature"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "The main point of this feature is to learn a user\u0027s typing habits so as to give them a more seamless experience"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "while using TutorAid by adapting to their typing style so that they do not have to memorize"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "built in commands."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "The sequence of events is triggered when a user accidentally inputs a wrong command. TutorAid will then prompt"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "the user on whether or not they wish to add this command to the library as a custom command mapped to the action of a built in command."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Custom command keywords and their mappings are stored locally in TutorAid.json with"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "the help of `JsonAdaptedCommand`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The whole mechanism is mainly facilitated by `TutorAidParser` which has been modified to suit our needs. A TreeMap"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "is now being used in the process of parsing commands."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "A `CommandResult` object now also has an added boolean \"unknown\" instance variable to indicate if the command entered is"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "an unknown command. New command classes such as `UnknownCommand`, `NewCommand` and `CancelCommand` were also created."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `TutorAidParser#checkCommand()` -- Separate \"parser\" functions for unknown command operations."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Checks if the command a user wants to map his unknown command to is valid and exists or if the user wishes"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "to exit the operation."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `TutorAidParser#initialiseBasicCommands()` -- Initialises the functionality of the `TutorAidParser` by adding"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "the basic command mappings to its TreeMap."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Given below is an example usage scenario and how the learn custom command mechanism behaves at each step."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 1. The user launches the application for the first time. The `TutorAidParser` will be initialized and all basic"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "commands and previous existing custom commands will be added to its TreeMap."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 2. The user enters \"plus\" instead of \"add\". `TutorAidParser` does a lookup in its TreeMap and in the `TutorAidParser#parseCommand(String userInput)` function and returns a new `UnknownCommand` since"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "the TreeMap does not contain the keyword \"plus\"."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Step 3. The `UnknownCommand` is executed by `Logic` and \"plus\" is saved on a Stack in the `Model` component. Subsequently, the `CommandResult` is passed to `MainWindow` to display the corresponding text on the GUI. The `CommandResult` triggers `CommandResult#isUnknown()` and sets the \"unknown\" variable in `MainWindow`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "to true."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "`Logic#execute(String userInput)` has been changed to `Logic#execute(String userInput, boolean isUnknown)` to account for different execution pathways of unknown and known commands."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Step 4. TutorAid prompts the user to type in a valid command to map the unknown command to. The user types in another wrong command that is not recognised. This time, he enters \"ad\" instead of \"add\". `Logic#execute(String userInput, boolean isUnknown)` now calls `TutorAidParser#checkCommand(String userInput, String prevUnknownCommand)` as `MainWindow` passes in a value of `true` to the `isUnknown` boolean variable of the execute command."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "`prevUnknownCommand` variable is retrieved from executing a `peek()` command on the `savedCommand` stack in `Model`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 5. In `TutorAidParser#checkCommand(String userInput, String prevUnknownCommand)`, the command is still not recognized and another `UnknownCommand` is returned."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Steps 3-5 occurs continuously as long as an unknown command is being supplied or until the user cancels the operation by typing in \"cancel\"."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 7. The user inputs a valid command. `TutorAidParser#checkCommand(String userInput, String prevUnknownCommand)` now finds the valid command in the TreeMap. With the latest \"prevUnknownCommand\" retrieved from the stack, it adds the unknown command and action of the valid command as a key-value pair to the TreeMap and as a new CommandObject to the `TutorAid` for storage via execution of `NewCommand` object."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 8. `NewCommand` has a `CommandResult` with an \"unknown\" value of false. This will trigger `MainWindow#setUnknownFalse()` and set the unknown variable in `MainWindow` to false. Normal commands can then be performed as `TutorAidParser#parseCommand(String userInput)` will now be called again instead of `TutorAidParser#checkCommand(String userInput, String prevUnknownCommand)`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "The following sequence diagrams shows how the learn custom command operation works:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Firstly an unknown command is supplied,"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image::UnknownCommandDiagram.png[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "NOTE: The lifeline for `UnknownCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "After which, a known command is supplied,"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image::NewCommandDiagram.png[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`TutorAidParser#checkCommand(String userInput, String prevUnknownCommand)` is called instead of the normal `TutorAidParser#parseCommand(String userInput)` function because the boolean input \"isUnknown\" in `Logic#execute(String userInput, boolean isUnknown)` is set to true."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image::LearnCustomCommandsActivityDiagram.png[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the learning of custom commands"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* **Alternative 1 (current choice):** Add all CommandObject objects in the ObservableList\u003cCommandObject\u003e into a TreeMap."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Pros: Future queries to determine if a command exists or not only requires O(1) time."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Cons: The first iteration to populate the TreeMap still takes O(n) time."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* **Alternative 2:** Iterate through the ObservableList\u003cCommandObject\u003e to check if the command exists."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Pros: We do not need to maintain a separate data structure, and just reuse what is already in the codebase. We also"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "do not need to waste time populating a TreeMap."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Cons: Every single query costs O(n) time to check if the command exists."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "// end::learncustomcommands[]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "// tag::undo/redo[]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedTutorAid`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "It extends `TutorAid` with an undo/redo history, stored internally as an `tutorAidStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `VersionedTutorAid#commit()` -- Saves the current tutor aid state in its history."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `VersionedTutorAid#undo()` -- Restores the previous tutor aid state from its history."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `VersionedTutorAid#redo()` -- Restores a previously undone tutor aid state from its history."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTutorAid()`, `Model#undoTutorAid()` and `Model#redoTutorAid()` respectively."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTutorAid` will be initialized with the initial tutor aid state, and the `currentStatePointer` pointing to that single tutor aid state."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the tutor aid. The `delete` command calls `Model#commitTutorAid()`, causing the modified state of the tutor aid after the `delete 5` command executes to be saved in the `tutorAidStateList`, and the `currentStatePointer` is shifted to the newly inserted tutor aid state."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 3. The user executes `add_task c/CS2103T ...` to add a new task. The `add_task` command also calls `Model#commitTutorAid()`, causing another modified tutor aid state to be saved into the `tutorAidStateList`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "If a command fails its execution, it will not call `Model#commitTutorAid()`, so the tutor aid state will not be saved into the `tutorAidStateList`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTutorAid()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous tutor aid state, and restores the tutor aid to that state."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial tutor aid state, then there are no previous tutor aid states to restore. The `undo` command uses `Model#canUndoTutorAid()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoTutorAid()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the tutor aid to that state."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "If the `currentStatePointer` is at index `tutorAidStateList.size() - 1`, pointing to the latest tutor aid state, then there are no undone tutor aid states to restore. The `redo` command uses `Model#canRedoTutorAid()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the tutor aid, such as `list`, will usually not call `Model#commitTutorAid()`, `Model#undoTutorAid()` or `Model#redoTutorAid()`. Thus, the `tutorAidStateList` remains unchanged."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTutorAid()`. Since the `currentStatePointer` is not pointing at the end of the `tutorAidStateList`, all tutor aid states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add_task c/CS2103T ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire tutor aid."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of tutor aid states."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedTutorAid`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "// end::undo/redo[]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* has a need to manage classes and related tasks"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* has a need to track earnings"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "*Value proposition*: manage calendar and track earnings faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`* * *` |tutor |add a new class | check the details of the task when I want"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`* * *` |tutor |edit an existing task |update task information when I need"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`* * *` |tutor |add my earnings |check my earnings when I want to"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`* * *` |tutor | check my existing classes| attend the classes in time"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`* * *` | tutor| check the information of my classes| know more about my students\u0027 situation"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`* *` | user | know what\u0027s the command format | key in the correct command"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`* *` |forgetful tutor user|be reminded before my tutorials |go for the tutorials on time"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "|`*` |caring tutor user |check the upcoming events |remind my students"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "(For all use cases below, the *System* is the `TutorAid` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d Use case: Delete task"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "1.  User requests to list tasks"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "2.  TutorAid shows a list of tasks"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "3.  User requests to delete a specific task in the list"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "4.  TutorAid deletes the person"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "** 2a1. TutorAid tells user that there is no task."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "+"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "** 3a1. TutorAid shows an error message."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Reminder"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "1.  User requests to list reminders"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "2.  TutorAid shows a list of reminders"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "3.  User requests to delete a specific reminder in the list"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "4.  TutorAid deletes the reminder"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "** 2a1. TutorAid tells user that there are no reminders."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "+"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "** 3a1. TutorAid shows an error message."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 43,
      "TeoShyanJie": 52,
      "Xuerneas": 132,
      "caesarpjz": 68,
      "kerwin97": 66,
      "-": 430
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d TutorAid - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F14-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "By: `Team CS2103-F14-2`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "TutorAid is for teaching assistants or tutors who prefer to use a desktop app for managing their classes and related tasks. More importantly, TutorAid is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, TutorAid can get your tasks done faster than traditional GUI apps. Interested? Jump to the Section 2, “Quick Start” to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ".  Download the latest `tutoraid.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your TutorAid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* *`help`* : Links you to the User Guide so you can view how to use all the available commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* **`add_task c/CS2103T Lecture mark/Y tt/20/9/2019 16:00, 20/9/2019 18:00` : adds a classId named CS2103T that is on 20th September 2019 4pm."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* **`claimed earnings`**`02/07/2022 CS2100` : marks that you have claimed this earnings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Items with `…`​ after them can be used multiple times e.g. `tt/TASK_TIME...` can be used as `tt/...`, `tt/... tt/...` etc."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Register : `register`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Register an account with the application to start using it. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `register user/USERNAME pass/PASSWORD`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `register user/Steve pass/Pa55w0rd!`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Username and Password should not contain any spaces and username should have at least 5 characters."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Login : `login`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Login a registered account with the correct username and password. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `login user/USERNAME pass/PASSWORD`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `login user/Steve pass/Pa55w0rd!`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Change tab : `tab`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Change tab to any of the available ones. +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `change_tab tab/DESTINATION`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples (All available destinations listed):"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `change_tab tab/earnings`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `change_tab tab/calendar`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `change_tab tab/student_profile`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `change_tab tab/reminders`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `change_tab tab/notepad`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `change_tab tab/task`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Calender"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d Adding task: `add_task`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Adds a task to one or more time slots. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Format: `add_task c/MODULE mark/STATUS tt/TASK_TIME...`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "A task can have more than one time slots. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "STATUS should only be Y or N. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`TASK_TIME` should be in the format \"dd/MM/YYYY HH:mm, dd/MM/YYYY HH:mm\". +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "If there are multiple task times, they will be automatically sorted based on their starting time."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `add_task c/CS2103T Lecture  mark/Y tt/20/09/2019 13:00, 20/09/2019 16:00 tt/21/09/2019 13:00, 21/09/2019 15:00`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `add_task c/MA1521 Tutorial mark/N tt/02/11/2020 14:00, 02/11/2020 15:00`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d Editing task: `edit_task`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Update task information. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Format: `edit_task INDEX [c/CLASSID] [mark/STATUS] [tt/TASK_TIME]`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "INDEX must be a positive integer. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "At least one element inside task should be edited."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `edit_task 2 mark/N`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `edit_task 1 tt/19/10/2019 12:00, 19/10/2019 14:00 mark/N`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting task: `delete_task`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Deletes selected task. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Format: `delete_task INDEX`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "INDEX must be a positive integer."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `delete_task 1`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d Finding tasks based on Module : `find_task_by_module`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Find specific tasks by Module and list them. +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Format: `find_task_by_module MODULE ...`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* The `MODULE` is case insensitive. e.g `cs2100` will match `CS2100`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Only full words will be matched. e.g. `2100` will not match `CS2100`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* Can find using more than one `MODULE` at a time."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `find_task_by_module cs2100`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `find_task_by_module CS2103T, cs2100`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d Finding tasks based on Date : `find_task_by_date`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Find specific tasks by Date and list them. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Format: `find_task_by_date DATE ...`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* The `DATE` should be in the format dd/MM/YYYY. e.g 12/10/2019"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `find_task_by_date 20/10/2019`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all tasks : `list_task`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "List all tasks. +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `list_task`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003d\u003d\u003d\u003d Setting Reminder Details  : `addReminder`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add Reminder"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "Adds reminders. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "Format: `addReminder rd/DESCRIPTION rt/TIME`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* `addReminder rd/Cs2103T homework rt/21/9/2019 13:00, 21/9/2019 15:00`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Delete Reminder"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "Removes the reminder. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "Format: `reminder INDEX INTEGER`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* `deleteReminder 1`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d User Interface"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "View in calendar format. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "Format: `change_tab tab/FORMAT`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* `change_tab tab/calendar`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "* `change_tab tab/tasks`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Earnings"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d Add Earnings: `add_earnings`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Adds Earnings to the list of earnings. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `add_earnings d/DATE type/TYPE c/CLASSID amt/AMOUNT`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `add_earnings d/19/09/2019 type/lab c/CS2103T amt/50.70`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Only `tutorials`/ `tut` / `lab` / `consultations` / `c` / `sectionals` / `s` / `preparation_time` / `p`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "arguments are allowed for `TYPE`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `DATE` format must be done in `DD/MM/YYYY` or `DD-MM-YYYY` format."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `AMOUNT` has a max value of 1 000 000.00 and should not contain commas."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d Update Earnings: `update_earnings`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Update Earnings in the list of earnings by adding *one* of the parameters at least. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `update_earnings INDEX d/DATE c/CLASSID amt/AMOUNT type/TYPE`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `update_earnings 2 d/14/04/2020 type/lab`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Not allowed to update earnings claim status through `update_earnings` method. Only can use `claim_earnings`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "method."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Earnings: `delete_earnings`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Delete Earnings in the list of earnings. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `delete_earnings INDEX`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `delete_earnings 2`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d Find Earnings: `find_earnings`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Find Earnings in the list of earnings. +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `find_earnings keywords ...`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `find_earnings CS2103T`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* If more than one keyword is used, do not add commas between each keyword."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Partial matching is allowed as well for this command. `find_earnings a` will"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " match with apple, for example."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d Claim Earnings: `claim_earnings`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Changes the user the earnings status in the list of earnings. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `claim_earnings INDEX c/CLASSID`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `claim_earnings 2 claim/rejected`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Only `approved`/`rejected`/`processing`/`pending submission` statuses are allowed."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* Only one status is allowed at a time."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "****"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d Notes"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Add Note: `addnote`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Adds Note to the list of notes. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Format: `addnote mod/MODULE_CODE c/CONTENT`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `addnote mod/CS2103T c/Check for project submission date`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Note: `editnote`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Update Note in the list of notes. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Format: `editnote [index] mod/MODULE_CODE c/CONTENT`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `editnote 1 mod/CS2103T`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `editnote 1 c/check for meeting time`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `editnote 1 mod/CS2103 c/update project content`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Note: `deletenote`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Delete Note in the list of notes. +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Format: `deletenote [index]`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `deletenote 1`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Find Note: `findnote`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Delete Note in the list of notes. +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Format: `findnote [KEYWORD]`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "* `findnote CS2103T`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all note : `listnote`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "List all note. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Format: `listnote`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "// tag::studentProfile[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d Student List"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Add a student: \u0027add\u0027"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Adds a student to TutorAid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `add n/NAME c/CLASSID`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "You can add multiple students at a time by separating their names with a single \u0027,\u0027."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Please also note that you can\u0027t add students with the exact same name in the same class."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "e.g. You can add \"Tom\" in CS2030 and CS2040 but not 2 \"Tom\"s in CS2030. If there are students with the same"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "first name in the class, please add their last name as well."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `add n/Caesar,James,Todd c/CS2030`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a student: \u0027delete\u0027"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Deletes a student from TutorAid."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `delete 1` (deletes the first student.)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a student: \u0027edit\u0027"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Edits a Student\u0027s fields."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `edit INDEX n/NAME pic/PICTURE r/RESULT att/ATTENDANCE part/PARTICIPATION c/CLASS`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "User does not have to edit all fields of a Student. He can just edit whatever needs to be changed (see example)."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Result of a student can be assigned using this command. e.g. `edit 1 r/79`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `edit 1 r/20 att/10 part/10 c/CS2030`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d List students: \u0027list\u0027"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "List all students in TutorAid."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image::list.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "`list` command does not take any arguments."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Find a student: \u0027find\u0027"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Find a student matching the supplied name."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `find NAME`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `find Tom`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Add a picture to a student: \u0027set_pic\u0027"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Adds a picture to display next to the student card."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `set_pic INDEX pic/FILENAME`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "The picture specified must be in either .jpg, .png or .bmp format. It must also be located in the same directory as TutorAid."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `set_pic 2 pic/Tom.jpg`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Assign students to a class: \u0027assign_class\u0027"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Assigns a class to a student or a group of students."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `assign_class INDEXES c/CLASSID`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `assign_class 1,2,3 c/CS2030`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d List all students in a class: \u0027list_class\u0027"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Lists all students in supplied class name."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `list_class CLASSID`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `list_class CS2030`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Mark attendance of students: \u0027mark_attendance\u0027"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Marks attendance of students currently displayed."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `mark_attendance INDEXES`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "`mark_attendance` increases attendance of all selected students by exactly 1."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `mark_attendance 1,2,3`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Mark participation of students: \u0027mark_participation\u0027"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Marks participation of students currently displayed."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `mark_participation INDEXES`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "`mark_participation` increases participation of all selected students by exactly 1."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `mark_participation 1,2,3`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d View serial absentees with defined threshold: \u0027absentees\u0027 [Coming in v2.0]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Displays list of all students who have not met the set threshold in terms of attendance."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `absentees THRESHOLD_PERCENTAGE`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Calculation will be done from start of semester to the current date."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `absentees 50` (Gives a list of students whose attendance fall below 50%)"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Check on status of student: \u0027check_status\u0027 [Coming in v2.0]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Checks on status of students currently displayed in the list by sending them an e-mail enquiring on their status."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `check_status`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "To be used in conjunction with `absentees`. A preset generic email will be sent by TutorAid to the student\u0027s school email account."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Upload a picture of the student: \u0027upload_pic\u0027 [Coming in v2.0]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Launches a separate window where the user can either choose an image file on his computer or take a picture with his webcam."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "The picture will be assigned to the indicated student and be displayed in TutorAid."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `upload_pic INDEX`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Replaces current picture, if any."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `upload_pic 1`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d\u003d Learn wrong commands"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Accidentally typing in a wrong/unknown command laucnhes TutorAid into learner mode. You can choose to learn this wrong command to execute an existing"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "command by typing in its command word. Alternatively, you can type `cancel` to revert back to normal operations."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image::customCommandError.png[width\u003d\"500\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "You can\u0027t learn a full command (e.g. `add n/Caesar c/CS1231`). Doing so will result in an error. TutorAid only allows command words like `add`."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "// end::studentProfile[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Restores the Tutor Aid to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Undoable commands: those commands that modify the Tutor Aid\u0027s content (`add`, `delete`, `edit` ...)."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `list_task` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`find_earnings` +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`edit_task 1 mark/N` +"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`undo` (reverses the `edit_task 1 mark/N` command) +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`edit_task 1 mark/N` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`undo` (reverses the `edit_task 1 mark/N` command) +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`redo` (reapplies the `edit_task 1 mark/N` command) +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d\u003d Learning wrong commands as custom commands"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "TutorAid is able to learn a wrongly supplied command to do what the user intended to do. +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Format: `WRONG_COMMAND`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* `ad` (instead of `add`) -\u003e TutorAid will prompt the user what they meant. Type `add` now to be able"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "to use `ad` as an `add` command in the future."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Logout : `logout`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Logs out of the account. +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d Upcoming Features"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003d\u003d\u003d\u003d Filter Earnings: `filter_earnings`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Filters Earnings in the list of earnings based on either classid/date/week/month. +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Format: `filter_earnings variable`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "* `filter_earnings v/week`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Log* : +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`login user/USERNAME pass/PASSWORD` +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`register user/USERNAME pass/PASSWORD` +"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`logout`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Tab* : `tab TAB_DESTINATION`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Calendar:* +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`add_task c/MODULE mark/STATUS tt/TASK_TIME...` +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`edit_task INDEX [mark/STATUS] [tt/TASK_TIME]` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`delete_task 1` +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`find_task_by_module MODULE ...` +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`find_task_by_date DATE ...` +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "`list_task`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Reminder* : `reminder INDEX STATUS`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Earnings* : +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`add_earnings d/DATE c/CLASSID amt/AMOUNT` +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`update_earnings d/DATE c/CLASSID amt/(NEW_AMOUNT)` +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`delete_earnings d/DATE c/CLASSID` +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`find_earnings k/KEYWORD, ...` +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`claim_earnings d/DATE c/CLASSID` +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`filter_earnings VARIABLE`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Note* : +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`addnote mod/MODULE_CODE c/CONTENT` +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "`editnote [index] mod/MODULE_CODE c/CONTENT` +"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "`deletenote 1` +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "`findnote [KEYWORD]` +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "`listnote`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 186,
      "TeoShyanJie": 46,
      "Xuerneas": 115,
      "caesarpjz": 137,
      "kerwin97": 12,
      "-": 122
    }
  },
  {
    "path": "docs/diagrams/AddEarningsActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "(*)  --\u003e \"User executes AddEarningsCommand\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "If \"input is valid\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "--\u003e \"Generate respective object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "parameters for Earnings object\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "--\u003e \"Create Earnings Object\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 8
    }
  },
  {
    "path": "docs/diagrams/AddEarningsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":TutorAidParser\" as TutorAidParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "participant \":AddEarningsCommandParser\" as AddEarningsCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "participant \"ae:AddEarningsCommand\" as AddEarningsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "[-\u003e LogicManager : execute(\"add_earnings d/....\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager -\u003e TutorAidParser : parseCommand(\"add_earnings d/....\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate TutorAidParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "create AddEarningsCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e AddEarningsCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate AddEarningsCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddEarningsCommandParser --\u003e TutorAidParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate AddEarningsCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e AddEarningsCommandParser : parse(\"d/...\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate AddEarningsCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "create AddEarningsCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "AddEarningsCommandParser -\u003e AddEarningsCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate AddEarningsCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "AddEarningsCommand --\u003e AddEarningsCommandParser : ae"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate AddEarningsCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddEarningsCommandParser --\u003e TutorAidParser : ae"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate AddEarningsCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddEarningsCommandParser -[hidden]-\u003e TutorAidParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "destroy AddEarningsCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser --\u003e LogicManager : ae"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate TutorAidParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "LogicManager -\u003e AddEarningsCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate AddEarningsCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "AddEarningsCommand -\u003e Model : hasEarnings(earnings)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Model --\u003e AddEarningsCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "AddEarningsCommand -\u003e Model : addEarnings(earnings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "Model --\u003e AddEarningsCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "AddEarningsCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "CommandResult --\u003e AddEarningsCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "AddEarningsCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate AddEarningsCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 10,
      "caesarpjz": 63
    }
  },
  {
    "path": "docs/diagrams/AddNotesActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "(*)  --\u003e \"User executes AddNotesCommand\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "If \"input is valid\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "--\u003e \"Generate respective object"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "parameters for Notes object\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "--\u003e \"Create Notes Object\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 8
    }
  },
  {
    "path": "docs/diagrams/AddNotesSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":TutorAidParser\" as TutorAidParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "participant \":AddNotesCommandParser\" as AddNotesCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "participant \"ae:AddNotesCommand\" as AddNotesCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "[-\u003e LogicManager : execute(\"addnote mod/....\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager -\u003e TutorAidParser : parseCommand(\"addnote mod/....\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate TutorAidParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "create AddNotesCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e AddNotesCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate AddNotesCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddNotesCommandParser --\u003e TutorAidParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate AddNotesCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e AddNotesCommandParser : parse(\"mod/...\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate AddNotesCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "create AddNotesCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "AddNotesCommandParser -\u003e AddNotesCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate AddNotesCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "AddNotesCommand --\u003e AddNotesCommandParser : ae"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate AddNotesCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddNotesCommandParser --\u003e TutorAidParser : ae"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate AddNotesCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddNotesCommandParser -[hidden]-\u003e TutorAidParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "destroy AddNotesCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser --\u003e LogicManager : ae"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate TutorAidParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "LogicManager -\u003e AddNotesCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate AddNotesCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "AddNotesCommand -\u003e Model : hasNotes(note)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Model --\u003e AddNotesCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "AddNotesCommand -\u003e Model : addNotes(note)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "Model --\u003e AddNotesCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "AddNotesCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "CommandResult --\u003e AddNotesCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "AddNotesCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate AddNotesCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 63,
      "Xuerneas": 10
    }
  },
  {
    "path": "docs/diagrams/AddTaskActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ":User executes AddTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "if () then ([valid Task format])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    :Create new Task object;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    :Add Task into the taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    :Show the added task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    else([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    :Show error and correct format;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "stop"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 17
    }
  },
  {
    "path": "docs/diagrams/AddTaskSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":TutorAidParser\" as TutorAidParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":AddTaskCommandParser\" as AddTaskCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \"at:AddTaskCommand\" as AddTaskCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "[-\u003e LogicManager : execute(\"add_task c/....\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager -\u003e TutorAidParser : parseCommand(\"add_task c/....\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate TutorAidParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "create AddTaskCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e AddTaskCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate AddTaskCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommandParser --\u003e TutorAidParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate AddTaskCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e AddTaskCommandParser : parse(\"c/...\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate AddTaskCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "create AddTaskCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommandParser -\u003e AddTaskCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate AddTaskCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommand --\u003e AddTaskCommandParser : at"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommandParser --\u003e TutorAidParser : at"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommandParser -[hidden]-\u003e TutorAidParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "destroy AddTaskCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser --\u003e LogicManager : at"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate TutorAidParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager -\u003e AddTaskCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate AddTaskCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommand -\u003e Model : hasTask(task)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Model --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommand -\u003e Model : addTask(task)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Model --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "CommandResult --\u003e AddTaskCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "AddTaskCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate AddTaskCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 73
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveTutorAid(tutorAid)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueCommandsList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "UniqueCommandsList o-right-\u003e CommandObject"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Attendance"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e ClassId"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Result"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Participation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Picture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "CommandObject *--\u003e CommandWord"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "CommandObject *--\u003e CommandAction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 10,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "if () then ([command commits TutorAid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    :Save TutorAid to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    tutorAidStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":TutorAidParser\" as TutorAidParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager -\u003e TutorAidParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate TutorAidParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "DeleteCommandParser --\u003e TutorAidParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "DeleteCommandParser --\u003e TutorAidParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e TutorAidParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate TutorAidParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 10,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/LearnCustomCommandsActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "(*) --\u003e \"User makes an error and enters a"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "wrong command that TutorAid does not recognize\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "if \"\" then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "  --\u003e [[User wants to discard error] \"Type in \u0027cancel\u0027\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "  --\u003e(*)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " else"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "  --\u003e[[User wants to learn error as a command] \"Type in intended command\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "  --\u003e   if \"\" then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        --\u003e [[User inputs another command that does not exist] \"User makes an error and enters a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        wrong command that TutorAid does not recognize\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        else"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        --\u003e [[User inputs a command that exists] \"TutorAid maps and saves the wrong command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                                                                to the action of the intended command\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        --\u003e (*)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 20
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class TutorAidParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager --\u003e\"1\" TutorAidParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Interface ReadOnlyTutorAid \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class TutorAid"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class VersionedTutorAid"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class ReadOnlyTutorAid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Package Account {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Account"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Username"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class Attendance"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class Result"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class Participation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class Picture"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Package ClassId {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class ClassId"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Package Task {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Marking"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class TaskTime"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class TaskList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Package Commands {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class CommandObject"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class CommandWord"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class CommandAction"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Class UniqueCommandsList"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Package Earnings {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Earnings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Module"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Type"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class UniqueEarningsList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Package Note {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Notes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Content"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class ModuleCode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class UniqueNotesList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Package Reminder {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class Reminder"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class ReminderDescription"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class ReminderTime"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class UniqueReminderList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAid .up.|\u003e ReadOnlyTutorAid"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid .up.|\u003e TutorAid"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "ModelManager o--\u003e \"1\" VersionedTutorAid"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid *--\u003e Account"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Account *--\u003e Username"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Attendance"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e ClassId"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Result"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Participation"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Person *--\u003e Picture"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid *--\u003e \"1\" TaskList"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TaskList o--\u003e \"*\" Task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Task *--\u003e ClassId"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Task *--\u003e Marking"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Task *--\u003e \"*\" TaskTime"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid *--\u003e \"1\" UniqueEarningsList"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "UniqueEarningsList o--\u003e \"*\" Earnings"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Earnings *--\u003e Amount"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Earnings *--\u003e Module"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Earnings *--\u003e Date"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Earnings *--\u003e Type"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid *--\u003e \"1\" UniqueNotesList"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "UniqueNotesList o--\u003e \"*\" Notes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Notes *--\u003e ModuleCode"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Notes *--\u003e Content"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid *--\u003e \"1\" UniqueReminderList"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "UniqueReminderList o--\u003e \"*\" Reminder"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Reminder *--\u003e ReminderDescription"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Reminder *--\u003e ReminderTime"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid *--\u003e \"1\" UniqueCommandsList"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "UniqueCommandsList o--\u003e \"*\" CommandObject"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "CommandObject *--\u003e CommandWord"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "CommandObject *--\u003e CommandAction"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "ModelManager --\u003e\"1\" CommandObject : filtered list"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "ModelManager --\u003e\"1\" Task : filtered list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "ModelManager --\u003e\"1\" Earnings : filtered list"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "ModelManager --\u003e\"1\" Reminder : filtered list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "ModelManager --\u003e\"1\" Notes : filtered list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 19,
      "Xuerneas": 77,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/NewCommandDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":TutorAidParser\" as TutorAidParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \"n:NewCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \"c:CommandObject\" as CommandObject LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[-\u003e LogicManager : execute(validCommand, true)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "LogicManager -\u003e Model : getSavedCommand()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Model --\u003e LogicManager: savedCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager -\u003e TutorAidParser : checkCommand(validCommand, savedCommand)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate TutorAidParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "DeleteCommand --\u003e TutorAidParser : n"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser --\u003e LogicManager : n"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate TutorAidParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "create CommandObject"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand -\u003e CommandObject"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate CommandObject"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "CommandObject --\u003e DeleteCommand : c"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate CommandObject"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand -\u003e Model : addCommand(c)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "destroy DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 62,
      "Xuerneas": 7
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Interface TutorAidStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Class JsonTutorAidStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "StorageManager o--\u003e TutorAidStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonTutorAidStorage .left.|\u003e TutorAidStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonTutorAidStorage .down.\u003e JsonSerializableTutorAidStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonSerializableTutorAidStorage .right.\u003e JsonAdaptedPerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonSerializableTutorAidStorage .down.\u003e JsonAdaptedTask"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonSerializableTutorAidStorage .down.\u003e JsonAdaptedEarnings"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonSerializableTutorAidStorage .left.\u003e JsonAdaptedCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonSerializableTutorAidStorage .left.\u003e JsonAdaptedReminder"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonAdaptedReminder .down.\u003e JsonAdaptedReminderTime"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonAdaptedTask .down.\u003e JsonAdaptedTaskTime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "JsonSerializableTutorAidStorage .right.\u003e JsonAdaptedNote"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 13,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State1 as \"__ta0:TutorAid__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State2 as \"__ta1:TutorAid__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State3 as \"__ta2:TutorAid__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State1 as \"__ta0:TutorAid__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State2 as \"__ta1:TutorAid__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State3 as \"__ta2:TutorAid__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "title After command \"add_task c/CS2103T ...\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State1 as \"__ta0:TutorAid__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State2 as \"__ta1:TutorAid__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State3 as \"__ta2:TutorAid__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State1 as \"__ta0:TutorAid__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State2 as \"__ta1:TutorAid__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State3 as \"__ta2:TutorAid__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State1 as \"__ta0:TutorAid__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State2 as \"__ta1:TutorAid__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State3 as \"__ta2:TutorAid__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State1 as \"__ta0:TutorAid__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State2 as \"__ta1:TutorAid__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class State3 as \"__ta3:TutorAid__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "note right on link: State ta2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":TutorAidParser\" as TutorAidParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "participant \":VersionedTutorAid\" as VersionedTutorAid MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "LogicManager -\u003e TutorAidParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate TutorAidParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "UndoCommand --\u003e TutorAidParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "TutorAidParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate TutorAidParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "UndoCommand -\u003e Model : undoTutorAid()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "Model -\u003e VersionedTutorAid : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "activate VersionedTutorAid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid -\u003e VersionedTutorAid :resetData(ReadOnlyTutorAid)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "VersionedTutorAid --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "deactivate VersionedTutorAid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/UnknownCommandDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \"u:UnknownCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[-\u003e LogicManager : execute(unknownCommand, false)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "LogicManager -\u003e AddressBookParser : parseCommand(unknownCommand)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate AddressBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "AddressBookParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand --\u003e AddressBookParser : u"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "AddressBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate AddressBookParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand -\u003e Model : saveCommand(unknownCommand)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "DeleteCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "destroy DeleteCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 55
    }
  },
  {
    "path": "docs/team/ngswbryan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d Bryan Ng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image::ngswbryan.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "{empty}[https://github.com/ngswbryan[github]] [https://www.linkedin.com/in/bryan-ng-80777b167/[linkedin]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "Hi! My name is Bryan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "I\u0027m currently a second year SoC (School of Computing) student in NUS majoring in Computer Science."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "This portfolio page aims to document the contributions I have made in the development of TutorAid, which is a project that my team and I completed for the module CS2103T. This project has definitely been greatly beneficial to my own learning and self-development in becoming a more competent software engineer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d PROJECT: TutorAid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "TutorAid is a handy application that was created with the end goal of helping tutors and teaching assistants in NUS School of Computing. It is a Command Line Interface (CLI) based tool to cater to computing professionals who are highly adept at typing but also provides a Graphical User Interface (GUI) interface for users to easily view interact with TutorAid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "TutorAid boasts well thought out features which have been carefully selected and reviewed to fit the exact needs of our target audience. All of TutorAid\u0027s features and implementations are well documented in guides for users and developers respectively."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ".A view of TutorAid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "image::../images/Ui.png[width\u003d\"602\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d Role"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "My main role was to prototype and develop the learning of wrong commands into custom commands feature (or simply the custom shortcut feature) and the Student Profile feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "The custom shortcut feature required handling command words that are not recognized by TutorAid instead of throwing an exception for invalid commands. I created the base classes to facilitate this whole event flow, then linked it to the Model and Storage components since the custom commands have to be saved for future use. I also wrote rigorous tests for quality assurance of our product and to ensure that any possible bugs are kept to a minimal."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* *Major enhancement*: Added *the learning of wrong commands into custom commands*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** What it does: It gives the user the ability to learn commands which they have typed wrongly into TutorAid as a basic command. These custom commands will be saved and pop up as suggestions in the future."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Justification: This feature improves the product significantly because TutorAid has many different features with 37 commands currently and is still growing. It is extremely difficult for the user to remember all these command words without constantly referring to the user guide and will end up keying in command words wrongly based on their own typing habits. Learning these typing habits will help to improve their efficiency in using TutorAid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Implementation: This enhancement alters the flow of command execution in TutorAid. Executing an unknown command that TutorAid does not recognize changes the command execution pathway and sets TutorAid into \"learner mode\". This is facilitated by the use of a TreeMap in the parser which stores a list of all available commands and their actions as key-value pairs(basic commands and previous custom commands loaded from .json file). TutorAid will check against this TreeMap to see if the command word exists. If it does not, this command word is saved onto a Stack in the Model component to be retrieved in the next command. If the next command is still unknown, the next command is also added to the Stack. When a valid command that exists in entered, the last unknown command is retrieved from the top on the Stack and is mapped to the action of the aforementioned valid command. This key-value pair is then added to the TreeMap and saved into our .json file. TutorAid is then set back into normal mode. The TreeMap is also used to generate command suggestions based on the user\u0027s input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* *Minor enhancement*: Added *the Student Profile feature*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** What it does: Allows the user to add students and track all their vital statistics. Pictures can be assigned to individual profiles as well."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Justification: Since TutorAid is meant to help tutors, having a birds eye view of all their students in all the modules they teach is extremely essential so that they can carry out their job efficiently."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Implementation: The person class in AB3 was remodelled to resemble a student (with Results, Attendance, Participation etc). Additional commands were also implemented such as mass attendance and participation marking and filtering by class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* *Code contributed*: [https://github.com/AY1920S1-CS2103T-F14-2/main/commits?author\u003dngswbryan[All commits]] [https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dngswbryan\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Project Code Dashboard]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Managed bugs reported by other users in PED and assigned team memembers to issues: https://github.com/AY1920S1-CS2103T-F14-2/main/issues/287[#287], https://github.com/AY1920S1-CS2103T-F14-2/main/issues/266[#266], https://github.com/AY1920S1-CS2103T-F14-2/main/issues/255[#255], https://github.com/AY1920S1-CS2103T-F14-2/main/issues/290[#290]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Managed release `v1.3` on Github"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Wrote tests for existing features to increase code coverage from 36% to 42% (Pull request https://github.com/AY1920S1-CS2103T-F14-2/main/pull/316[#316])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Added detailed implementation documentation for the custom shortcut feature in Developer Guide, including diagrams (Pull requests https://github.com/AY1920S1-CS2103T-F14-2/main/pull/215[#215])"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: #14"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Reviewed and gave feedback to team members. PRs reviewed: //todo"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: 1, 2, 3) //todo"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "*** Set up Codacy for code quality"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstudentProfile]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlearncustomcommands]"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.storage.JsonTutorAidStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.storage.TutorAidStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TutorAid ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAidStorage tutorAidStorage \u003d new JsonTutorAidStorage(userPrefs.getTutorAidFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        storage \u003d new StorageManager(tutorAidStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Optional\u003cReadOnlyTutorAid\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ReadOnlyTutorAid initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            addressBookOptional \u003d storage.readTutorAid();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TutorAid\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleTutorAid);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TutorAid\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            initialData \u003d new TutorAid();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TutorAid\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            initialData \u003d new TutorAid();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TutorAid\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        logger.info(\"Starting TutorAid \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 18,
      "-": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_INVALID_PEOPLE_DISPLAYED_INDEX \u003d \"One or more of the person \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX \u003d \"The reminder index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX \u003d \"The earnings index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTES_DISPLAYED_INDEX \u003d \"The notes index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_EARNINGS_LISTED_OVERVIEW \u003d \"%1$d earnings listed!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_NOTES_LISTED_OVERVIEW \u003d \"%1$d notes listed!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USERNAME_ERROR \u003d \"Username is invalid. Please try again.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_PASSWORD_ERROR \u003d \"Password is invalid. Please try again.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 2,
      "TeoShyanJie": 2,
      "Xuerneas": 2,
      "kerwin97": 1,
      "caesarpjz": 4,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *   Ignores case, but does not need a full word match is required."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean containsIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .anyMatch(s -\u003e s.contains(preppedWord));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 26,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    CommandResult execute(String commandText, boolean isUnknown) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns the TutorAid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @see seedu.address.model.Model#getTutorAid()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    ReadOnlyTutorAid getTutorAid();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of earnings */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    ObservableList\u003cEarnings\u003e getFilteredEarningsList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of CommandObjects */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    ObservableList\u003cCommandObject\u003e getFilteredCommandsList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of reminders */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of notes */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Path getTutorAidFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 7,
      "TeoShyanJie": 3,
      "Xuerneas": 10,
      "caesarpjz": 3,
      "kerwin97": 4,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.TutorAidParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TutorAidParser tutorAidParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAidParser \u003d new TutorAidParser(getFilteredCommandsList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(String commandText, boolean isUnknown) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (model.userHasLoggedIn()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                Command command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                if (isUnknown) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    command \u003d tutorAidParser.checkCommand(commandText, model.getSavedCommand());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    command \u003d tutorAidParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                storage.saveTutorAid(model.getTutorAid());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                Command command \u003d tutorAidParser.parseCommandWithoutLoggingIn(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return model.getTutorAid();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ObservableList\u003cEarnings\u003e getFilteredEarningsList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return model.getFilteredEarningsList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ObservableList\u003cCommandObject\u003e getFilteredCommandsList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return model.getFilteredCommandsList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return model.getFilteredReminderList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return model.getFilteredNotesList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return model.getTutorAidFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 13,
      "TeoShyanJie": 6,
      "Xuerneas": 19,
      "caesarpjz": 13,
      "kerwin97": 6,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/authentication/Authentication.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.authentication;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.security.NoSuchAlgorithmException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.security.SecureRandom;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.security.spec.InvalidKeySpecException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.security.spec.KeySpec;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javax.crypto.SecretKeyFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javax.crypto.spec.PBEKeySpec;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Hash passwords for storage, and test passwords against password tokens."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Instances of this class can be used concurrently by multiple threads."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * @author erickson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * @see \u003ca href\u003d\"http://stackoverflow.com/a/2861125/3474\"\u003eStackOverflow\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public final class Authentication {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Each token produced by this class uses this identifier as a prefix."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String ID \u003d \"$31$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The minimum recommended cost, used by default"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final int DEFAULT_COST \u003d 16;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String ALGORITHM \u003d \"PBKDF2WithHmacSHA1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final int SIZE \u003d 128;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final Pattern layout \u003d Pattern.compile(\"\\\\$31\\\\$(\\\\d\\\\d?)\\\\$(.{43})\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final SecureRandom random;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final int cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Authentication() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this(DEFAULT_COST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Create a password manager with a specified cost"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param cost the exponential computational cost of hashing a password, 0 to 30"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Authentication(int cost) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        iterations(cost); /* Validate cost */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.random \u003d new SecureRandom();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks if the cost is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static int iterations(int cost) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if ((cost \u003c 0) || (cost \u003e 30)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalArgumentException(\"cost: \" + cost);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return 1 \u003c\u003c cost;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Hash a password for storage."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return a secure authentication token to be stored for later authentication"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String hash(char[] password) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        byte[] salt \u003d new byte[SIZE / 8];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        random.nextBytes(salt);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        byte[] dk \u003d pbkdf2(password, salt, 1 \u003c\u003c cost);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        byte[] hash \u003d new byte[salt.length + dk.length];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.arraycopy(salt, 0, hash, 0, salt.length);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        System.arraycopy(dk, 0, hash, salt.length, dk.length);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Base64.Encoder enc \u003d Base64.getUrlEncoder().withoutPadding();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return ID + cost + \u0027$\u0027 + enc.encodeToString(hash);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Hash a password in an immutable {@code String}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * \u003cp\u003ePasswords should be stored in a {@code char[]} so that it can be filled"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * with zeros after use instead of lingering on the heap and elsewhere."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @deprecated Use {@link #hash(char[])} instead"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String hash(String password) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return hash(password.toCharArray());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String hashingPassword(String password) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return hash(password);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Authenticate with a password and a stored password token."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return true if the password and token match"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean authenticate(char[] password, String token) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Matcher m \u003d layout.matcher(token);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!m.matches()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid token format\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int iterations \u003d iterations(Integer.parseInt(m.group(1)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        byte[] hash \u003d Base64.getUrlDecoder().decode(m.group(2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        byte[] salt \u003d Arrays.copyOfRange(hash, 0, SIZE / 8);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        byte[] check \u003d pbkdf2(password, salt, iterations);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int zero \u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (int idx \u003d 0; idx \u003c check.length; ++idx) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            zero |\u003d hash[salt.length + idx] ^ check[idx];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return zero \u003d\u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Authenticate with a password in an immutable {@code String} and a stored"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * password token."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @deprecated Use {@link #authenticate(char[],String)} instead."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @see #hash(String)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean authenticate(String password, String token) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return authenticate(password.toCharArray(), token);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Makes use of the algorithm to add the salt and encrypt the password."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static byte[] pbkdf2(char[] password, byte[] salt, int iterations) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        KeySpec spec \u003d new PBEKeySpec(password, salt, iterations, SIZE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            SecretKeyFactory f \u003d SecretKeyFactory.getInstance(ALGORITHM);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return f.generateSecret(spec).getEncoded();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (NoSuchAlgorithmException ex) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalStateException(\"Missing algorithm: \" + ALGORITHM, ex);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (InvalidKeySpecException ex) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalStateException(\"Invalid SecretKeyFactory\", ex);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person or people to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_NAME + \"NAME/S \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_CLASSID + \"CLASSID \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_NAME + \"John Doe,Ted,Tom \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_CLASSID + \"CS2030\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New people added!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Trying to add a person that \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"already exists in the address book\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final ArrayList\u003cPerson\u003e toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public AddCommand(ArrayList\u003cPerson\u003e people) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(people);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        toAdd \u003d people;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (Person student : toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (model.hasPerson(student)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            model.addPerson(student);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 21,
      "Xuerneas": 4,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEarningsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Adds the earnings into the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AddEarningsCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_earnings\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the earnings of the user \" + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_CLASSID + \"CLASSID \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT(in dollars) \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_DATE + \"03/05/2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TYPE + \"tut \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_CLASSID + \"CS2103T \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_AMOUNT + \"55.30\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New earnings added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EARNINGS \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"This earnings with the same module, date and amount already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    // For date, maybe can use this instead --\u003e %tm/%td/%ty"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Earnings toAddEarnings;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AddEarningsCommand(Earnings earnings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(earnings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.toAddEarnings \u003d earnings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // If earnings with same date and amount and module has already been added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (model.hasEarnings(toAddEarnings)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EARNINGS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.addEarnings(toAddEarnings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAddEarnings),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, true, false, false,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof AddEarningsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 toAddEarnings.equals(((AddEarningsCommand) other).toAddEarnings));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "caesarpjz": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignClassCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Assigns a class to a student or to a group of students."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class AssignClassCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign_class\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits/Updates the class of the user or users \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"by the index number used in the displayed person list. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Parameters: INDEXES (must be a positive integers) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_CLASSID + \"NEW_CLASS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1,2,3 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_CLASSID + \"CS2030\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_ASSIGN_SUCCESS \u003d \"Class successfully assigned.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"You must specify a class name.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"A student already has that class assigned!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final ArrayList\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param index stores an arraylist of indexes of people in the filtered person list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param editEarningsDescriptor details to edit the people with"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public AssignClassCommand(ArrayList\u003cIndex\u003e index, EditPersonDescriptor editEarningsDescriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(editEarningsDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editEarningsDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (Index index : this.index) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_SUCCESS),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                false, false, false, false,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                true, true, false, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                                                 EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ClassId updatedClassId \u003d editPersonDescriptor.getClassId().get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPicture(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                updatedClassId, personToEdit.getAttendance(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                personToEdit.getResult(), personToEdit.getParticipation());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(other instanceof AssignClassCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        AssignClassCommand e \u003d (AssignClassCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 113,
      "Xuerneas": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CancelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * To cancel adding an unknown command to existing command list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class CancelCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String SHOWING_CANCEL_MESSAGE \u003d \"We cancelled the wrongly entered command. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Feel free to continue!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandResult(SHOWING_CANCEL_MESSAGE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 23,
      "Xuerneas": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangeTabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAB_CHANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EARNINGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_REMINDERS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.WindowView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Changes the tab of the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ChangeTabCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"change_tab\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change tab to any of the available ones \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TAB_CHANGE + \"TAB_DESTINATION \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TAB_CHANGE + \"notepad\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TAB_CHANGE + \"earnings\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TAB_CHANGE + \"student_profile\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TAB_CHANGE + \"calendar\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TAB_CHANGE + \"reminders\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CALENDAR \u003d \"Changed tab to CALENDAR\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TASK \u003d \"Changed tab to TASK\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS_EARNINGS \u003d \"Changed tab to EARNINGS\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS_STUDENT_PROFILE \u003d \"Changed tab to STUDENT_PROFILE\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS_NOTEPAD \u003d \"Changed tab to NOTEPAD\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_REMINDERS \u003d \"Changed tab to REMINDERS\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Error: Unable to change tab\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private WindowView newView;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ChangeTabCommand(WindowView newView) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(newView);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.newView \u003d newView;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (newView.getIndexNumber() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            model.updateFilteredEarningsList(PREDICATE_SHOW_ALL_EARNINGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_EARNINGS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, true, false, false,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else if (newView.getIndexNumber() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            model.updateFilteredCalendarList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_CALENDAR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else if (newView.getIndexNumber() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_STUDENT_PROFILE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, false, false, false,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    true, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else if (newView.getIndexNumber() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            model.updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_NOTEPAD,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, false, false, false,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, true, false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else if (newView.getIndexNumber() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            model.updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_REMINDERS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, false, false, false,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else if (newView.getIndexNumber() \u003d\u003d 6) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_TASK,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, false, false, true,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    false, false, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new CommandResult(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 1,
      "Xuerneas": 15,
      "caesarpjz": 60,
      "kerwin97": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClaimEarningsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLAIM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EARNINGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Claim;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Changes the status of the earnings in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ClaimEarningsCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"claim_earnings\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \": Shows that the earnings has been claimed by the user. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_CLAIM + \"CLAIM_STATUS \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_CLAIM + \"approved\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Earnings claimed: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Claim claim;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ClaimEarningsCommand(Index index, Claim claim) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(index, claim);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.claim \u003d claim;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        List\u003cEarnings\u003e lastShownList \u003d model.getFilteredEarningsList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earningsToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earningsToEdit.setClaim(claim);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.updateFilteredEarningsList(PREDICATE_SHOW_ALL_EARNINGS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, earningsToEdit),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                false, false, true, false, false,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!(other instanceof ClaimEarningsCommand)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClaimEarningsCommand e \u003d (ClaimEarningsCommand) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 claim.equals(e.claim);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Clears the TutorAid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TutorAid has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.setVersionedTutorAid(new TutorAid());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private boolean unknown;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private boolean showEarnings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private boolean showNotes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private boolean userRegister \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private boolean showTasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private boolean showPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private boolean showReminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showEarnings,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                         boolean unknown, boolean showTasks, boolean showPersons,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                         boolean showNotes, boolean showReminder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.showEarnings \u003d showEarnings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.unknown \u003d unknown;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.showTasks \u003d showTasks;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.showPersons \u003d showPersons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.showNotes \u003d showNotes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.showReminder \u003d showReminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean isEarnings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return showEarnings;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean isUnknown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return unknown;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean isPersons() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return showPersons;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean isNotes() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return showNotes;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean isReminder() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return showReminder;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void userRegistering() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userRegister \u003d !userRegister;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean isRegister() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return userRegister;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean isTasks() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return showTasks;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 6,
      "Xuerneas": 30,
      "caesarpjz": 19,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCustomCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.TutorAidParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.commandsexceptions.CommandNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Deletes a custom command previously added by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class DeleteCustomCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteCustomCommand\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \": Deletes the custom command previously added\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Parameters: COMMAND\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CUSTOM_COMMAND\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_DELETE_COMMAND_SUCCESS \u003d \"%1$s: Got it we removed the command!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_DELETE_COMMAND_FAIL \u003d \"%1$s: You can\u0027t remove basic commands!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final CommandObject targetCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public DeleteCustomCommand(CommandObject targetCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.targetCommand \u003d targetCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            model.deleteCommand(this.targetCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String commandWordToRemove \u003d this.targetCommand.getCommandWord().word;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            TutorAidParser.getCommandList().remove(commandWordToRemove);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_COMMAND_SUCCESS, this.targetCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (CommandNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DELETE_COMMAND_FAIL, this.targetCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof DeleteCustomCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 targetCommand.equals(((DeleteCustomCommand) other).targetCommand)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 51,
      "Xuerneas": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEarningsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Deletes an earning identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DeleteEarningsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_earnings\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \": Deletes the earnings identified by the index number used in the displayed earnings list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_DELETE_EARNINGS_SUCCESS \u003d \"Deleted Earnings: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DeleteEarningsCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        List\u003cEarnings\u003e lastShownList \u003d model.getFilteredEarningsList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earningsToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.deleteEarnings(earningsToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EARNINGS_SUCCESS, earningsToDelete),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, true, false, false,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof DeleteEarningsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEarningsCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "caesarpjz": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Result;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"[\" + PREFIX_PICTURE + \"FILE NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_PICTURE + \"new.jpg\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                true, true, false, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Result updatedResult \u003d editPersonDescriptor.getResult().orElse(personToEdit.getResult());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ClassId updatedClassId \u003d editPersonDescriptor.getClassId().orElse(personToEdit.getClassId());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Participation updatedParticipation \u003d editPersonDescriptor.getParticipation()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .orElse(personToEdit.getParticipation());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Picture updatedPicture \u003d editPersonDescriptor.getPicture().orElse(personToEdit.getPicture());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Attendance updatedAttendance \u003d editPersonDescriptor.getAttendance().orElse(personToEdit.getAttendance());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Person(updatedName, updatedPicture, updatedClassId,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                updatedAttendance, updatedResult, updatedParticipation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 19,
      "Xuerneas": 3,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindEarningsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.ClassIdContainKeywordPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Finds and lists all earnings in address book which contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class FindEarningsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_earnings\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all earnings whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS1231\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final ClassIdContainKeywordPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public FindEarningsCommand(ClassIdContainKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.updateFilteredEarningsList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                String.format(Messages.MESSAGE_EARNINGS_LISTED_OVERVIEW, model.getFilteredEarningsList().size()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, true, false, false,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof FindEarningsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEarningsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "caesarpjz": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false, false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListClassCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.ClassIdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Finds and lists all persons in address book whose ClassId contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class ListClassCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_class\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose class ID contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2030 CS2040\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final ClassIdContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ListClassCommand(ClassIdContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof ListClassCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 predicate.equals(((ListClassCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 41,
      "Xuerneas": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.storage.AccountStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.storage.JsonAccountStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Logs the user in with a username and password provided by user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Log in with your username and password \" + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_USERNAME + \"username1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_PASSWORD + \"pa5sw0rD\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Welcome back!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Wrong username or password. Please check login details and try again.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Account account;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public LoginCommand(Account acc) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(acc);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.account \u003d acc;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AccountStorage accountStorage \u003d new JsonAccountStorage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (accountStorage.getAccountsList().get().sameCredentials(account.getUsername(), account.getPassword())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                model.isLoggedIn();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                UiManager.startStudentProfile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, account));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new CommandException(\"Please login again.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IOException | DataConversionException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 account.equals(((LoginCommand) other).account));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Logs out the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logout of your account. \" + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Succesfully logged out!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Unable to logout. Please try again.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public LogoutCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            model.isLoggedOut();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            UiManager.startLoginWindow();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkAttendanceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Increases attendance of student or to a group of students."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class MarkAttendanceCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark_attendance\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks attendance of the student or students \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"by the index number used in the displayed person list. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"All values will be increased by one.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Parameters: INDEXES (must be a positive integers) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1,2,3 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_MARK_SUCCESS \u003d \"Attendance marked!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final ArrayList\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param index stores an arraylist of indexes of people in the filtered person list to edit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public MarkAttendanceCommand(ArrayList\u003cIndex\u003e index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        //Check through all indexes are valid before executing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (Index index : this.index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PEOPLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (Index index : this.index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Person editedPerson \u003d createEditedPerson(personToEdit, personToEdit.getAttendance());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_SUCCESS),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                                             Attendance currentAttendance) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        int incrementedAttendance \u003d Integer.parseInt(currentAttendance.value) + 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Attendance updatedAttendance \u003d new Attendance(Integer.toString(incrementedAttendance));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPicture(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                personToEdit.getClassId(), updatedAttendance,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                personToEdit.getResult(), personToEdit.getParticipation());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(other instanceof MarkAttendanceCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        MarkAttendanceCommand e \u003d (MarkAttendanceCommand) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 99,
      "Xuerneas": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MarkParticipationCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Increases participation of student or to a group of students."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class MarkParticipationCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mark_participation\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks participation of the student or students \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"by the index number used in the displayed person list. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"All values will be increased by one.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Parameters: INDEXES (must be a positive integers) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1,2,3 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_MARK_SUCCESS \u003d \"Participation marked!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final ArrayList\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param index stores an arraylist of indexes of people in the filtered person list to edit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public MarkParticipationCommand(ArrayList\u003cIndex\u003e index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        //check through if all indexes are valid before executing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (Index index : this.index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PEOPLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (Index index : this.index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Person editedPerson \u003d createEditedPerson(personToEdit, personToEdit.getParticipation());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_SUCCESS),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                                             Participation currentParticipation) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        int incrementedParticipation \u003d Integer.parseInt(currentParticipation.value) + 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Participation updatedParticipation \u003d new Participation(Integer.toString(incrementedParticipation));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Person(personToEdit.getName(), personToEdit.getPicture(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                personToEdit.getClassId(), personToEdit.getAttendance(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                personToEdit.getResult(), updatedParticipation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(other instanceof MarkParticipationCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        MarkParticipationCommand e \u003d (MarkParticipationCommand) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 98,
      "Xuerneas": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandAction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Adds a new command to the TutorAid\u0027s commands list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class NewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String SHOWING_NEW_COMMAND_MESSAGE \u003d \"Got it! You can now use %1$s as \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String prevUnknownCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public NewCommand(String userInput, String prevUnknownCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.prevUnknownCommand \u003d prevUnknownCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandObject newCommand \u003d new CommandObject(new CommandWord(this.prevUnknownCommand),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new CommandAction(this.userInput));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.addCommand(newCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandResult(String.format(SHOWING_NEW_COMMAND_MESSAGE + this.userInput,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                this.prevUnknownCommand));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 36,
      "Xuerneas": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!model.canRedoTutorAid()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.redoTutorAid();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RegisterAccountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.authentication.Authentication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.storage.AccountStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.storage.JsonAccountStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Registers a new account with username and password"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * and saves the account into account storage database."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class RegisterAccountCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \": Registers a new account. Username and password should not contain any spaces\" + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_USERNAME + \"username123 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_PASSWORD + \"p2s5w0rD\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New account created!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"This username already exists! Please try again\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Unable to register account\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    // For date, maybe can use this instead --\u003e %tm/%td/%ty"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Account toAddAccount;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public RegisterAccountCommand(Account acc) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(acc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.toAddAccount \u003d acc;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AccountStorage accountStorage \u003d new JsonAccountStorage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (accountStorage.getAccountsList().get().hasUsername(toAddAccount.getUsername())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Authentication authenticator \u003d new Authentication();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String newPassword \u003d authenticator.hashingPassword(toAddAccount.getPassword());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Account acc \u003d new Account(toAddAccount.getUsername(), newPassword);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            accountStorage.saveAccount(acc);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            //model.addAccount(toAddAccount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAddAccount));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IOException | DataConversionException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(MESSAGE_ERROR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof RegisterAccountCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 toAddAccount.equals(((RegisterAccountCommand) other).toAddAccount));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetPictureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Assigns a picture to a student."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class SetPictureCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set_pic\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Assigns a picture to a student \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Please ensure the picture is in .jpg/.png/.gif/.bmp format and is in the same directory as TutorAid \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Existing picture will be overwritten by the incoming picture.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_PICTURE + \"FILENAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + PREFIX_PICTURE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"new.jpg\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Picture assigned: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Please specify a picture!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public SetPictureCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Picture updatedPicture \u003d editPersonDescriptor.getPicture().orElse(personToEdit.getPicture());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Person(personToEdit.getName(), updatedPicture, personToEdit.getClassId(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                personToEdit.getAttendance(), personToEdit.getResult(), personToEdit.getParticipation());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(other instanceof SetPictureCommand)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand e \u003d (SetPictureCommand) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 100,
      "Xuerneas": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TotalEarningsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Gets the total earnings of the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class TotalEarningsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"total_earnings\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gives you the total earnings you have earned. \" + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Good Job! This is how much you have earned: $\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Unable to get total earnings. Please try again.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public TotalEarningsCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + Earnings.getTotalEarnings(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, true, false, false,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "caesarpjz": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!model.canUndoTutorAid()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.undoTutorAid();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnknownCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * To handle when a user supplies a command the application does not understand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String CANCEL_USAGE \u003d \"\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Alternatively, type \\\"cancel\\\" if it was a genuine mistake and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"you want to escape this unknown command state.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String SHOWING_UNKNOWN_MESSAGE \u003d \"%1$s: We don\u0027t know what that means. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Help us understand so we can add this to our command library for your personal usage.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Please enter ONLY the command word of what you wanted to do.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String UNKNOWN_COMMAND_USAGE \u003d \"%1$s: That is not a valid input for mapping a command!\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"Please enter ONLY the command word you wish TutorAid to learn for: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String unknown;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public UnknownCommand(String unknown) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.unknown \u003d unknown;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String [] splittedCommand \u003d unknown.split(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (splittedCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new CommandException(String.format(UNKNOWN_COMMAND_USAGE + model.getSavedCommand() + CANCEL_USAGE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    this.unknown));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.saveCommand(this.unknown);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandResult(String.format(SHOWING_UNKNOWN_MESSAGE + CANCEL_USAGE, this.unknown),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, true, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 41,
      "Xuerneas": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateEarningsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EARNINGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Claim;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Edits earnings to the address book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UpdateEarningsCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update_earnings\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits/Updates the earnings of the user \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"by the index number used in the displayed earnings list. \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_DATE + \"NEW_DATE \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_TYPE + \"NEW_TYPE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_CLASSID + \"NEW_CLASSID \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_AMOUNT + \"NEW_AMOUNT(in dollars) \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_DATE + \"03/05/2020 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"or \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + PREFIX_CLASSID + \"CS2103T\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_UPDATE_SUCCESS \u003d \"Earnings updated: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EARNINGS \u003d \"This earnings already exists in the address book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final EditEarningsDescriptor editEarningsDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param editEarningsDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsCommand(Index index, EditEarningsDescriptor editEarningsDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(editEarningsDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.editEarningsDescriptor \u003d new EditEarningsDescriptor(editEarningsDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        List\u003cEarnings\u003e lastShownList \u003d model.getFilteredEarningsList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earningsToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Claim claim \u003d earningsToEdit.getClaim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings editedEarnings \u003d createEditedEarnings(earningsToEdit, editEarningsDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        editedEarnings.setClaim(claim);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!earningsToEdit.isSameEarnings(editedEarnings) \u0026\u0026 model.hasEarnings(editedEarnings)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EARNINGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.setEarnings(earningsToEdit, editedEarnings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.updateFilteredEarningsList(PREDICATE_SHOW_ALL_EARNINGS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_SUCCESS, editedEarnings),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, true, false, false,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Creates and returns a {@code Earnings} with the details of {@code earningsToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * edited with {@code editEarningsDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static Earnings createEditedEarnings(Earnings earningsToEdit,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                                                 EditEarningsDescriptor editEarningsDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assert earningsToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Date updatedDate \u003d editEarningsDescriptor.getDate().orElse(earningsToEdit.getDate());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassId updatedClassId \u003d editEarningsDescriptor.getClassId().orElse(earningsToEdit.getClassId());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Amount updatedAmount \u003d editEarningsDescriptor.getAmount().orElse(earningsToEdit.getAmount());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Type updatedType \u003d editEarningsDescriptor.getType().orElse(earningsToEdit.getType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Earnings(updatedDate, updatedClassId, updatedAmount, updatedType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!(other instanceof UpdateEarningsCommand)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UpdateEarningsCommand e \u003d (UpdateEarningsCommand) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 editEarningsDescriptor.equals(e.editEarningsDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Stores the details to edit the earnings with."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Each non-empty field value will replace the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * corresponding field value of the earnings."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static class EditEarningsDescriptor {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        private ClassId classId;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        private Type type;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public EditEarningsDescriptor() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public EditEarningsDescriptor(EditEarningsDescriptor toCopy) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            setClassId(toCopy.classId);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            setType(toCopy.type);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return CollectionUtil.isAnyNonNull(date, classId, amount, type);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setClassId(ClassId classId) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            this.classId \u003d classId;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public Optional\u003cClassId\u003e getClassId() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Optional.ofNullable(classId);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setType(Type type) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            this.type \u003d type;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public Optional\u003cType\u003e getType() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Optional.ofNullable(type);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (!(other instanceof EditEarningsDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            EditEarningsDescriptor e \u003d (EditEarningsDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u0026\u0026 getClassId().equals(e.getClassId())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u0026\u0026 getType().equals(e.getType());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 4,
      "caesarpjz": 205
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARKING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * command to add tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASKS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \"This task already exists in the address book\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the calendar. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_CLASSID + \"MODULE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_MARKING + \"MARKING_STATUS \" + \"(Y OR N) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_TASK_TIME + \"START_TIME, END_TIME\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_CLASSID + \"CS2103T \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_MARKING + \"Y \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_TASK_TIME + \"13/10/2019 13:00, 13/10/2019 15:00 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_TASK_TIME + \"14/10/2019 13:00, 14/10/2019 15:00 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added:\\n%1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASKS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, true,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * command to delete tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        false, false, false, false, true,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/EditTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARKING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Marking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * command to update the existing tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit_task\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"[\" + PREFIX_CLASSID + \"Y] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"[\" + PREFIX_MARKING + \"Y] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"[\" + PREFIX_TASK_TIME + \"19/10/2019 12:00, 19/10/2019 14:00] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + PREFIX_MARKING + \"N\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task:\\n%1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the address book.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, true,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ClassId updatedClassId \u003d editTaskDescriptor.getClassId().orElse(taskToEdit.getClassId());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Marking updatedMarking \u003d editTaskDescriptor.getMarking()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .orElse(taskToEdit.getMarking());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TreeSet\u003cTaskTime\u003e updatedTimes \u003d editTaskDescriptor.getTaskTimes().orElse(taskToEdit.getTime());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new Task(updatedClassId, updatedTimes, updatedMarking);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private ClassId classId;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private Marking marking;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private TreeSet\u003cTaskTime\u003e taskTimes;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "         * A defensive copy of {@code taskTimes} is used internally."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            setClassId(toCopy.classId);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            setMarking(toCopy.marking);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            setTaskTimes(toCopy.taskTimes);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return CollectionUtil.isAnyNonNull(classId, marking, taskTimes);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setMarking(Marking marking) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            this.marking \u003d marking;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public Optional\u003cMarking\u003e getMarking() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return Optional.ofNullable(marking);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setTaskTimes(TreeSet\u003cTaskTime\u003e taskTimes) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            this.taskTimes \u003d (taskTimes !\u003d null) ? new TreeSet\u003c\u003e(taskTimes) : null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public Optional\u003cTreeSet\u003cTaskTime\u003e\u003e getTaskTimes() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return (taskTimes !\u003d null) ? Optional.of(taskTimes) : Optional.empty();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setClassId(ClassId classId) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            this.classId \u003d classId;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public Optional\u003cClassId\u003e getClassId() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return Optional.ofNullable(classId);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return getClassId().equals(e.getClassId())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    \u0026\u0026 getMarking().equals(e.getMarking())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    \u0026\u0026 getTaskTimes().equals(e.getTaskTimes());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 189
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/FindTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Finds and lists all tasks in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_task_by_module\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose description contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2100 CS2103T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TaskContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public FindTaskCommand(TaskContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, true,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof FindTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindTaskCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/ListTasksBasedOnDateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskContainsDatePredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Lists all tasks in the address book on a certain date to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class ListTasksBasedOnDateCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find_task_by_date\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks on the specific date.\\n \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Parameters: DATE\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 20/10/2019\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TaskContainsDatePredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ListTasksBasedOnDateCommand(TaskContainsDatePredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, true,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/calendar/ListTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Lists all tasks in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class ListTasksCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list_task\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, true,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/AddNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Command to add note"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class AddNotesCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addnote\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + PREFIX_CLASSID + \"MODULE CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + PREFIX_CLASSID + \"CS2103T \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + PREFIX_CONTENT + \"Checking for project meeting time \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New note added: \\n + %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This note already exists in the address book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final Notes toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public AddNotesCommand(Notes note) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        toAdd \u003d note;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (model.hasNotes(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        model.addNotes(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 48,
      "Xuerneas": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/DeleteNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Deletes a notes identified using it\u0027s displayed index from the address book"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class DeleteNotesCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletenote\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \": Deletes the notes identified by the index number used in the displayed notes list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTES_SUCCESS \u003d \"Deleted Notes: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public DeleteNotesCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        List\u003cNotes\u003e lastShownList \u003d model.getFilteredNotesList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Notes noteToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        model.deleteNotes(noteToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTES_SUCCESS, noteToDelete),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                || (other instanceof DeleteNotesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteNotesCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 53,
      "Xuerneas": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/EditNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Edits the details of an existing notes in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class EditNotesCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editnote\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the notes identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"by the index number used in the displayed notes list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"[\" + PREFIX_CLASSID + \"NAME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"[\" + PREFIX_CONTENT + \"CONTENT] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_EDIT_NOTES_SUCCESS \u003d \"Edited Notes: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTES \u003d \"This notes already exists in the address book.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final EditNotesDescriptor editNotesDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @param editNotesDescriptor details to edit the person with"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public EditNotesCommand(Index index, EditNotesDescriptor editNotesDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(editNotesDescriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.editNotesDescriptor \u003d new EditNotesDescriptor(editNotesDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        List\u003cNotes\u003e lastShownList \u003d model.getFilteredNotesList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTES_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Notes notesToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Notes editedNote \u003d createEditedNotes(notesToEdit, editNotesDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!notesToEdit.isSameNote(editedNote) \u0026\u0026 model.hasNotes(editedNote)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        model.setNotes(notesToEdit, editedNote);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        model.updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_NOTES_SUCCESS, editedNote),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private static Notes createEditedNotes(Notes notesToEdit, EditNotesDescriptor editNotesDescriptor) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        assert notesToEdit !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        ClassId updatedCode \u003d editNotesDescriptor.getCode().orElse(notesToEdit.getCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Content updatedContent \u003d editNotesDescriptor.getContent().orElse(notesToEdit.getContent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new Notes(updatedCode, updatedContent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        EditNotesCommand e \u003d (EditNotesCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 editNotesDescriptor.equals(e.editNotesDescriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static class EditNotesDescriptor {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        private ClassId code;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        private Content content;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public EditNotesDescriptor() {}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public EditNotesDescriptor(EditNotesDescriptor toCopy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            setModuleCode(toCopy.code);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            setContent(toCopy.content);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return CollectionUtil.isAnyNonNull(code, content);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public void setModuleCode(ClassId code) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            this.code \u003d code;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public Optional\u003cClassId\u003e getCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return Optional.ofNullable(code);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public void setContent(Content content) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            this.content \u003d content;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public Optional\u003cContent\u003e getContent() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return Optional.ofNullable(content);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            if (!(other instanceof EditNotesDescriptor)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            EditNotesDescriptor e \u003d (EditNotesDescriptor) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return getCode().equals(e.getCode())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                    \u0026\u0026 getContent().equals(e.getContent());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 168,
      "Xuerneas": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/FindNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.NotesContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Finds and lists all notes in address book whose notes contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class FindNotesCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findnote\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all notes whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"cs2103T\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final NotesContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public FindNotesCommand(NotesContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        model.updateFilteredNotesList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                String.format(Messages.MESSAGE_NOTES_LISTED_OVERVIEW, model.getFilteredNotesList().size()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                || (other instanceof FindNotesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindNotesCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 42,
      "Xuerneas": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/ListNotesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Lists all notes in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class ListNotesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listnote\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all notes\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        model.updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 23,
      "Xuerneas": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminder/AddReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * command to add reminders."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class AddReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addReminder\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a Reminder for a certain task. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + PREFIX_REMINDER_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + PREFIX_REMINDER_TIME + \"START_TIME, END_TIME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + PREFIX_REMINDER_DESCRIPTION + \"CS2103T Lecture \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + PREFIX_REMINDER_TIME + \"13/10/2019 13:00, 13/10/2019 15:00 \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final Reminder toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Creates an AddTaskCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public AddReminderCommand(Reminder reminder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        toAdd \u003d reminder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        model.addReminder(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "kerwin97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/reminder/DeleteReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.logic.commands.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * command to delete tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class DeleteReminderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteReminder\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + \": Deletes the reminder identified by the index number used in the displayed reminder list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_DELETE_REMINDER_SUCCESS \u003d \"Deleted Reminder: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public DeleteReminderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        List\u003cReminder\u003e lastShownList \u003d model.getFilteredReminderList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_REMINDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Reminder reminderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        model.deleteReminder(reminderToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_REMINDER_SUCCESS, reminderToDelete),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false, false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                || (other instanceof DeleteReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteReminderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "kerwin97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/util/EditPersonDescriptor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Result;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * corresponding field value of the person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class EditPersonDescriptor {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Picture picture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private ClassId classId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Result result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Participation participation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setName(toCopy.name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setPicture(toCopy.picture);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setAttendance(toCopy.attendance);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setClassId(toCopy.classId);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setResult(toCopy.result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setParticipation(toCopy.participation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return CollectionUtil.isAnyNonNull(name, picture, classId, result, attendance, participation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setPicture(Picture picture) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.picture \u003d picture;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Optional\u003cPicture\u003e getPicture() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Optional.ofNullable(picture);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setClassId(ClassId classId) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Optional\u003cClassId\u003e getClassId() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Optional.ofNullable(classId);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setResult(Result result) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Optional\u003cResult\u003e getResult() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Optional.ofNullable(result);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setAttendance(Attendance attendance) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Optional\u003cAttendance\u003e getAttendance() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Optional.ofNullable(attendance);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setParticipation(Participation participation) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Optional\u003cParticipation\u003e getParticipation() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Optional.ofNullable(participation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return getName().equals(e.getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 getClassId().equals(e.getClassId())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 getResult().equals(e.getResult())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 getParticipation().equals(e.getParticipation())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 getPicture().equals(e.getPicture())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 getAttendance().equals(e.getAttendance());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CLASSID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CLASSID)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cPerson\u003e listOfPeople \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String names \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String[] splittedNames \u003d names.split(\",\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ClassId classId \u003d ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (String name : splittedNames) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Name individualName \u003d ParserUtil.parseName(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            listOfPeople.add(new Person(individualName, classId));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new AddCommand(listOfPeople);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 18,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEarningsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.AddEarningsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new AddEarningsCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AddEarningsCommandParser implements Parser\u003cAddEarningsCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * in the context of the AddEarningsCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns an AddEarningsCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AddEarningsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                PREFIX_DATE, PREFIX_TYPE, PREFIX_CLASSID, PREFIX_AMOUNT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_TYPE, PREFIX_CLASSID, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassId classId \u003d ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Type type \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (Amount.moreThanMaxValue(argMultimap.getValue(PREFIX_AMOUNT).get())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings.addToTotalEarnings(amount);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earnings \u003d new Earnings(date, classId, amount, type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new AddEarningsCommand(earnings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddNotesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.AddNotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Parses input arguments and creates a new AddNotesCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class AddNotesCommandParser implements Parser\u003cAddNotesCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public AddNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSID, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASSID, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        ClassId module \u003d ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Content content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Notes note \u003d new Notes(module, content);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new AddNotesCommand(note);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddReminderParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.ReminderDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.ReminderTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Represents the ability to add a reminder for a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Might disable this feature if reminders should not be created individually"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class AddReminderParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public AddReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_REMINDER_DESCRIPTION, PREFIX_REMINDER_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_REMINDER_DESCRIPTION, PREFIX_REMINDER_TIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        ReminderDescription reminderDescription \u003d ParserUtil.parseReminderDescription(argMultimap"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                .getValue(PREFIX_REMINDER_DESCRIPTION).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        TreeSet\u003cReminderTime\u003e reminderTimeSet \u003d ParserUtil.parseReminderTimes(argMultimap"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                .getAllValues(PREFIX_REMINDER_TIME));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Reminder reminder \u003d new Reminder(reminderDescription, reminderTimeSet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return new AddReminderCommand(reminder);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARKING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.AddTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Marking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Parses input arguments and creates a new AddTaskCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class AddTaskCommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSID, PREFIX_MARKING, PREFIX_TASK_TIME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLASSID, PREFIX_MARKING, PREFIX_TASK_TIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ClassId classId \u003d ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Marking marking \u003d ParserUtil.parseMarking(argMultimap.getValue(PREFIX_MARKING).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TreeSet\u003cTaskTime\u003e taskTimeList \u003d ParserUtil.parseTaskTimes(argMultimap.getAllValues(PREFIX_TASK_TIME));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task task \u003d new Task(classId, taskTimeList, marking);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignClassCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AssignClassCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Parses input arguments and creates a new AssignClassCommandParser object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class AssignClassCommandParser implements Parser\u003cAssignClassCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AssignClassCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * and returns an AssignClassCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public AssignClassCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String allIndexes \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String[] splitIndex \u003d allIndexes.split(\",\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            for (String index : splitIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                Index parsedIndex \u003d ParserUtil.parseIndex(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                indexes.add(parsedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    AssignClassCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLASSID).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            editPersonDescriptor.setClassId(ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(AssignClassCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(AssignClassCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new AssignClassCommand(indexes, editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ChangeTabCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAB_CHANGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.ChangeTabCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.WindowView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new ChangeTabCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ChangeTabCommandParser implements Parser\u003cChangeTabCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns an ChangeTabCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ChangeTabCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAB_CHANGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAB_CHANGE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeTabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        WindowView view \u003d ParserUtil.parseWindowView(argMultimap.getValue(PREFIX_TAB_CHANGE).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new ChangeTabCommand(view);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClaimEarningsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLAIM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.ClaimEarningsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Claim;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new ClaimEarningsCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ClaimEarningsCommandParser implements Parser\u003cClaimEarningsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * in the context of the ClaimEarningsCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns an ClaimEarningsCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ClaimEarningsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                PREFIX_CLAIM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    ClaimEarningsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CLAIM)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClaimEarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Claim claim \u003d ParserUtil.parseClaim(argMultimap.getValue(PREFIX_CLAIM).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new ClaimEarningsCommand(index, claim);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Prefix PREFIX_PICTURE \u003d new Prefix(\"pic/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Prefix PREFIX_RESULT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Prefix PREFIX_ATTENDANCE \u003d new Prefix(\"att/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Prefix PREFIX_PARTICIPATION \u003d new Prefix(\"part/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Prefix PREFIX_CLASSID \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"amt/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final Prefix PREFIX_TASK_DESCRIPTION \u003d new Prefix(\"td/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final Prefix PREFIX_MARKING \u003d new Prefix(\"mark/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final Prefix PREFIX_TASK_TIME \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Prefix PREFIX_TAB_CHANGE \u003d new Prefix(\"tab/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_DESCRIPTION \u003d new Prefix(\"rd/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final Prefix PREFIX_REMINDER_TIME \u003d new Prefix(\"rt/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"user/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pass/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"mod/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"note/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Prefix PREFIX_CLAIM \u003d new Prefix(\"claim/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 5,
      "TeoShyanJie": 2,
      "Xuerneas": 3,
      "caesarpjz": 7,
      "kerwin97": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCustomCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.DeleteCustomCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Parses input arguments and creates a new DeleteCustomCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class DeleteCustomCommandParser implements Parser\u003cDeleteCustomCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCustomCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * and returns a DeleteCustomCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the command doesn\u0027t exist."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public DeleteCustomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            CommandObject commandToDelete \u003d ParserUtil.parseCommand(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return new DeleteCustomCommand(commandToDelete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCustomCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEarningsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.DeleteEarningsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new DeleteEarningsCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DeleteEarningsCommandParser implements Parser\u003cDeleteEarningsCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEarningsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns a DeleteEarningsCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DeleteEarningsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Earnings.deleteEarnings(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new DeleteEarningsCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEarningsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteNotesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNotesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Parses input arguments and creates a new DeleteNotesCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class DeleteNotesCommandParser implements Parser\u003cDeleteNotesCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public DeleteNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return new DeleteNotesCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNotesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteReminderParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Parses input arguments and creates a new DeleteReminderCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class DeleteReminderParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * and returns a DeleteReminderCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public DeleteReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return new DeleteReminderCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Parses input arguments and creates a new DeleteTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class DeleteTaskCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * and returns a DeleteTaskCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESULT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PICTURE, PREFIX_CLASSID,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                        PREFIX_ATTENDANCE, PREFIX_RESULT, PREFIX_PARTICIPATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PICTURE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            editPersonDescriptor.setPicture(ParserUtil.parsePicture(argMultimap.getValue(PREFIX_PICTURE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLASSID).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            editPersonDescriptor.setClassId(ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ATTENDANCE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    .setAttendance(ParserUtil.parseAttendance(argMultimap.getValue(PREFIX_ATTENDANCE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RESULT).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            editPersonDescriptor.setResult(ParserUtil.parseResult(argMultimap.getValue(PREFIX_RESULT).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PARTICIPATION).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            editPersonDescriptor"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    .setParticipation(ParserUtil.parseParticipation(argMultimap.getValue(PREFIX_PARTICIPATION).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 20,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditNotesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.EditNotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.EditNotesCommand.EditNotesDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Parses input arguments and creates a new EditNotesCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class EditNotesCommandParser implements Parser\u003cEditNotesCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public EditNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSID, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditNotesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        EditNotesDescriptor editNotesDescriptor \u003d new EditNotesDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLASSID).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            editNotesDescriptor"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                    .setModuleCode(ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTENT).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            editNotesDescriptor.setContent(ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!editNotesDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new ParseException(EditNotesCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new EditNotesCommand(index, editNotesDescriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MARKING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.EditTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Parses input arguments and creates a new EditTaskCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTaskCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * and returns an EditTaskCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CLASSID, PREFIX_TASK_TIME, PREFIX_MARKING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLASSID).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            editTaskDescriptor.setClassId(ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MARKING).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            editTaskDescriptor.setMarking(ParserUtil.parseMarking(argMultimap.getValue(PREFIX_MARKING).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        parseTimesForEdit(argMultimap.getAllValues(PREFIX_TASK_TIME)).ifPresent(editTaskDescriptor::setTaskTimes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException(EditTaskCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e taskTimes} into a {@code Set\u003cTaskTime\u003e} if {@code taskTimes} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * If {@code taskTimes} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code Set\u003cTaskTime\u003e} containing zero taskTimes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Optional\u003cTreeSet\u003cTaskTime\u003e\u003e parseTimesForEdit(Collection\u003cString\u003e taskTimes) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assert taskTimes !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (taskTimes.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Collection\u003cString\u003e taskTimeSet \u003d taskTimes.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 taskTimes.contains(\"\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                ? Collections.emptySet() : taskTimes;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return Optional.of(ParserUtil.parseTaskTimes(taskTimeSet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindEarningsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.FindEarningsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.ClassIdContainKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new FindEarningsCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class FindEarningsCommandParser implements Parser\u003cFindEarningsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public FindEarningsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String[] classIdKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new FindEarningsCommand(new ClassIdContainKeywordPredicate(Arrays.asList(classIdKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindNotesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.FindNotesCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.NotesContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Parses input arguments and creates a new FindNotesCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class FindNotesCommandParser implements Parser\u003cFindNotesCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public FindNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        String[] moduleCodeKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new FindNotesCommand(new NotesContainsKeywordsPredicate(Arrays.asList(moduleCodeKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindTaskCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.FindTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Parses input arguments and creates a new FindTaskCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class FindTaskCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * and returns a FindTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public FindTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new FindTaskCommand(new TaskContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListClassCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ListClassCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.ClassIdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Parses input arguments and creates a new ListClassCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class ListClassCommandParser implements Parser\u003cListClassCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListClassCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * and returns a ListClassCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ListClassCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListClassCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String[] classKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new ListClassCommand(new ClassIdContainsKeywordsPredicate(Arrays.asList(classKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListTasksBasedOnDateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.ListTasksBasedOnDateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskContainsDatePredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Parses input arguments and creates a new ListTasksBasedOnDateCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class ListTasksBasedOnDateCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListTasksBasedOnDateCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * and returns a ListTasksBasedOnDateCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ListTasksBasedOnDateCommand parse(String arg) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String trimmedArg \u003d arg.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (trimmedArg.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListTasksBasedOnDateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new ListTasksBasedOnDateCommand(new TaskContainsDatePredicate(trimmedArg));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class LoginCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * in the context of the AddEarningsCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns an AddEarningsCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Account account \u003d new Account(username, password);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new LoginCommand(account);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkAttendanceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Parses input arguments and creates a new MarkAttendanceCommandParser object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class MarkAttendanceCommandParser implements Parser\u003cMarkAttendanceCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkAttendanceCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * and returns an MarkAttendanceCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public MarkAttendanceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Prefix[] emptyPrefix \u003d new Prefix[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, emptyPrefix);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String allIndexes \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String[] splitIndex \u003d allIndexes.split(\",\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            for (String index : splitIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                Index parsedIndex \u003d ParserUtil.parseIndex(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                indexes.add(parsedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    MarkAttendanceCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new MarkAttendanceCommand(indexes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MarkParticipationCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkParticipationCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Parses input arguments and creates a new MarkParticipationCommandParser object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class MarkParticipationCommandParser implements Parser\u003cMarkParticipationCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkParticipationCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * and returns an MarkParticipationCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public MarkParticipationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Prefix[] emptyPrefix \u003d new Prefix[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, emptyPrefix);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String allIndexes \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String[] splitIndex \u003d allIndexes.split(\",\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            for (String index : splitIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                Index parsedIndex \u003d ParserUtil.parseIndex(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                indexes.add(parsedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    MarkParticipationCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new MarkParticipationCommand(indexes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AddEarningsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AssignClassCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ChangeTabCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.ClaimEarningsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.DeleteCustomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.DeleteEarningsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.FindEarningsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ListClassCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkParticipationCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.SetPictureCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.TotalEarningsCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.calendar.AddTaskCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.calendar.DeleteTaskCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.calendar.EditTaskCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.calendar.FindTaskCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.calendar.ListTasksBasedOnDateCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.calendar.ListTasksCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.note.AddNotesCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNotesCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.note.EditNotesCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.note.FindNotesCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.note.ListNotesCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.WindowView;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandAction;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandWord;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Claim;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.ModuleCode;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.ReminderDescription;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.ReminderTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Marking;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"No such command to be deleted!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static int viewIndexNumber;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses {@code commandToCheck} into an {@code CommandObject} and returns it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the command does not exist."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static CommandObject parseCommand(String commandToCheck) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedCommand \u003d commandToCheck.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TreeMap\u003cString, String\u003e commandList \u003d TutorAidParser.getCommandList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!commandList.containsKey(trimmedCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException((MESSAGE_INVALID_COMMAND));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return new CommandObject(new CommandWord(trimmedCommand),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    new CommandAction(commandList.get(trimmedCommand)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses a {@code String destination} into a {@code WindowView}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the given {@code destination} is invalid."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static WindowView parseWindowView(String destination) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(destination);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String trimmedDestination \u003d destination.trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!WindowView.isValidWindowView(trimmedDestination)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(WindowView.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new WindowView(trimmedDestination);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses a {@code String picture} into a {@code Picture}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the given {@code Picture} is invalid."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static Picture parsePicture(String picture) throws ParseException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(picture);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedPicture \u003d picture.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Picture.isValidPicture(trimmedPicture)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(Picture.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Picture(trimmedPicture);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses a {@code String result} into an {@code Result}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the given {@code result} is invalid."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static Result parseResult(String result) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(result);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedResult \u003d result.trim();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Result.isValidResult(trimmedResult)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(Result.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Result(trimmedResult);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses a {@code String attendance} into an {@code Attendance}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the given {@code attendance} is invalid."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static Attendance parseAttendance(String attendance) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedAttendance \u003d attendance.trim();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Attendance.isValidAttendance(trimmedAttendance)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Attendance(trimmedAttendance);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses a {@code String classId} into an {@code ClassId}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the given {@code classId} is invalid."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static ClassId parseClassId(String classId) throws ParseException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(classId);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedId \u003d classId.trim();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!ClassId.isValidClassId(trimmedId)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(ClassId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new ClassId(trimmedId);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses a {@code String participation} into an {@code Participation}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the given {@code participation} is invalid."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static Participation parseParticipation(String participation) throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(participation);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedParticipation \u003d participation.trim();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Participation.isValidParticipation(trimmedParticipation)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(Participation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Participation(trimmedParticipation);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses a {@code String taskTime} into a {@code TaskTime}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws ParseException if the given {@code taskTime} is invalid."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static TaskTime parseTaskTime(String taskTime) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(taskTime);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String trimmedTaskTime \u003d taskTime.trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!TaskTime.isValidTaskTime(trimmedTaskTime)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new TaskTime(trimmedTaskTime);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e taskTimes} into a {@code Set\u003cTaskTime\u003e}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static TreeSet\u003cTaskTime\u003e parseTaskTimes(Collection\u003cString\u003e taskTimes) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(taskTimes);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        final TreeSet\u003cTaskTime\u003e taskTimeList \u003d new TreeSet\u003c\u003e(TaskTime::compareTo);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        for (String taskTime : taskTimes) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            taskTimeList.add(parseTaskTime(taskTime));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return taskTimeList;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses a {@code String marking} into a {@code Marking}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws ParseException if the given {@code marking} is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static Marking parseMarking(String marking) throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(marking);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String trimmedMarking \u003d marking.trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!Marking.isValidMark(trimmedMarking)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new ParseException(Marking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new Marking(trimmedMarking);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses a {@code String amount} into an {@code Amount}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Date.isValidDateNum(trimmedDate)) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Parses a {@code String reminderDescription} into a {@code ReminderDescription}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static ReminderDescription parseReminderDescription(String reminderDescription) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(reminderDescription);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String trimmedReminderDescription \u003d reminderDescription.trim();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return new ReminderDescription(trimmedReminderDescription);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Parses a {@code String reminderTime} into a {@code ReminderTime}."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @throws ParseException if the given {@code taskTime} is invalid."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static ReminderTime parseReminderTime(String reminderTime) throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(reminderTime);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String trimmedReminderTime \u003d reminderTime.trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!ReminderTime.isValidReminderTime(trimmedReminderTime)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new ParseException(ReminderTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return new ReminderTime(trimmedReminderTime);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e reminderTimes} into a {@code Set\u003cReminderTime\u003e}."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static TreeSet\u003cReminderTime\u003e parseReminderTimes(Collection\u003cString\u003e reminderTimes) throws ParseException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(reminderTimes);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        final TreeSet\u003cReminderTime\u003e reminderTimeList \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (String reminderTime : reminderTimes) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            reminderTimeList.add(parseReminderTime(reminderTime));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return reminderTimeList;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses a {@code String username} into an {@code Username}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the given {@code username} is invalid."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Username.isValidUsername(trimmedUsername)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Parses a {@code String code} into an {@code ModuleCode}."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @param code String of module code."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @return ModuleCode."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static ModuleCode parseModuleCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        String trimmedCode \u003d code.trim();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedCode)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new ModuleCode(trimmedCode);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Parses a {@code String content} into an {@code Content}."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @param content String of content."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @return Content."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses a {@code String type} into an {@code Type}."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param type String of type."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Type."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static Type parseType(String type) throws ParseException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Type.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Type(trimmedType);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses a {@code String claim} into an {@code Claim}."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param claim String of claim."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Claim."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the given {@code claim} is invalid."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static Claim parseClaim(String claim) throws ParseException {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(claim);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String trimmedClaim \u003d claim.trim();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Claim.isValidClaim(trimmedClaim)) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(Claim.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Claim(trimmedClaim);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Helps fill command list with all the basic in built commands."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param commandList A {@code TreeMap} that is used to store all commands and their actions."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static void fillBasicCommands(TreeMap\u003cString, String\u003e commandList) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(AddCommand.COMMAND_WORD, AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(EditCommand.COMMAND_WORD, EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ClearCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(DeleteCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ListCommand.COMMAND_WORD, ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(FindCommand.COMMAND_WORD, FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(HelpCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ExitCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(AddEarningsCommand.COMMAND_WORD, AddEarningsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(DeleteCustomCommand.COMMAND_WORD, DeleteCustomCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(AddTaskCommand.COMMAND_WORD, AddTaskCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(DeleteEarningsCommand.COMMAND_WORD, DeleteEarningsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(UpdateEarningsCommand.COMMAND_WORD, UpdateEarningsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(FindEarningsCommand.COMMAND_WORD, FindEarningsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(DeleteTaskCommand.COMMAND_WORD, DeleteTaskCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ListTasksCommand.COMMAND_WORD, ListTasksCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ChangeTabCommand.COMMAND_WORD, ChangeTabCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(AddReminderCommand.COMMAND_WORD, AddReminderCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(DeleteReminderCommand.COMMAND_WORD, DeleteReminderCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ListTasksBasedOnDateCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ListTasksBasedOnDateCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(AddNotesCommand.COMMAND_WORD, AddNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(DeleteNotesCommand.COMMAND_WORD, DeleteNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(EditNotesCommand.COMMAND_WORD, EditNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(FindNotesCommand.COMMAND_WORD, FindNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ListNotesCommand.COMMAND_WORD, ListNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(EditTaskCommand.COMMAND_WORD, EditTaskCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(FindTaskCommand.COMMAND_WORD, FindTaskCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(LoginCommand.COMMAND_WORD, LoginCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(LogoutCommand.COMMAND_WORD, LogoutCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(TotalEarningsCommand.COMMAND_WORD, TotalEarningsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(ListClassCommand.COMMAND_WORD, ListClassCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(AssignClassCommand.COMMAND_WORD, AssignClassCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(MarkAttendanceCommand.COMMAND_WORD, MarkAttendanceCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(MarkParticipationCommand.COMMAND_WORD, MarkParticipationCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandList.put(SetPictureCommand.COMMAND_WORD, SetPictureCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        commandList.put(ClaimEarningsCommand.COMMAND_WORD, ClaimEarningsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        commandList.put(UndoCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        commandList.put(RedoCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 140,
      "TeoShyanJie": 30,
      "Xuerneas": 37,
      "caesarpjz": 97,
      "kerwin97": 41,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RegisterAccountCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.RegisterAccountCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new RegisterAccountCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class RegisterAccountCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * in the context of the AddEarningsCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns an AddEarningsCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public RegisterAccountCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    RegisterAccountCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Account account \u003d new Account(username, password);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new RegisterAccountCommand(account);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetPictureCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.SetPictureCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Parses input arguments and creates a new SetPictureCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class SetPictureCommandParser implements Parser\u003cSetPictureCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetPictureCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * and returns an SetPictureCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or if the file does"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * not exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public SetPictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PICTURE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    SetPictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PICTURE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Picture pictureToSet \u003d ParserUtil.parsePicture(argMultimap.getValue(PREFIX_PICTURE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            File imageTest \u003d new File(argMultimap.getValue(PREFIX_PICTURE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (!imageTest.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"Make sure the picture exists \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    + \"and is in the same directory as TutorAid!\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            editPersonDescriptor.setPicture(pictureToSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new ParseException(SetPictureCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new SetPictureCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TutorAidParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AddEarningsCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AssignClassCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.CancelCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.ChangeTabCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.ClaimEarningsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.DeleteCustomCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.DeleteEarningsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.FindEarningsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ListClassCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkParticipationCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.RegisterAccountCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.SetPictureCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.TotalEarningsCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.AddTaskCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.DeleteTaskCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.EditTaskCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.FindTaskCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.ListTasksBasedOnDateCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.ListTasksCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.AddNotesCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNotesCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.EditNotesCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.FindNotesCommand;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.ListNotesCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.reminder.AddReminderCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.logic.commands.reminder.DeleteReminderCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TutorAidParser {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static TreeMap\u003cString, String\u003e commandList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAidParser(ObservableList\u003cCommandObject\u003e commands) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAidParser.commandList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        initialiseBasicCommands();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.size(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            TutorAidParser.commandList.put(commands.get(i).getCommandWord().word,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    commands.get(i).getCommandAction().action);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAidParser() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAidParser.commandList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        initialiseBasicCommands();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static TreeMap\u003cString, String\u003e getCommandList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return TutorAidParser.commandList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Used to map basic commands to {@code TreeMap} when the TutorAidParser object is initialised."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private void initialiseBasicCommands() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ParserUtil.fillBasicCommands(TutorAidParser.commandList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Used to check if the command a user wants to map an unknown command to exists."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns a {@code NewCommand} if the command exists or an {@code UnknownCommand} if it does not."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Command checkCommand(String userInput, String prevUnknownCommand) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (trimmedInput.equals(CancelCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return new CancelCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (TutorAidParser.commandList.containsKey(trimmedInput)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                TutorAidParser.commandList.put(prevUnknownCommand, TutorAidParser.commandList.get(trimmedInput));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new NewCommand(TutorAidParser.commandList.get(trimmedInput), prevUnknownCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                return new UnknownCommand(trimmedInput);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (commandList.containsKey(commandWord)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            switch (commandList.get(commandWord)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                TutorAidParser.commandList.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                initialiseBasicCommands();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    return new ListCommand();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case AddEarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new AddEarningsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            case DeleteCustomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                return new DeleteCustomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case ChangeTabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new ChangeTabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case ListTasksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    return new ListTasksCommand();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case UpdateEarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new UpdateEarningsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case RegisterAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new RegisterAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case DeleteEarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new DeleteEarningsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case ClaimEarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new ClaimEarningsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case FindTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new FindTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case FindEarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new FindEarningsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            case AddReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                return new AddReminderParser().parse(arguments);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            case DeleteReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                return new DeleteReminderParser().parse(arguments);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case ListTasksBasedOnDateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new ListTasksBasedOnDateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            case AddNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                return new AddNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return new LogoutCommand();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            case DeleteNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                return new DeleteNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            case EditNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                return new EditNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            case FindNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                return new FindNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            case ListNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    return new ListNotesCommand();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            case TotalEarningsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    return new TotalEarningsCommand();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            case ListClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                return new ListClassCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            case AssignClassCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                return new AssignClassCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            case MarkAttendanceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                return new MarkAttendanceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            case MarkParticipationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                return new MarkParticipationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            case SetPictureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                return new SetPictureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return new UnknownCommand(commandWord);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses user input into command for execution"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * before user logs in."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Command parseCommandWithoutLoggingIn(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case RegisterAccountCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new RegisterAccountCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 82,
      "TeoShyanJie": 18,
      "Xuerneas": 62,
      "caesarpjz": 75,
      "kerwin97": 8,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateEarningsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand.EditEarningsDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Parses input arguments and creates a new UpdateEarningsCommandParser object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UpdateEarningsCommandParser implements Parser\u003cUpdateEarningsCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_CLASSID, PREFIX_AMOUNT, PREFIX_TYPE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    UpdateEarningsCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor editEarningsDescriptor \u003d new EditEarningsDescriptor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            editEarningsDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CLASSID).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            editEarningsDescriptor.setClassId(ParserUtil.parseClassId(argMultimap.getValue(PREFIX_CLASSID).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String amt \u003d argMultimap.getValue(PREFIX_AMOUNT).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Amount amount \u003d ParserUtil.parseAmount(amt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            editEarningsDescriptor.setAmount(amount);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (Amount.moreThanMaxValue(amt)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Earnings.replacePreviousEarnings(index, amount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            editEarningsDescriptor.setType(ParserUtil.parseType(argMultimap.getValue(PREFIX_TYPE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!editEarningsDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new ParseException(UpdateEarningsCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new UpdateEarningsCommand(index, editEarningsDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AccountBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.authentication.Authentication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Wraps all data at the account-book level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Duplicates are not allowed (by .isSameAccount comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AccountBook {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final List\u003cAccount\u003e listOfAccounts;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AccountBook() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfAccounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if an account with the same identity as {@code account} exists in the account book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean hasAccount(Account acc) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(acc);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return listOfAccounts.contains(acc);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addAccount(Account a) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        listOfAccounts.add(a);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public List\u003cAccount\u003e getList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return listOfAccounts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks if username exists."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean hasUsername(Username userName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(userName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // need to put in lowercase?????"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (Account acc : listOfAccounts) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Username name \u003d userName.lowerCase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (acc.getUsername().equals(name)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Checks if the login details are correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param user Username of the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param pass Password of the user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @return Returns a boolean to see if the user can login successfully or not."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean sameCredentials(Username user, String pass) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(user, pass);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Authentication authenticator \u003d new Authentication();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (Account acc : listOfAccounts) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (acc.getUsername().equals(user) \u0026\u0026 authenticator.authenticate(pass.toCharArray(), acc.getPassword())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof AccountBook // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 listOfAccounts.equals(((AccountBook) other).listOfAccounts));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return listOfAccounts.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    Predicate\u003cEarnings\u003e PREDICATE_SHOW_ALL_EARNINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    Predicate\u003cCommandObject\u003e PREDICATE_SHOW_ALL_COMMANDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    Predicate\u003cReminder\u003e PREDICATE_SHOW_ALL_REMINDERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    Predicate\u003cNotes\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Path getTutorAidFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void setTutorAidFilePath(Path tutorAidFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Replaces address book data with the data in {@code tutorAid}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void setVersionedTutorAid(ReadOnlyTutorAid tutorAid);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /** Returns the TutorAid */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    ReadOnlyTutorAid getTutorAid();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if a command with the same identity as {@code command} exists in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    boolean hasCommand(CommandObject command);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Deletes the given command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The command must exist in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    void deleteCommand(CommandObject target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Adds the given command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code command} must not already exist in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    void addCommand(CommandObject command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Replaces the given command {@code target} with {@code editedCommands}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The command identity of {@code editedCommands} must not be the same as"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * another existing command in the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    void setCommands(CommandObject target, CommandObject editedCommands);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered command list */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    ObservableList\u003cCommandObject\u003e getFilteredCommandsList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Updates the filter of the filtered command list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    void updateFilteredCommandsList(Predicate\u003cCommandObject\u003e predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Adds the given earnings."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code earnings} must not already exist in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void addEarnings(Earnings earnings);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    void deleteEarnings(Earnings earnings);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    boolean hasEarnings(Earnings earnings);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void setEarnings(Earnings target, Earnings editedEarnings);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    ObservableList\u003cEarnings\u003e getFilteredEarningsList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /** Returns an unmodifiable view of the filtered notes list */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilteredNotesList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void updateFilteredEarningsList(Predicate\u003cEarnings\u003e predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    void updateFilteredCalendarList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    boolean userHasLoggedIn();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void isLoggedIn();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void isLoggedOut();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    void saveCommand(String command);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    String getSavedCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code task} must not already exist in the address book."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the address book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Updates the filter of the filtered reminder list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Adds the given reminder."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code reminder} must not already exist in the address book."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Deletes the given reminder."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code reminder} must not already exist in the address book."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    void deleteReminder(Reminder reminder);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    void setReminder(Reminder reminder, Reminder editedReminder);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    boolean hasNotes(Notes note);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    void addNotes(Notes note);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    void deleteNotes(Notes target);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Replaces the given notes {@code target} with {@code editedNote}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the address book."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    void setNotes(Notes target, Notes editedNote);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    boolean canUndoTutorAid();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    boolean canRedoTutorAid();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void undoTutorAid();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void redoTutorAid();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void commitTutorAid();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 42,
      "TeoShyanJie": 22,
      "Xuerneas": 67,
      "caesarpjz": 36,
      "kerwin97": 37,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean loggedIn \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final VersionedTutorAid versionedTutorAid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Account account;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final FilteredList\u003cEarnings\u003e filteredEarnings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final FilteredList\u003cCommandObject\u003e filteredCommands;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Stack\u003cString\u003e savedCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final FilteredList\u003cReminder\u003e filteredReminder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final FilteredList\u003cNotes\u003e filteredNotes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Initializes a ModelManager with the given versionedTutorAid and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ModelManager(ReadOnlyTutorAid versionedTutorAid, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireAllNonNull(versionedTutorAid, userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + versionedTutorAid + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.versionedTutorAid \u003d new VersionedTutorAid(versionedTutorAid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.versionedTutorAid.getPersonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        filteredEarnings \u003d new FilteredList\u003c\u003e(this.versionedTutorAid.getEarningsList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        filteredCommands \u003d new FilteredList\u003c\u003e(this.versionedTutorAid.getCommandsList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        savedCommand \u003d new Stack\u003cString\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.versionedTutorAid.getTaskList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        filteredReminder \u003d new FilteredList\u003c\u003e(this.versionedTutorAid.getReminderList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        filteredNotes \u003d new FilteredList\u003c\u003e(this.versionedTutorAid.getNotesList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this(new TutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /*public ModelManager(Account acc) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this(new TutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.account \u003d acc;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ModelManager(ReadOnlyTutorAid versionedTutorAid, ReadOnlyUserPrefs userPrefs, Account acc) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this(versionedTutorAid, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.account \u003d acc;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        loggedIn \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return userPrefs.getTutorAidFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTutorAidFilePath(Path versionedTutorAidFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(versionedTutorAidFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        userPrefs.setTutorAidFilePath(versionedTutorAidFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TutorAid \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setVersionedTutorAid(ReadOnlyTutorAid versionedTutorAid) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.versionedTutorAid.resetData(versionedTutorAid);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.hasPerson(person);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.removePerson(target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.addPerson(person);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean hasEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(earnings);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.hasEarnings(earnings);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.addEarnings(earnings);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        updateFilteredEarningsList(PREDICATE_SHOW_ALL_EARNINGS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings(Earnings target, Earnings editedEarnings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(target, editedEarnings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.setEarnings(target, editedEarnings);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void deleteEarnings(Earnings target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.removeEarnings(target);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean hasCommand(CommandObject command) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireAllNonNull(command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.hasCommand(command);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void deleteCommand(CommandObject target) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.removeCommand(target);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void addCommand(CommandObject command) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.addCommand(command);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        updateFilteredCommandsList(PREDICATE_SHOW_ALL_COMMANDS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommands(CommandObject target, CommandObject editedCommands) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireAllNonNull(target, editedCommands);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.setCommands(target, editedCommands);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void saveCommand(String command) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.savedCommand.push(command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public String getSavedCommand() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return this.savedCommand.peek();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     *  Checks if the task exists in the TutorAid."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.hasTask(task);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.removeTask(target);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.addTask(task);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.setTask(target, editedTask);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code versionedTutorAid}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //UiManager.startStudentProfile();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ObservableList\u003cEarnings\u003e getFilteredEarningsList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return filteredEarnings;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ObservableList\u003cCommandObject\u003e getFilteredCommandsList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return filteredCommands;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return filteredReminder;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return filteredNotes;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void updateFilteredEarningsList(Predicate\u003cEarnings\u003e predicate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        filteredEarnings.setPredicate(predicate);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //UiManager.startEarnings();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void updateFilteredCalendarList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        UiManager.startCalendar();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code versionedTutorAid}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //UiManager.startTasks();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void updateFilteredCommandsList(Predicate\u003cCommandObject\u003e predicate) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        filteredCommands.setPredicate(predicate);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return (versionedTutorAid.equals(other.versionedTutorAid)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Reminder List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     *  Checks if the task exists in the TutorAid."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.hasReminder(reminder);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.addReminder(reminder);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        updateFilteredReminderList(PREDICATE_SHOW_ALL_REMINDERS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void deleteReminder(Reminder target) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.removeReminder(target);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        filteredReminder.setPredicate(predicate);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //UiManager.startReminders();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(Reminder reminder, Reminder editedReminder) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireAllNonNull(reminder, editedReminder);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.setReminder(reminder, editedReminder);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Account getAccount() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return account;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void isLoggedIn() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        loggedIn \u003d true;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void isLoggedOut() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        loggedIn \u003d false;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean userHasLoggedIn() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return loggedIn;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean hasNotes(Notes note) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.hasNotes(note);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.addNotes(notes);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        updateFilteredNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.removeNotes(target);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void setNotes(Notes target, Notes editedNote) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.setNotes(target, editedNote);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        filteredNotes.setPredicate(predicate);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //UiManager.startNotes();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    //Undo/Redo"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean canUndoTutorAid() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.canUndo();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean canRedoTutorAid() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return versionedTutorAid.canRedo();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void undoTutorAid() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.undo();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void redoTutorAid() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.redo();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void commitTutorAid() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        versionedTutorAid.commit();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 48,
      "TeoShyanJie": 29,
      "Xuerneas": 125,
      "caesarpjz": 58,
      "kerwin97": 37,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTutorAid.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public interface ReadOnlyTutorAid {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns an unmodifiable view of the persons, earnings and commands list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * This list will not contain any duplicate persons, earnings or commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    ObservableList\u003cEarnings\u003e getEarningsList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    ObservableList\u003cCommandObject\u003e getCommandsList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns an unmodifiable view of the task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    ObservableList\u003cNotes\u003e getNotesList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 4,
      "TeoShyanJie": 2,
      "Xuerneas": 8,
      "caesarpjz": 2,
      "kerwin97": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Path getTutorAidFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TutorAid.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.UniqueCommandsList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.UniqueEarningsList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.UniqueNotesList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.UniqueReminderList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TutorAid implements ReadOnlyTutorAid {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final UniqueEarningsList earning;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final UniqueCommandsList commands;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final UniqueReminderList reminder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final UniqueNotesList notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earning \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commands \u003d new UniqueCommandsList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminder \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notes \u003d new UniqueNotesList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAid() {}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Creates an TutorAid using the Persons, Earnings and Commands in the {@code toBeCopied}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAid(ReadOnlyTutorAid toBeCopied) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Replaces the contents of the earnings list with {@code earnings}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code earnings} must not contain duplicate earnings."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings(List\u003cEarnings\u003e earnings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.earning.setEarnings(earnings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Replaces the given earnings {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings(Earnings target, Earnings editedEarnings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(editedEarnings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earning.setEarnings(target, editedEarnings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Removes {@code key} from this {@code TutorAid}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Replaces the contents of the commands list with {@code commands}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code commands} must not contain duplicate commands."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommands(List\u003cCommandObject\u003e commands) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commands.setCommands(commands);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Replaces the given commands {@code target} in the list with {@code editedCommands}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The command identity of {@code editedCommands} must not be the same as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * another existing command in the address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommands(CommandObject target, CommandObject editedCommands) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(editedCommands);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commands.setCommands(target, editedCommands);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Resets the existing data of this {@code TutorAid} with {@code newData}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void resetData(ReadOnlyTutorAid newData) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setEarnings(newData.getEarningsList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        setCommands(newData.getCommandsList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        setReminder(newData.getReminderList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        setNotes(newData.getNotesList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Removes {@code key} from this {@code TutorAid}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if a command with the same identity as {@code command} exists in the address book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean hasCommand(CommandObject command) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(command);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return commands.contains(command);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Adds a command to the address book."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The command must not already exist in the address book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void addCommand(CommandObject e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commands.add(e);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Removes {@code key} from this {@code TutorAid}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void removeCommand(CommandObject key) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commands.remove(key);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean hasEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(earnings);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return earning.contains(earnings);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void addEarnings(Earnings e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earning.add(e);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Removes {@code key} from this {@code TutorAid}."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void removeEarnings(Earnings key) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earning.remove(key);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Adds a reminder to the address book."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void addReminder(Reminder r) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminder.add(r);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Removes {@code key} from this {@code TutorAid}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminder.remove(key);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in the address book."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean hasReminder(Reminder reminders) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(reminders);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return reminder.contains(reminders);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the given reminder {@code target} in the list with {@code editedReminder}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The reminder identity of {@code editedReminder} must not be the same as another reminder in the address book."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(Reminder reminders, Reminder editedReminder) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(editedReminder);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminder.setReminder(reminders, editedReminder);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.reminder.setReminder(reminders);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Add note into address book."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @param e notes."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void addNotes(Notes e) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notes.add(e);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns true if a code with the same identity as {@code note} exists in the address book."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @param note Note."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @return true of false if the notes is available."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean hasNotes(Notes note) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return notes.contains(note);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Removes {@code key} from this {@code TutorAid}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void removeNotes(Notes key) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notes.remove(key);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedNote}."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * The note identity of {@code editedNote} must not be the same as another existing note in the address book."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void setNotes(Notes target, Notes editedNote) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(editedNote);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notes.setNotes(target, editedNote);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setNotes(List\u003cNotes\u003e note) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.notes.setNotes(note);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ObservableList\u003cEarnings\u003e getEarningsList() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return earning.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ObservableList\u003cCommandObject\u003e getCommandsList() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return commands.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return reminder.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public ObservableList\u003cNotes\u003e getNotesList() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return notes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof TutorAid // instanceof handles nulls"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 (persons.equals(((TutorAid) other).persons))"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 (tasks.equals(((TutorAid) other).tasks)));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 64,
      "TeoShyanJie": 44,
      "Xuerneas": 72,
      "caesarpjz": 46,
      "kerwin97": 60,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Path tutorAidFilePath \u003d Paths.get(\"data\" , \"tutoraid.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        setTutorAidFilePath(newUserPrefs.getTutorAidFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return tutorAidFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTutorAidFilePath(Path tutorAidFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(tutorAidFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.tutorAidFilePath \u003d tutorAidFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 tutorAidFilePath.equals(o.tutorAidFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return Objects.hash(guiSettings, tutorAidFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + tutorAidFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTutorAid.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * {@code TutorAid} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class VersionedTutorAid extends TutorAid {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final List\u003cReadOnlyTutorAid\u003e tutorAidStateList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public VersionedTutorAid(ReadOnlyTutorAid initialState) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAidStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAidStateList.add(new TutorAid(initialState));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Saves a copy of the current {@code TutorAid} state at the end of the state list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAidStateList.add(new TutorAid(this));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAidStateList.subList(currentStatePointer + 1, tutorAidStateList.size()).clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void undo() throws NoUndoableStateException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        resetData(tutorAidStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void redo() throws NoRedoableStateException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        resetData(tutorAidStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return currentStatePointer \u003c tutorAidStateList.size() - 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!(other instanceof VersionedTutorAid)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        VersionedTutorAid otherVersionedTutorAid \u003d (VersionedTutorAid) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return super.equals(otherVersionedTutorAid)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 tutorAidStateList.equals(otherVersionedTutorAid.tutorAidStateList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTutorAid.currentStatePointer;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            super(\"Current state pointer at start of tutorAidState list, unable to undo.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            super(\"Current state pointer at end of tutorAidState list, unable to redo.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/WindowView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Changes the view of the UI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class WindowView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"WindowView should only contain the destinations \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"that are valid (i.e. calendar or student_profile), and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \"calendar|earnings|student_profile|notepad|reminders|task\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static String tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static int indexNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public WindowView(String tabChange) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(tabChange);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        tab \u003d tabChange;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assignIndex(tabChange);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public WindowView(String tabChange, Integer indexNum) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(tabChange);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(indexNum);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        tab \u003d tabChange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        indexNumber \u003d indexNum;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Integer getIndexNumber() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return indexNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Assigns the index for the relevant tab."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param dest destination of the change tab."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void assignIndex(String dest) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (tab.equals(\"calendar\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            index \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else if (tab.equals(\"earnings\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            index \u003d 2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else if (tab.equals(\"student_profile\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            index \u003d 3;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else if (tab.equals(\"notepad\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            index \u003d 4;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else if (tab.equals(\"reminders\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            index \u003d 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else if (tab.equals(\"task\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            index \u003d 6;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        new WindowView(tab, index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a given string is a valid week number."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidWindowView(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 64,
      "kerwin97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Account.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.authentication.Authentication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a User\u0027s account."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Account {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Account(Username userId, String pass) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(userId, pass);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        username \u003d userId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        password \u003d pass;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String getPassword() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Hashes the password registered by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * the user so that it is encrypted."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void hashPassword() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Authentication authenticator \u003d new Authentication();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.password \u003d authenticator.hash(password.toCharArray());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!(other instanceof Account)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Account otherAccount \u003d (Account) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return otherAccount.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 otherAccount.getPassword().equals(getPassword());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/account/Username.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.account;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a User\u0027s username."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Username should only contain alphanumeric characters \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"with at least 5 characters, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9._-]{5,}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public final String userId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param id A valid username."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Username(String id) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(isValidUsername(id), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userId \u003d id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Username lowerCase() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Username(userId.toLowerCase());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return userId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 userId.equals(((Username) other).userId)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/classid/ClassId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.classid;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a Student\u0027s class ID."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidClassId(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class ClassId {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Class IDs can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs an {@code ClassId}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param classid A valid classId."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ClassId(String classid) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(classid);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        checkArgument(isValidClassId(classid), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        value \u003d classid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if a given string is a valid classId."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static boolean isValidClassId(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof ClassId // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 value.equals(((ClassId) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 16,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commands/CommandAction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents the action a command word should execute."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAction(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class CommandAction {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            \"Not a valid action!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The first character of the action must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public final String action;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs a {@code CommandAction}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param action A valid action."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandAction(String action) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(action);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        checkArgument(isValidAction(action), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if a given string is a valid action."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static boolean isValidAction(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof CommandAction // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 action.equals(((CommandAction) other).action)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return action.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commands/CommandObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a command with its command word and the action which it executes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class CommandObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private CommandWord commandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private CommandAction commandAction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandObject(CommandWord commandWord, CommandAction commandAction) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireAllNonNull(commandWord, commandAction);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandAction \u003d commandAction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandWord getCommandWord() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommandWord(CommandWord commandWord) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandAction getCommandAction() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return commandAction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommandAction(CommandAction commandAction) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandAction \u003d commandAction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if both commands have the same commandAction and commandWord."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * This defines a weaker notion of equality between two CommandObjects."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean isSameCommand(CommandObject otherCommand) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (otherCommand \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return otherCommand !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherCommand.getCommandAction().equals(getCommandAction())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherCommand.getCommandWord().equals(getCommandWord());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if both commands have the same commandAction and commandWord."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * This defines a stronger notion of equality between two CommandObjects."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(other instanceof CommandObject)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandObject otherCommand \u003d (CommandObject) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return otherCommand.getCommandAction().equals(getCommandAction())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherCommand.getCommandWord().equals(getCommandWord());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Objects.hash(commandAction, commandWord);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        builder.append(\" Word: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(getCommandWord())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(\" Action: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(getCommandAction());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commands/CommandWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a command word."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWord(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class CommandWord {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            \"Command word should not be blank!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The first character of the action must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public final String word;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs a {@code CommandWord}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param word A valid command word."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandWord(String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        checkArgument(isValidWord(word), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if a given string is a valid command word."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static boolean isValidWord(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof CommandWord // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 word.equals(((CommandWord) other).word)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return word.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commands/UniqueCommandsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.commandsexceptions.CommandNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.earnings.earningsexception.DuplicateEarningsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.earnings.earningsexception.EarningsNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * A list of CommandObjects that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * An CommandObject is considered unique by comparing using"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * {@code CommandObject#isSameCommand(CommandObject)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * CommandObject uses CommandObject#isSameCommand(CommandObject) for equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * so as to ensure that the CommandObject being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * unique in terms of identity in the UniqueCommandsList. However,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * the removal of a CommandObject uses CommandObjects#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * as to ensure that the earning with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * @see CommandObject#isSameCommand(CommandObject)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class UniqueCommandsList implements Iterable\u003cCommandObject\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final ObservableList\u003cCommandObject\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final ObservableList\u003cCommandObject\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if the list contains an equivalent CommandObject as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean contains(CommandObject toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Adds a CommandObject to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The CommandObject must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void add(CommandObject toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new DuplicateEarningsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Replaces the CommandObject {@code target} in the list with {@code editedCommand}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The CommandObject identity of {@code editCommand} must not be the same as another"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * existing CommandObject in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommands(CommandObject target, CommandObject editedCommand) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireAllNonNull(target, editedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new EarningsNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!target.isSameCommand(editedCommand) \u0026\u0026 contains(editedCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new DuplicateEarningsException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        internalList.set(index, editedCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommands(UniqueCommandsList replacement) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Replaces the contents of this list with {@code commands}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * {@code commands} must not contain duplicate CommandObjects."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setCommands(List\u003cCommandObject\u003e commands) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireAllNonNull(commands);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!commandsAreUnique(commands)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new DuplicateEarningsException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        internalList.setAll(commands);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Removes the equivalent CommandObject from the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * The CommandObject must exist in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void remove(CommandObject toRemove) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new CommandNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ObservableList\u003cCommandObject\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Iterator\u003cCommandObject\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof UniqueCommandsList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCommandsList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if {@code commands} contains only unique CommandObjects."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private boolean commandsAreUnique(List\u003cCommandObject\u003e commands) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c commands.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                if (commands.get(i).isSameCommand(commands.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commands/commandsexceptions/CommandNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.commands.commandsexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Signals that the operation is unable to find the specified command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class CommandNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/Amount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a Tutor\u0027s earnings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Amount numbers should only contain positive numbers with only 2 decimal points,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \" and it must be lesser than 1 000 000.00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d{1,3}(,?\\\\d{3})?(\\\\.\\\\d{2})?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final double MAX_VALUE \u003d 1000000.00;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public final String amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code Amount}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param amt A valid amount."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Amount(String amt) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(amt);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(isValidAmount(amt), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        amount \u003d amt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if amount is more than max value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean moreThanMaxValue(String amount) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        double amt \u003d Double.parseDouble(amount);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return amt \u003e\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Double doubleValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Double.parseDouble(amount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 amount.equals(((Amount) other).amount)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return amount.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/Claim.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a Tutor\u0027s earnings status."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidClaim(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Claim {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Claim should only contain the valid input \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"(i.e. processing/approved/rejected/pending submission), and it should not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"approved|processing|rejected|pending submission\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public final String claimStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code Claim}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param status A valid date number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Claim(String status) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(isValidClaim(status), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        claimStatus \u003d status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a given string is a valid claim."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidClaim(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return claimStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof Claim // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 claimStatus.equals(((Claim) other).claimStatus)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return claimStatus.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/ClassIdContainKeywordPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Tests that a {@code Earnings}\u0027s {@code ClassId} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ClassIdContainKeywordPredicate implements Predicate\u003cEarnings\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ClassIdContainKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean test(Earnings earnings) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsIgnoreCase(earnings.getClassId().value + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + earnings.getAmount().amount + \" \" + earnings.getDate().dateNum"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + \" \" + earnings.getType().type, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof ClassIdContainKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 keywords.equals(((ClassIdContainKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a date of earnings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDateNum(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Date should only contain the date numbers that are valid (i.e. 03/05/2020), and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"|(?:(?:16|[2468][048]|[3579][26])00))))$\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            + \"|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public final String dateNum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param date A valid date number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(isValidDateNum(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dateNum \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a given string is a valid week number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidDateNum(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return dateNum;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 dateNum.equals(((Date) other).dateNum)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return dateNum.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/Earnings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a Tutor\u0027s earnings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Earnings {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static ArrayList\u003cAmount\u003e totalEarnings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final ClassId classId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Type type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Claim claim;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Earnings(Date date, ClassId classId, Amount amount, Type type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(date, classId, amount, type);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.claim \u003d new Claim(\"pending submission\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ClassId getClassId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return classId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Claim getClaim() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return claim;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setClaim(Claim claim) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.claim \u003d claim;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static String getTotalEarnings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        double total \u003d totalEarnings.stream().mapToDouble(Amount::doubleValue).sum();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return String.format(\"%.2f\", total);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void addToTotalEarnings(Amount amt) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        totalEarnings.add(amt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void replacePreviousEarnings(Index index, Amount amt) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        totalEarnings.set(index.getZeroBased(), amt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void deleteEarnings(Index index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        totalEarnings.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if both earnings of the same date and classId have an identity field that is the same."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * This defines a weaker notion of equality between two earnings."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean isSameEarnings(Earnings otherEarnings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (otherEarnings \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return otherEarnings !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 otherEarnings.getDate().equals(getDate())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 otherEarnings.getClassId().equals(getClassId())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 otherEarnings.getType().equals(getType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!(other instanceof Earnings)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings otherEarnings \u003d (Earnings) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return otherEarnings.getDate().equals(getDate())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 otherEarnings.getClassId().equals(getClassId())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 otherEarnings.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 otherEarnings.getType().equals(getType());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return Objects.hash(date, classId, amount);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        builder.append(\" Date: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .append(\" ClassId: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .append(getClassId())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .append(\" Amount: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .append(getAmount());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a Tutor\u0027s Module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Modules should only contain alphanumeric characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public final String moduleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code Module}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param mod A valid module name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Module(String mod) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(mod);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(isValidModuleName(mod), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        moduleName \u003d mod;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidModuleName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof Module // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 moduleName.equals(((Module) other).moduleName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return moduleName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/Type.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a type of earnings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class Type {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \"Types should only contain the registered types of earnings. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"Eg. tutorials(tut)/lab/consultations(c)/sectionals(s)/preparation_time(p)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"tutorials|tut|lab|consultations|c|sectionals|s|preparation_time|p\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public final String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code Type}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param type A valid amount."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Type(String type) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static boolean isValidType(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof Type // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 type.equals(((Type) other).type)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/UniqueEarningsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.earningsexception.DuplicateEarningsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.earningsexception.EarningsNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A list of earnings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * An earnings is considered unique by comparing using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * {@code Earnings#isSameEarnings(Earnings)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * earnings uses Earnings#isSameEarnings(Earnings) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * so as to ensure that the earnings being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * unique in terms of identity in the UniqueEarningsList. However,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * the removal of a person uses Earnings#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * as to ensure that the earning with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * @see Earnings#isSameEarnings(Earnings)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UniqueEarningsList implements Iterable\u003cEarnings\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final ObservableList\u003cEarnings\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final ObservableList\u003cEarnings\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean contains(Earnings toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEarnings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void add(Earnings toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DuplicateEarningsException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings(Earnings target, Earnings editedEarnings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(target, editedEarnings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new EarningsNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!target.isSameEarnings(editedEarnings) \u0026\u0026 contains(editedEarnings)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DuplicateEarningsException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        internalList.set(index, editedEarnings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings(UniqueEarningsList replacement) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings(List\u003cEarnings\u003e earnings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireAllNonNull(earnings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!earningsAreUnique(earnings)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DuplicateEarningsException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        internalList.setAll(earnings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void remove(Earnings toRemove) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new EarningsNotFoundException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public ObservableList\u003cEarnings\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Iterator\u003cEarnings\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                || (other instanceof UniqueEarningsList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEarningsList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private boolean earningsAreUnique(List\u003cEarnings\u003e earnings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (int i \u003d 0; i \u003c earnings.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            for (int j \u003d i + 1; j \u003c earnings.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                if (earnings.get(i).isSameEarnings(earnings.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/earningsexception/DuplicateEarningsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings.earningsexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Signals that the operation will result in duplicate Earnings"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * (Earnings are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * classId, date, amount and type)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DuplicateEarningsException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public DuplicateEarningsException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(\"Operation would result in duplicate earnings\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/earnings/earningsexception/EarningsNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings.earningsexception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class EarningsNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Content.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Content of the note"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            \"Content should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 content.equals(((Content) other).content)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/ModuleCode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * To get the module code of the module"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            \"Modules Codes should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @param module A valid module code."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public ModuleCode(String module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        checkArgument(isValidModuleCode(module), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.moduleCode \u003d module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((ModuleCode) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Notes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Note Class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class Notes {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private ClassId code;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public Notes(ClassId code, Content content) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public Content getContent() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void setContent(Content content) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public ClassId getCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void setCode(ClassId code) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean isSameNote(Notes otherNotes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (otherNotes \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return otherNotes !\u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 otherNotes.getCode().equals(getCode())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 (otherNotes.getContent().equals(getContent()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!(other instanceof Notes)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Notes otherNotes \u003d (Notes) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return otherNotes.getCode().equals(getCode())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 otherNotes.getContent().equals(getContent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return Objects.hash(code, content);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        builder.append(\" Module Code: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                .append(getCode())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                .append(\" Note: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                .append(getContent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NotesContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Tests that a {@code Notes}\u0027s {@code ModuleCode} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class NotesContainsKeywordsPredicate implements Predicate\u003cNotes\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public NotesContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean test(Notes note) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(note.getCode().value + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                        + note.getContent().content, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                || (other instanceof NotesContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 keywords.equals(((NotesContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/UniqueNotesList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.exceptions.DuplicateNotesExceptions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.exceptions.NotesNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * A list of notes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * A note is considered unique by comparing using {@code Note#isSameNote(Note)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * notes uses Note#isSameNote(Note) for equality so as to ensure that the note being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * unique in terms of identity in the UniqueNotesList. However, the removal of a person uses Note#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * as to ensure that the note with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class UniqueNotesList implements Iterable\u003cNotes\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final ObservableList\u003cNotes\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final ObservableList\u003cNotes\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean contains(Notes toCheck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameNote);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void add(Notes toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new DuplicateNotesExceptions();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void remove(Notes toRemove) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new NotesNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void setNotes(Notes target, Notes editedNote) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireAllNonNull(target, editedNote);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new NotesNotFoundException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!target.isSameNote(editedNote) \u0026\u0026 contains(editedNote)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new DuplicateNotesExceptions();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        internalList.set(index, editedNote);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void setNotes(UniqueNotesList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public void setNotes(List\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        requireAllNonNull(notes);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!notesAreUnique(notes)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new DuplicateNotesExceptions();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        internalList.setAll(notes);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public ObservableList\u003cNotes\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public Iterator\u003cNotes\u003e iterator() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                || (other instanceof UniqueNotesList // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueNotesList) other).internalList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private boolean notesAreUnique(List\u003cNotes\u003e notes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            for (int j \u003d i + 1; j \u003c notes.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                if (notes.get(i).isSameNote(notes.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/DuplicateNotesExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Signals that the operation will result in duplicate Notes (Notess are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class DuplicateNotesExceptions extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public DuplicateNotesExceptions() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        super(\"Operation would result in duplicate notes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/exceptions/NotesNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.model.note.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Signals that the operation is unable to find the specified notes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class NotesNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Attendance.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a Person\u0027s attendance in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAttendance(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class Attendance {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Attendance should be a number\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs an {@code Attendance}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param attendance A valid attendance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Attendance(String attendance) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(attendance);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        checkArgument(isValidAttendance(attendance), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        value \u003d attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns if a given string is a valid attendance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static boolean isValidAttendance(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof Attendance // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 value.equals(((Attendance) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/CalendarReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Represents a Reminder in the calendar."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class CalendarReminder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ClassIdContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code ClassId} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class ClassIdContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ClassIdContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getClassId().value , keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof ClassIdContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 keywords.equals(((ClassIdContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Participation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a Person\u0027s participation in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidParticipation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class Participation {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            \"Participation should only contain numbers\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs a {@code Participation}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param participation A valid participation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Participation(String participation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(participation);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        checkArgument(isValidParticipation(participation), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        value \u003d participation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns true if a given string is a valid participation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static boolean isValidParticipation(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof Participation // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 value.equals(((Participation) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 15,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a Student in the class of the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final Picture picture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private ClassId classId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Result result;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Participation participation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Person(Name name, ClassId classId) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireAllNonNull(name, classId);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.picture \u003d new Picture(\"null\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.attendance \u003d new Attendance(\"0\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.result \u003d new Result(\"0\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.participation \u003d new Participation(\"0\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Person(Name name, Picture picture, ClassId classId, Attendance attendance,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                  Result result, Participation participation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireAllNonNull(name, picture);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.picture \u003d picture;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public ClassId getClassId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return classId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Picture getPicture() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return picture;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Attendance getAttendance() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return attendance;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Result getResult() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Participation getParticipation() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return participation;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setClassId(String value) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        classId \u003d new ClassId(value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setAttendance(int value) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        attendance \u003d new Attendance(Integer.toString(value));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setResult(String value) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        result \u003d new Result(value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void setParticipation(String value) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        participation \u003d new Participation(value);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 (otherPerson.getClassId().equals(getClassId()) || otherPerson.getPicture().equals(getPicture()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherPerson.getClassId().equals(getClassId())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherPerson.getPicture().equals(getPicture())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherPerson.getAttendance().equals(getAttendance())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherPerson.getParticipation().equals(getParticipation())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 otherPerson.getResult().equals(getResult());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return Objects.hash(name, picture, classId);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(\" Class: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(getClassId())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(\" Attendance: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(getAttendance())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(\" Result: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(getResult())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(\" Class Participation: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(getParticipation());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 66,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Picture.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a Person\u0027s picture in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPicture(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class Picture {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Picture should be in .jpg/.png/.gif/.bmp format and be in the \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            + \"same directory as TutorAid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([^\\\\s]+(\\\\.(?i)(jpg|png|gif|bmp))$)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs an {@code Picture}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param picture A valid picture."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Picture(String picture) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(picture);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(\"null\".equals(picture))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            checkArgument(isValidPicture(picture), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        value \u003d picture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns if a given string is a valid picture."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static boolean isValidPicture(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof Picture // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 value.equals(((Picture) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Result.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Represents a Person\u0027s result in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidResult(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class Result {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Result should be a number\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs an {@code Result}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @param result A valid result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public Result(String result) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        requireNonNull(result);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        checkArgument(isValidResult(result), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (Integer.parseInt(result) \u003e 100) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            //throw exception here"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        value \u003d result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns if a given string is a valid result."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static boolean isValidResult(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                || (other instanceof Result // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \u0026\u0026 value.equals(((Result) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                if (persons.get(i).equals(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 2,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Represents a Reminder in the calendar."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final ReminderDescription reminderDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final TreeSet\u003cReminderTime\u003e reminderTimeSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public Reminder(ReminderDescription reminderDescription, TreeSet\u003cReminderTime\u003e reminderTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireAllNonNull(reminderDescription);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.reminderDescription \u003d reminderDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderTimeSet.addAll(reminderTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderDescription getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return reminderDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public TreeSet\u003cReminderTime\u003e getTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return reminderTimeSet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if both tasks has the same description."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean isSameReminder(Reminder otherReminder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return otherReminder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 otherReminder.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return otherReminder.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 otherReminder.getTime().equals(getTime());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return Objects.hash(reminderDescription, reminderTimeSet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        builder.append(\" Description: \")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                .append(getTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReminderDescription.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Represents a Task\u0027s description in the calendar."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderDescription {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public final String fullReminderDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Constructs a {@code ReminderDescription}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @param reminderDescription A valid description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderDescription(String reminderDescription) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(reminderDescription);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        fullReminderDescription \u003d reminderDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return fullReminderDescription + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                || (other instanceof ReminderDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 fullReminderDescription.equals(((ReminderDescription) other).fullReminderDescription)); // state"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return fullReminderDescription.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * This whole class is NOT NEEDED"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * @see Reminder#isSameReminder(Reminder)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedReminder) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireAllNonNull(target, editedReminder);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!target.isSameReminder(editedReminder) \u0026\u0026 contains(editedReminder)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.set(index, editedReminder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(ReminderList replacement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void remove(Reminder toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                || (other instanceof ReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 internalList.equals(((ReminderList) other).internalList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if {@code persons} contains only unique tasks."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                if (reminders.get(i).isSameReminder(reminders.get(j))) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/ReminderTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Represents a Task\u0027s time in the calendar."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTaskTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderTime implements Comparable\u003cReminderTime\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \"ReminderTime should only contain a staring time and an ending time, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    + \"with format: dd/MM/yyyy HH:mm, dd/MM/yyyy HH:mm, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    + \"with the ending time after the starting time.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public final String fullTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final String starting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final String ending;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderTime(String reminderTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireAllNonNull(reminderTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String[] twoTime \u003d reminderTime.split(\", \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        checkArgument(isValidReminderTime(reminderTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String startingTime \u003d twoTime[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String endingTime \u003d twoTime[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        starting \u003d startingTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        ending \u003d endingTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        fullTime \u003d starting + \", \" + ending;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if a given string is a valid task time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static boolean isValidReminderTime(String reminderTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Date dateStart;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Date dateEnd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String[] twoTime \u003d reminderTime.split(\", \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String startingTime \u003d twoTime[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        String endingTime \u003d twoTime[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            dateStart \u003d simpleDateFormat.parse(startingTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            dateEnd \u003d simpleDateFormat.parse(endingTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            if (dateStart.compareTo(dateEnd) \u003e\u003d 0"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    || !startingTime.equals(simpleDateFormat.format(dateStart))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    || !endingTime.equals(simpleDateFormat.format(dateEnd))) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                dateStart \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return dateStart !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean hasTimeConflict(TaskTime otherTaskTime) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Date thisStarting \u003d convertToDate(starting);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Date thisEnding \u003d convertToDate(ending);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Date otherStarting \u003d convertToDate(otherTaskTime.starting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Date otherEnding \u003d convertToDate(otherTaskTime.ending);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (thisStarting.compareTo(otherEnding) \u003e\u003d 0 || thisEnding.compareTo(otherStarting) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static Date convertToDate(String time) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return simpleDateFormat.parse(time);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return \"Starting:\" + starting + \" ,Ending:\" + ending;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                || (other instanceof ReminderTime // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 starting.equals(((ReminderTime) other).starting)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 ending.equals(((ReminderTime) other).ending)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public int compareTo(ReminderTime o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            Date thisStarting \u003d simpleDateFormat.parse(starting);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            Date otherStarting \u003d simpleDateFormat.parse(o.starting);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return thisStarting.compareTo(otherStarting);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/UniqueReminderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.exceptions.DuplicateReminderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * A list of earnings that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * An earnings is considered unique by comparing using"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * {@code Earnings#isSameEarnings(Earnings)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * earnings uses Earnings#isSameEarnings(Earnings) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * so as to ensure that the earnings being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * unique in terms of identity in the UniqueEarningsList. However,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * the removal of a person uses Earnings#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * as to ensure that the earning with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * @see Reminder#isSameReminder(Reminder)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class UniqueReminderList implements Iterable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final ObservableList\u003cReminder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean contains(Reminder toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameReminder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void add(Reminder toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(Reminder target, Reminder editedEarnings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throws ReminderNotFoundException, DuplicateReminderException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireAllNonNull(target, editedEarnings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!target.isSameReminder(editedEarnings) \u0026\u0026 contains(editedEarnings)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.set(index, editedEarnings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(UniqueReminderList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setReminder(List\u003cReminder\u003e reminders) throws DuplicateReminderException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireAllNonNull(reminders);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!remindersAreUnique(reminders)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new DuplicateReminderException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        internalList.setAll(reminders);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void remove(Reminder toRemove) throws ReminderNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ObservableList\u003cReminder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public Iterator\u003cReminder\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                || (other instanceof UniqueReminderList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueReminderList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private boolean remindersAreUnique(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (int i \u003d 0; i \u003c reminders.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c reminders.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                if (reminders.get(i).isSameReminder(reminders.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/DuplicateReminderException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Signals that the operation will result in duplicate Reminders"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * (Reminders are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * description and time)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class DuplicateReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public DuplicateReminderException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        super(\"Operation would result in duplicate earnings\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/reminder/exceptions/ReminderNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.model.reminder.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Signals that the operation is unable to find the specified Reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Marking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Represents a Task\u0027s marking status in the calendar."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class Marking {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \"Marks should only be \u0027Y\u0027 or \u0027N\u0027\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private boolean isMarked;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Marking(String marking) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(marking);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        checkArgument(isValidMark(marking), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (marking.equals(\"Y\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            isMarked \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } else if (marking.equals(\"N\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            isMarked \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        setStatus();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private void setStatus() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (isMarked) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            status \u003d \"Y\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            status \u003d \"N\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if a given string is a valid mark."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static boolean isValidMark(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return test.equals(\"Y\") || test.equals(\"N\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (isMarked) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return \"Y\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return \"N\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof Marking // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 ((Marking) other).isMarked \u003d\u003d this.isMarked); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Represents a Task in the calendar."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final ClassId classId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TreeSet\u003cTaskTime\u003e taskTimeSet \u003d new TreeSet\u003c\u003e(TaskTime::compareTo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Marking marking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Task(ClassId id, TreeSet\u003cTaskTime\u003e taskTimes, Marking mark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireAllNonNull(id, taskTimes, mark);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        classId \u003d id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskTimeSet.addAll(taskTimes);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        marking \u003d mark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ClassId getClassId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return classId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TreeSet\u003cTaskTime\u003e getTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return taskTimeSet;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Marking getMarking() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return marking;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if both tasks has the same description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 otherTask.getClassId().equals(getClassId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task otherPerson \u003d (Task) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return otherPerson.getClassId().equals(getClassId())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 otherPerson.getTime().equals(getTime())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 otherPerson.getMarking().equals(getMarking());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return Objects.hash(classId, taskTimeSet, marking);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        builder.append(\" Description: \")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .append(getClassId())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .append(\" \\nTime: \")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .append(getTime() + \"\\n\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .append(getMarking());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskContainsDatePredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Tests that a {@code Task} matches the date given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskContainsDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskContainsDatePredicate(String date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return //task.getTime().stream().forEach(taskTime -\u003e date.matches(taskTime.fullTime));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                task.getTime().stream().anyMatch(taskTime -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(taskTime.fullTime,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                                this.date));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof TaskContainsDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 date.equals(((TaskContainsDatePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Tests that a {@code Task} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getClassId().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof TaskContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 keywords.equals(((TaskContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * unique in terms of identity in the TaskList. However, the removal of a task uses Task#equals(object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks(TaskList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 internalList.equals(((TaskList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if {@code persons} contains only unique tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Represents a Task\u0027s time in the calendar."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTaskTime(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskTime implements Comparable\u003cTaskTime\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \"TaskTime should only contain a staring time and an ending time, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    + \"with format: dd/MM/yyyy HH:mm, dd/MM/yyyy HH:mm, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    + \"with the ending time after the starting time.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public final String fullTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final String starting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final String ending;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskTime(String taskTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireAllNonNull(taskTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String[] twoTime \u003d taskTime.split(\", \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        checkArgument(isValidTaskTime(taskTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String startingTime \u003d twoTime[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String endingTime \u003d twoTime[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        starting \u003d startingTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ending \u003d endingTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        fullTime \u003d starting + \", \" + ending;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns true if a given string is a valid task time."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static boolean isValidTaskTime(String taskTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Date dateStart;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Date dateEnd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            String[] twoTime \u003d taskTime.split(\", \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            String startingTime \u003d twoTime[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            String endingTime \u003d twoTime[1];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            dateStart \u003d simpleDateFormat.parse(startingTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            dateEnd \u003d simpleDateFormat.parse(endingTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (dateStart.compareTo(dateEnd) \u003e\u003d 0"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    || !startingTime.equals(simpleDateFormat.format(dateStart))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    || !endingTime.equals(simpleDateFormat.format(dateEnd))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                dateStart \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } catch (IndexOutOfBoundsException | ParseException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return dateStart !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean hasTimeConflict(TaskTime otherTaskTime) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Date thisStarting \u003d convertToDate(starting);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Date thisEnding \u003d convertToDate(ending);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Date otherStarting \u003d convertToDate(otherTaskTime.starting);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Date otherEnding \u003d convertToDate(otherTaskTime.ending);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (thisStarting.compareTo(otherEnding) \u003e\u003d 0 || thisEnding.compareTo(otherStarting) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static Date convertToDate(String time) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return simpleDateFormat.parse(time);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return \"Starting:\" + starting + \" ,Ending:\" + ending;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                || (other instanceof TaskTime // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 starting.equals(((TaskTime) other).starting)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 ending.equals(((TaskTime) other).ending)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public int compareTo(TaskTime o) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            Date thisStarting \u003d simpleDateFormat.parse(starting);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            Date otherStarting \u003d simpleDateFormat.parse(o.starting);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return thisStarting.compareTo(otherStarting);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * description)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Contains utility methods for populating {@code TutorAid} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new ClassId(\"CS1231\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new ClassId(\"CS2100\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static ReadOnlyTutorAid getSampleTutorAid() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid sampleAb \u003d new TutorAid();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static TreeSet\u003cTaskTime\u003e getTaskTimeSet(String... strings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Set\u003cTaskTime\u003e taskTimes \u003d Arrays.stream(strings)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .map(TaskTime::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new TreeSet\u003c\u003e(taskTimes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 4,
      "Xuerneas": 12,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AccountStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.AccountBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Represents a storage for {@link seedu.address.model.account.Account}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public interface AccountStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    Path getAccountBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns TutorAid data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    Optional\u003cAccountBook\u003e getAccountsList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    Optional\u003cAccountBook\u003e getAccountsList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param account cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void saveAccount(Account account) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void saveAccount(Account account, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 1,
      "caesarpjz": 10,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAccountStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.AccountBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A class to access AccountBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class JsonAccountStorage implements AccountStorage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAccountStorage.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final Path accountBookFilePath \u003d Paths.get(\"data\", \"accountslist.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static File dataFolder \u003d new File(\"data\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static File file \u003d new File(\"data/accountslist.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonAccountStorage() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.filePath \u003d accountBookFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonAccountStorage(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Path getAccountBookFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Optional\u003cAccountBook\u003e getAccountsList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return getAccountsList(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Optional\u003cAccountBook\u003e getAccountsList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        dataFolder.mkdir();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (file.createNewFile()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.info(\"New File created.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            writer.write(\"{\\\"accounts\\\" : [] }\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.info(\"Checking with file.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Optional\u003cJsonSerializableAccountBook\u003e jsonAccount \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                filePath, JsonSerializableAccountBook.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!jsonAccount.isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new FileNotFoundException(\"No accounts registered. Please register first!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return Optional.of(jsonAccount.get().toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void saveAccount(Account account) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        saveAccount(account, filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void saveAccount(Account account, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(account);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            AccountBook acctBook \u003d getAccountsList().get();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            acctBook.addAccount(account);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableAccountBook(acctBook), filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            //throw new DataConversionException(e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Jackson-friendly version of {@link Account}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class JsonAdaptedAccount {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Account\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccount} with the given person details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonAdaptedAccount(@JsonProperty(\"username\") String username, @JsonProperty(\"password\") String password) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonAdaptedAccount(Account source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        username \u003d source.getUsername().userId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        password \u003d source.getPassword();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Account toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.MESSAGE_USERNAME_ERROR));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Username.isValidUsername(username)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final Username modelUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.MESSAGE_PASSWORD_ERROR));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final String modelPassword \u003d this.password;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Account(modelUsername, modelPassword);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Content;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Jackson-friendly version of {@link Notes}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class JsonAdaptedNote {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Note\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final String classId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final String content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"classId\") String classId, @JsonProperty(\"content\") String content) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public JsonAdaptedNote(Notes source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        classId \u003d source.getCode().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        content \u003d source.getContent().content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public Notes toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (classId \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(classId)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        final ClassId modelCode \u003d new ClassId(classId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (content \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                    Content.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!Content.isValidContent(content)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new IllegalValueException(Content.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        final Content modelContent \u003d new Content(content);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        Notes modelNote \u003d new Notes(modelCode, modelContent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return modelNote;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Result;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String picture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String classId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String attendance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String participation;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"picture\") String picture,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            @JsonProperty(\"classId\") String classId, @JsonProperty(\"attendance\") String attendance,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                             @JsonProperty(\"result\") String result,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                             @JsonProperty(\"participation\") String participation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.picture \u003d picture;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.attendance \u003d attendance;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.result \u003d result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.participation \u003d participation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        picture \u003d source.getPicture().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        classId \u003d source.getClassId().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        attendance \u003d source.getAttendance().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        result \u003d source.getResult().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        participation \u003d source.getParticipation().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (picture \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    Picture.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Picture.isValidPicture(picture) \u0026\u0026 !(\"null\".equals(picture))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(Picture.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final Picture modelPicture \u003d new Picture(picture);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (classId \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    ClassId.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!ClassId.isValidClassId(classId)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(ClassId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final ClassId modelClassId \u003d new ClassId(classId);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (attendance \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    Attendance.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Attendance.isValidAttendance(attendance)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(Attendance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final Attendance modelAttendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    Result.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Result.isValidResult(result)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(Result.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final Result modelResult \u003d new Result(result);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (participation \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    Participation.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!Participation.isValidParticipation(participation)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(Participation.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final Participation modelParticipation \u003d new Participation(participation);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person modelPerson \u003d new Person(modelName, modelPicture, modelClassId,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                modelAttendance, modelResult, modelParticipation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return modelPerson;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 66,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.ReminderDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.ReminderTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Jackson-friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final List\u003cJsonAdaptedReminderTime\u003e reminderTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                           @JsonProperty(\"reminderTimes\") List\u003cJsonAdaptedReminderTime\u003e reminderTimes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (reminderTimes !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            this.reminderTimes.addAll(reminderTimes);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Collections.sort(reminderTimes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public JsonAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        description \u003d source.getDescription().fullReminderDescription;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderTimes.addAll(source.getTime().stream().map(JsonAdaptedReminderTime::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Converts this Jackson-friendly adapted reminder object into the model\u0027s {@code Reminder} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reminder."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public Reminder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        final TreeSet\u003cReminderTime\u003e times \u003d new TreeSet\u003c\u003e(ReminderTime::compareTo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (JsonAdaptedReminderTime time : reminderTimes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            times.add(time.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    ReminderDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        final ReminderDescription modelDescription \u003d new ReminderDescription(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        final TreeSet\u003cReminderTime\u003e modelTimes \u003d new TreeSet\u003c\u003e(times);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return new Reminder(modelDescription, modelTimes);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedReminderTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.ReminderTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Jackson-friendly version of {@link TaskTime}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class JsonAdaptedReminderTime implements Comparable\u003cJsonAdaptedReminderTime\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final String fullTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminderTime} with the given {@code fullTime}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public JsonAdaptedReminderTime(String fullTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.fullTime \u003d fullTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Converts a given {@code ReminderTime} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public JsonAdaptedReminderTime(ReminderTime source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        fullTime \u003d source.fullTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public String getFullTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return fullTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Converts this Jackson-friendly adapted reminder time object into the model\u0027s {@code ReminderTime} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reminderTime."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderTime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!ReminderTime.isValidReminderTime(fullTime)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new IllegalValueException(ReminderTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return new ReminderTime(fullTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public int compareTo(JsonAdaptedReminderTime o) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ReminderTime thisReminderTime \u003d this.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ReminderTime otherReminderTime \u003d o.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return thisReminderTime.compareTo(otherReminderTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Marking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final String classId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final String marking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final List\u003cJsonAdaptedTaskTime\u003e taskTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"classId\") String classId, @JsonProperty(\"marking\") String marking,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                             @JsonProperty(\"taskTimes\") List\u003cJsonAdaptedTaskTime\u003e taskTimes) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.marking \u003d marking;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (taskTimes !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            this.taskTimes.addAll(taskTimes);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Collections.sort(taskTimes);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        classId \u003d source.getClassId().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        marking \u003d source.getMarking().getStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskTimes.addAll(source.getTime().stream().map(JsonAdaptedTaskTime::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        final TreeSet\u003cTaskTime\u003e times \u003d new TreeSet\u003c\u003e(TaskTime::compareTo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        for (JsonAdaptedTaskTime time : taskTimes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            times.add(time.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (classId \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    ClassId.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        final ClassId id \u003d new ClassId(classId);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (marking \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    Marking.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!Marking.isValidMark(marking)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new IllegalValueException(Marking.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        final Marking modelMarking \u003d new Marking(marking);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        final TreeSet\u003cTaskTime\u003e modelTimes \u003d new TreeSet\u003c\u003e(times);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new Task(id, modelTimes, modelMarking);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTaskTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Jackson-friendly version of {@link TaskTime}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class JsonAdaptedTaskTime implements Comparable\u003cJsonAdaptedTaskTime\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final String fullTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Constructs a {@code JsonAdaptedTaskTime} with the given {@code fullTime}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public JsonAdaptedTaskTime(String fullTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.fullTime \u003d fullTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts a given {@code TaskTime} into this class for Jackson use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public JsonAdaptedTaskTime(TaskTime source) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        fullTime \u003d source.fullTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public String getFullTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return fullTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts this Jackson-friendly adapted task time object into the model\u0027s {@code TaskTime} object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted taskTime."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskTime toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!TaskTime.isValidTaskTime(fullTime)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new IllegalValueException(TaskTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new TaskTime(fullTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public int compareTo(JsonAdaptedTaskTime o) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            TaskTime thisTaskTime \u003d this.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            TaskTime otherTaskTime \u003d o.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return thisTaskTime.compareTo(otherTaskTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAccountBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.AccountBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * An Immutable TutorAid that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "@JsonRootName(value \u003d \"accountbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class JsonSerializableAccountBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOUNT \u003d \"Account list contains duplicate account(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final List\u003cJsonAdaptedAccount\u003e accounts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Constructs a {@code JsonSerializableTutorAid} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonSerializableAccountBook(@JsonProperty(\"accounts\") List\u003cJsonAdaptedAccount\u003e acct) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.accounts.addAll(acct);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts a given {@code ReadOnlyTutorAid} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTutorAid}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonSerializableAccountBook(AccountBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        accounts.addAll(source.getList().stream().map(JsonAdaptedAccount::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TutorAid} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AccountBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AccountBook accountBook \u003d new AccountBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (JsonAdaptedAccount jsonAdaptedAccount : accounts) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Account account \u003d jsonAdaptedAccount.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (accountBook.hasAccount(account)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOUNT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            accountBook.addAccount(account);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return accountBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 5,
      "caesarpjz": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTutorAid.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.AddEarningsCommand.MESSAGE_DUPLICATE_EARNINGS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.storage.commands.JsonAdaptedCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.storage.earnings.JsonAdaptedEarnings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * An Immutable TutorAid that is serializable to JSON format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "@JsonRootName(value \u003d \"tutoraid\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "class JsonSerializableTutorAid {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_COMMAND \u003d \"Commands list contains duplicate command(s).\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"Reminder list contains duplicate reminder(s).\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"Notes list contains duplicate note(s)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final List\u003cJsonAdaptedEarnings\u003e earning \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final List\u003cJsonAdaptedCommand\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final List\u003cJsonAdaptedReminder\u003e reminders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Constructs a {@code JsonSerializableTutorAid} with the given persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public JsonSerializableTutorAid(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                                    @JsonProperty(\"earning\") List\u003cJsonAdaptedEarnings\u003e earning,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                                    @JsonProperty(\"commands\") List\u003cJsonAdaptedCommand\u003e commands,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                                    @JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                                    @JsonProperty(\"reminders\") List\u003cJsonAdaptedReminder\u003e reminders,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                                    @JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.earning.addAll(earning);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commands.addAll(commands);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.reminders.addAll(reminders);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts a given {@code ReadOnlyTutorAid} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTutorAid}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public JsonSerializableTutorAid(ReadOnlyTutorAid source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earning.addAll(source.getEarningsList().stream().map(JsonAdaptedEarnings::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commands.addAll(source.getCommandsList().stream().map(JsonAdaptedCommand::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminders.addAll(source.getReminderList().stream().map(JsonAdaptedReminder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notes.addAll(source.getNotesList().stream().map(JsonAdaptedNote::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TutorAid} object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAid toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid tutorAid \u003d new TutorAid();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (tutorAid.hasPerson(person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            tutorAid.addPerson(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (JsonAdaptedEarnings jsonAdaptedEarnings : earning) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Earnings earnings \u003d jsonAdaptedEarnings.toModelType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (tutorAid.hasEarnings(earnings)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EARNINGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            tutorAid.addEarnings(earnings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (JsonAdaptedCommand jsonAdaptedCommand : commands) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            CommandObject command \u003d jsonAdaptedCommand.toModelType();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (tutorAid.hasCommand(command)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_COMMAND);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            tutorAid.addCommand(command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (tutorAid.hasTask(task)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            tutorAid.addTask(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (JsonAdaptedReminder jsonAdaptedReminder : reminders) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            Reminder reminder \u003d jsonAdaptedReminder.toModelType();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (tutorAid.hasReminder(reminder)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            tutorAid.addReminder(reminder);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        for (JsonAdaptedNote jsonAdaptedNotes : notes) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            Notes notes \u003d jsonAdaptedNotes.toModelType();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (tutorAid.hasNotes(notes)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            tutorAid.addNotes(notes);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return tutorAid;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 18,
      "TeoShyanJie": 10,
      "Xuerneas": 35,
      "caesarpjz": 13,
      "kerwin97": 14,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTutorAidStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * A class to access TutorAid data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class JsonTutorAidStorage implements TutorAidStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTutorAidStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public JsonTutorAidStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Optional\u003cReadOnlyTutorAid\u003e readTutorAid() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return readTutorAid(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Similar to {@link #readTutorAid()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Optional\u003cReadOnlyTutorAid\u003e readTutorAid(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Optional\u003cJsonSerializableTutorAid\u003e jsonTutorAid \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                filePath, JsonSerializableTutorAid.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!jsonTutorAid.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return Optional.of(jsonTutorAid.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void saveTutorAid(ReadOnlyTutorAid tutorAid) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        saveTutorAid(tutorAid, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Similar to {@link #saveTutorAid(ReadOnlyTutorAid)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void saveTutorAid(ReadOnlyTutorAid tutorAid, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        requireNonNull(tutorAid);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTutorAid(tutorAid), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public interface Storage extends TutorAidStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Path getTutorAidFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Optional\u003cReadOnlyTutorAid\u003e readTutorAid() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void saveTutorAid(ReadOnlyTutorAid tutorAid) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Manages storage of TutorAid data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private TutorAidStorage tutorAidStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public StorageManager(TutorAidStorage tutorAidStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.tutorAidStorage \u003d tutorAidStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TutorAid methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return tutorAidStorage.getTutorAidFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Optional\u003cReadOnlyTutorAid\u003e readTutorAid() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return readTutorAid(tutorAidStorage.getTutorAidFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Optional\u003cReadOnlyTutorAid\u003e readTutorAid(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return tutorAidStorage.readTutorAid(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void saveTutorAid(ReadOnlyTutorAid tutorAid) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        saveTutorAid(tutorAid, tutorAidStorage.getTutorAidFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void saveTutorAid(ReadOnlyTutorAid tutorAid, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAidStorage.saveTutorAid(tutorAid, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TutorAidStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Represents a storage for {@link TutorAid}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public interface TutorAidStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Path getTutorAidFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns TutorAid data as a {@link ReadOnlyTutorAid}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Optional\u003cReadOnlyTutorAid\u003e readTutorAid() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @see #getTutorAidFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    Optional\u003cReadOnlyTutorAid\u003e readTutorAid(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Saves the given {@link ReadOnlyTutorAid} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @param tutorAid cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void saveTutorAid(ReadOnlyTutorAid tutorAid) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @see #saveTutorAid(ReadOnlyTutorAid)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void saveTutorAid(ReadOnlyTutorAid tutorAid, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/commands/JsonAdaptedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.storage.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandAction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandWord;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Jackson-friendly version of {@link CommandObject}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class JsonAdaptedCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CommandObject\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"command word\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String COMMAND_ACTION \u003d \"command action\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private final String commandAction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Constructs a {@code JsonAdaptedCommand} with the given CommandObject details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public JsonAdaptedCommand(@JsonProperty(\"commandWord\") String commandWord,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                               @JsonProperty(\"commandAction\") String commandAction) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandAction \u003d commandAction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Converts a given {@code CommandObject} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public JsonAdaptedCommand(CommandObject source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandAction \u003d source.getCommandAction().action;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandWord \u003d source.getCommandWord().word;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Converts this Jackson-friendly adapted CommandObject object into the model\u0027s {@code CommandObject} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandObject toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (commandAction \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, COMMAND_ACTION));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!CommandAction.isValidAction(commandAction)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(CommandAction.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final CommandAction modelAction \u003d new CommandAction(commandAction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (commandWord \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, COMMAND_WORD));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!CommandWord.isValidWord(commandWord)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new IllegalValueException(CommandWord.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final CommandWord modelWord \u003d new CommandWord(commandWord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandObject(modelWord, modelAction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/earnings/JsonAdaptedEarnings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.storage.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Claim;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Jackson-friendly version of {@link Earnings}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class JsonAdaptedEarnings {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final String classId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final String claim;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonAdaptedEarnings(@JsonProperty(\"date\") String date, @JsonProperty(\"classId\") String classId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                             @JsonProperty(\"amount\") String amount, @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                               @JsonProperty(\"claim\") String claim) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.classId \u003d classId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.claim \u003d claim;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public JsonAdaptedEarnings(Earnings source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        date \u003d source.getDate().dateNum;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        classId \u003d source.getClassId().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        amount \u003d source.getAmount().amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        type \u003d source.getType().type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        claim \u003d source.getClaim().claimStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Earnings toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Date.isValidDateNum(date)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (classId \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ClassId.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!ClassId.isValidClassId(classId)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(ClassId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final ClassId modelClassId \u003d new ClassId(classId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Type.isValidType(type)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final Type modelType \u003d new Type(type);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (claim \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Claim.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!Claim.isValidClaim(claim)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new IllegalValueException(Claim.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final Claim modelClaim \u003d new Claim(claim);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earnings \u003d new Earnings(modelDate, modelClassId, modelAmount, modelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earnings.setClaim(modelClaim);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return earnings;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AnchorPaneNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Create an anchor pane that can store additional data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class AnchorPaneNode extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    // Date associated with this pane"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Create a anchor pane node. Date is not assigned in the constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @param children children of the anchor pane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public AnchorPaneNode(Node... children) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        super(children);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Add action handler for mouse clicked"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.setStyle(\"-fx-background-color: #C0C0C0\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.setOnMouseClicked(e -\u003e System.out.println(\"This pane\u0027s date is: \" + date));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private SuggestionsField commandTextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EarningsCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A UI component that displays information of a {@code Earnings}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class EarningsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String FXML \u003d \"EarningsListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public final Earnings earnings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label classId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Label claim;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsCard(Earnings earnings, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.earnings \u003d earnings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        classId.setText(\"ClassId: \" + earnings.getClassId().value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        date.setText(\"Date: \" + earnings.getDate().dateNum);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        amount.setText(\"Amount: \" + earnings.getAmount().amount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        type.setText(\"Type: \" + earnings.getType().type);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        claim.setText(earnings.getClaim().claimStatus);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!(other instanceof EarningsCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EarningsCard card \u003d (EarningsCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u0026\u0026 earnings.equals(card.earnings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EarningsListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Panel containing the list of earnings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class EarningsListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String FXML \u003d \"EarningsListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EarningsListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private ListView\u003cEarnings\u003e earningsListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsListPanel(ObservableList\u003cEarnings\u003e earningsList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earningsListView.setItems(earningsList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earningsListView.setCellFactory(listView -\u003e new EarningsListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Earnings} using a {@code EarningsCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    class EarningsListViewCell extends ListCell\u003cEarnings\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        protected void updateItem(Earnings earnings, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            super.updateItem(earnings, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (empty || earnings \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                setGraphic(new EarningsCard(earnings, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FullCalendarView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Constructor for the entire calendar view"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class FullCalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private static final String FXML \u003d \"fullCalendar.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private ArrayList\u003cAnchorPaneNode\u003e allCalendarDays \u003d new ArrayList\u003c\u003e(35);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private VBox view;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Create a calendar view"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @param yearMonth year month to create the calendar of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public FullCalendarView(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        currentYearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Create the calendar grid pane"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        GridPane calendar \u003d new GridPane();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        calendar.setPrefSize(600, 400);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        calendar.setGridLinesVisible(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Create rows and columns with anchor panes for the calendar"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                AnchorPaneNode ap \u003d new AnchorPaneNode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                ap.setPrefSize(200, 200);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                calendar.add(ap, j, i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                allCalendarDays.add(ap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Days of the week labels"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Text[] dayNames \u003d new Text[]{ new"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                Text(\"Sunday\"), new"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                Text(\"Monday\"), new"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                Text(\"Tuesday\"), new"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                Text(\"Wednesday\"), new"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                Text(\"Thursday\"), new"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                Text(\"Friday\"), new"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                Text(\"Saturday\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        GridPane dayLabels \u003d new GridPane();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        dayLabels.setPrefWidth(600);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Integer col \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (Text txt : dayNames) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            AnchorPane ap \u003d new AnchorPane();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ap.setPrefSize(200, 10);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ap.setBottomAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            dayLabels.add(ap, col++, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Create calendarTitle and buttons to change current month"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        calendarTitle \u003d new Text();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Button previousMonth \u003d new Button(\"\u003c\u003c\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        previousMonth.setOnAction(e -\u003e previousMonth());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        Button nextMonth \u003d new Button(\"\u003e\u003e\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        nextMonth.setOnAction(e -\u003e nextMonth());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        HBox titleBar \u003d new HBox(previousMonth, calendarTitle, nextMonth);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        titleBar.setAlignment(Pos.BASELINE_CENTER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //titleBar.setStyle(\"-fx-background-color: #F0591E;\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Populate calendar with the appropriate day numbers"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        populateCalendar(yearMonth);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Create the calendar view"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        view \u003d new VBox(titleBar, dayLabels, calendar);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        view.setStyle(\"-fx-background-color: #2F4F4F;\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Set the days of the calendar to correspond to the appropriate date"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @param yearMonth year and month of month to render"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void populateCalendar(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Get the date we want to start with on the calendar"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        LocalDate calendarDate \u003d LocalDate.of(yearMonth.getYear(), yearMonth.getMonthValue(), 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Dial back the day until it is SUNDAY (unless the month starts on a sunday)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        while (!calendarDate.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            calendarDate \u003d calendarDate.minusDays(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Populate the calendar with day numbers"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        for (AnchorPaneNode ap : allCalendarDays) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            if (ap.getChildren().size() !\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                ap.getChildren().remove(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            Text txt \u003d new Text(String.valueOf(calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ap.setDate(calendarDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ap.setTopAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ap.setLeftAnchor(txt, 5.0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            ap.getChildren().add(txt);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // Change the title of the calendar"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        calendarTitle.setText(yearMonth.getMonth().toString() + \" \" + String.valueOf(yearMonth.getYear()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Move the month back by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Move the month forward by one. Repopulate the calendar with the correct dates."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        populateCalendar(currentYearMonth);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public VBox getView() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ArrayList\u003cAnchorPaneNode\u003e getAllCalendarDays() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return allCalendarDays;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setAllCalendarDays(ArrayList\u003cAnchorPaneNode\u003e allCalendarDays) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.allCalendarDays \u003d allCalendarDays;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103T-F14-2/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 2,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LoginWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.RegisterAccountCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * The Login Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * a login bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class LoginWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String FXML \u003d \"LoginWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private StackPane loginCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private TextField loginItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public LoginWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /*void fillLogin() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderBox \u003d new ReminderBox();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //reminderBoxPlaceholder.getChildren().add(reminderBox.getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void handleLogin() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String text \u003d loginItem.getText().toLowerCase();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(loginItem.getText(), false);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            //loginItem.setText(\"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (!text.startsWith(\"register\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                primaryStage.hide();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.info(\"Invalid command: \" + loginItem.getText());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            resultDisplay.setFeedbackToUser(\"Please login or register your account before you do any commands. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + \"Scroll down to see examples. \\n\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    + LoginCommand.MESSAGE_USAGE + \" \\n\\n\" + RegisterAccountCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            //throw e;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        primaryStage.centerOnScreen();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 2,
      "caesarpjz": 178,
      "kerwin97": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private LoginWindow loginWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private boolean unknown;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private EarningsListPanel earningsListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private ReminderWindow reminderWindow;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private ReminderBox reminderBox;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private FullCalendarView fullCalendarView;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private NotesListPanel notesListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private StackPane reminderBoxPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private Pane calendarPane;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.unknown \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderWindow \u003d new ReminderWindow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void fillStudents() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderBox \u003d new ReminderBox();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //reminderBoxPlaceholder.getChildren().add(reminderBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Fills up all the placeholders with earnings list in the window."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    void fillEarnings() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        earningsListPanel \u003d new EarningsListPanel(logic.getFilteredEarningsList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(earningsListPanel.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        reminderBox \u003d new ReminderBox();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //reminderBoxPlaceholder.getChildren().add(reminderBox.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Fills up all the placeholders with reminders list in the window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    void fillReminders() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getFilteredReminderList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderBox \u003d new ReminderBox();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //reminderBoxPlaceholder.getChildren().add(reminderBox.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    void fillTasks() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        reminderBox \u003d new ReminderBox();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //reminderBoxPlaceholder.getChildren().add(reminderBox.getRoot());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    void fillCalendar() throws IOException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        fullCalendarView \u003d new FullCalendarView(YearMonth.now());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(fullCalendarView.getRoot());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(fullCalendarView.getView());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderBox \u003d new ReminderBox();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //reminderBoxPlaceholder.getChildren().add(reminderBox.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    void fillNotes() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notesListPanel \u003d new NotesListPanel(logic.getFilteredNotesList());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(notesListPanel.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        reminderBox \u003d new ReminderBox();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTutorAidFilePath());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Opens the reminder window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void handleReminderBox() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!reminderWindow.isShowing()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            reminderWindow.show();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            reminderWindow.focus();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Switches to the reminder tab."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void handleReminder() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            String userCommand \u003d \"change_tab tab/reminders\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            executeCommand(userCommand);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            logger.info(\"User attempting to change tab during the learning of an unknown command!\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Switches to the earnings tab."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void handleEarnings() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            String userCommand \u003d \"change_tab tab/earnings\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            executeCommand(userCommand);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            logger.info(\"User attempting to change tab during the learning of an unknown command!\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Switches to the calendar tab sorted by the date."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void handleCalendarDate() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            String userCommand \u003d \"change_tab tab/calendar\";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            executeCommand(userCommand);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            logger.info(\"User attempting to change tab during the learning of an unknown command!\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Switches to the calendar tab sorted by the task."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void handleCalendarTask() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            String userCommand \u003d \"change_tab tab/task\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            executeCommand(userCommand);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            logger.info(\"User attempting to change tab during the learning of an unknown command!\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Switches to the notepad tab."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void handleNotes() throws ParseException, CommandException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            String userCommand \u003d \"change_tab tab/notepad\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            executeCommand(userCommand);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            logger.info(\"User attempting to change tab during the learning of an unknown command!\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private void setUnknownFalse() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.unknown \u003d false;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private void setUnknownTrue() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.unknown \u003d true;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsListPanel getEarningsListPanel() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return earningsListPanel;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderListPanel getReminderListPanel() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return reminderListPanel;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String, boolean)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, this.unknown);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (this.unknown) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                if (!commandResult.isUnknown()) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    setUnknownFalse();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else if (commandResult.isUnknown()) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                setUnknownTrue();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else if (commandResult.isPersons()) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                UiManager.startStudentProfile();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else if (commandResult.isTasks()) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                UiManager.startTasks();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else if (commandResult.isEarnings()) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                UiManager.startEarnings();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else if (commandResult.isNotes()) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                UiManager.startNotes();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else if (commandResult.isReminder()) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                UiManager.startReminders();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            reminderBox.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            reminderBox.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Shows the login window."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void showLogin() {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        loginWindow \u003d new LoginWindow(new Stage(), logic);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        loginWindow.show();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 38,
      "TeoShyanJie": 10,
      "Xuerneas": 45,
      "kerwin97": 118,
      "caesarpjz": 43,
      "-": 192
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.commands.note.DeleteNotesCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.parser.DeleteNotesCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * A UI component that displays information of a {@code Earnings}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class NotesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private static final String FXML \u003d \"NotesListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public final Notes notes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private Label classId;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private Label content;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public NotesCard(Notes notes, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        index \u003d displayedIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        classId.setText(\"ClassId: \" + notes.getCode().value);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        content.setText(\"Notes: \" + notes.getContent().content);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * To handle delete button action."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @return DeleteNoteCommand."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * @throws ParseException If there is parsing error."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public DeleteNotesCommand handleDelete() throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        String command \u003d Integer.toString(this.index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return new DeleteNotesCommandParser().parse(command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        NotesCard card \u003d (NotesCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                \u0026\u0026 notes.equals(card.notes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " * Panel containing the list of notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "public class NotesListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private static final String FXML \u003d \"NotesListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NotesListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    private ListView\u003cNotes\u003e notesListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public NotesListPanel(ObservableList\u003cNotes\u003e notesList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notesListView.setItems(notesList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        notesListView.setCellFactory(listView -\u003e new NotesListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Notes} using a {@code NotesCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    class NotesListViewCell extends ListCell\u003cNotes\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        protected void updateItem(Notes notes, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            super.updateItem(notes, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            if (empty || notes \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                setGraphic(new NotesCard(notes, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TutorAid level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Label classid;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Label attendance;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Label participation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Label result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private ImageView picture;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        classid.setText(person.getClassId().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        attendance.setText(\"Attendance: \" + person.getAttendance().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        participation.setText(\"Class Participation: \" + person.getParticipation().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        result.setText(\"Result: \" + person.getResult().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!(person.getPicture().value.equals(\"null\"))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Image studentPicture \u003d new Image(\"file:\" + person.getPicture().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            picture.setImage(studentPicture);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 14,
      "Xuerneas": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private static final String FXML \u003d \"ReminderBox.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private TextArea reminderBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderBox() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderBox.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * A UI component that displays information of a {@code Earnings}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private static final String FXML \u003d \"ReminderListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public final Reminder reminders;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private FlowPane times;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderCard(Reminder reminders, int displayedIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this.reminders \u003d reminders;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        description.setText(reminders.getDescription().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //date.setText(reminders.getDate().dateNum);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //amount.setText(reminders.getAmount().amount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        //times.setText(\"1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminders.getTime().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                .sorted(Comparator.comparing(reminderTime -\u003e reminderTime.fullTime))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                .forEach(reminderTime -\u003e times.getChildren().add(new Label(reminderTime.fullTime)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        if (!(other instanceof ReminderCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        ReminderCard card \u003d (ReminderCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u0026\u0026 reminders.equals(card.reminders);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Panel containing the list of earnings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private static final String FXML \u003d \"ReminderListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ReminderListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private ListView\u003cReminder\u003e reminderListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderListPanel(ObservableList\u003cReminder\u003e remindersList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderListView.setItems(remindersList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminderListView.setCellFactory(listView -\u003e new ReminderListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Reminders} using a {@code RemindersCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    class ReminderListViewCell extends ListCell\u003cReminder\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        protected void updateItem(Reminder reminders, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            super.updateItem(reminders, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            if (empty || reminders \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                setGraphic(new ReminderCard(reminders, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ReminderWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "public class ReminderWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Reminders! Reminders will be placed inside this box \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private static final String FXML \u003d \"ReminderWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private Label reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        reminder.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public ReminderWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SuggestionsField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.parser.TutorAidParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Replaces original TextField. SuggestionsField instead displays available commands for the user based on their input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class SuggestionsField extends TextField {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private TreeMap\u003cString, String\u003e commandList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private ContextMenu resultBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public SuggestionsField() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        commandList \u003d TutorAidParser.getCommandList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        resultBox \u003d new ContextMenu();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        resultBox.setOpacity(0.7);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        resultBox.hide();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        textProperty().addListener(new ChangeListener\u003cString\u003e() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            public void changed(ObservableValue\u003c? extends String\u003e obs, String str1, String str2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                if (getText().isBlank()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    resultBox.hide();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    findMatchingCommands();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Used to iterate through current set of commands and add matching commands to an arraylist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private void findMatchingCommands() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cString\u003e matchingCommands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Set\u003cString\u003e commandWords \u003d commandList.keySet();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (String command : commandWords) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (command.contains(getText()) \u0026\u0026 command.startsWith(getText())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                matchingCommands.add(command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        if (!matchingCommands.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            fillResultBox(matchingCommands);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (!resultBox.isShowing()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                resultBox.show(SuggestionsField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            resultBox.hide();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    //Method below adapted from https://www.javatips.net/api/javafx.scene.control.custommenuitem"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Populates {@code ContextMenu} with all found commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private void fillResultBox(ArrayList\u003cString\u003e matchingCommands) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Stack\u003cCustomMenuItem\u003e itemsToDisplay \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        while (count \u003c matchingCommands.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String commandWord \u003d matchingCommands.get(count);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Label commandDescription \u003d new Label("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    commandWord + \" - executes a \u003c\" + commandList.get(commandWord) + \"\u003e command.\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            CustomMenuItem commandMenuItem \u003d new CustomMenuItem(commandDescription, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            itemsToDisplay.push(commandMenuItem);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            EventHandler\u003cActionEvent\u003e onEnter \u003d new EventHandler\u003c\u003e() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                public void handle(ActionEvent actionEvent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    resultBox.hide();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    setText(commandWord);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    endOfNextWord();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            commandMenuItem.setOnAction(onEnter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        resultBox.getItems().clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        resultBox.getItems().addAll(itemsToDisplay);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 98,
      "Xuerneas": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TutorAid level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Label classId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private FlowPane times;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Label mark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        classId.setText(task.getClassId().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        mark.setText(\"Marking Status: \" + task.getMarking().getStatus());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        task.getTime().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .sorted(Comparator.comparing(taskTime -\u003e taskTime))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                .forEach(taskTime -\u003e times.getChildren().add(new Label(taskTime.fullTime + \" || \")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static boolean loggedInSuccessful \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Stage pStage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            //mainWindow.fillStudents();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            mainWindow.fillTasks();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            mainWindow.hide();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            mainWindow.showLogin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            //mainWindow.show();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void isAbleToLoginSuccessfully() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        loggedInSuccessful \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * To change tab to earnings tab."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void startStudentProfile() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        logger.info(\"Changing to Student Profile...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (mainWindow !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                mainWindow.fillStudents();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * To change tab to earnings tab."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void startEarnings() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        logger.info(\"Changing to Earning...\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            if (mainWindow !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                mainWindow.fillEarnings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * To change tab to tasks tab."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static void startTasks() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        logger.info(\"Changing to Tasks...\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            mainWindow.fillTasks();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * To change tab to reminder tab."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static void startReminders() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        logger.info(\"Changing to Reminders...\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            mainWindow.fillReminders();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     * To change tab to notepad tab/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    public static void startNotes() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        logger.info(\"Changing to Notes...\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            mainWindow.fillNotes();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     * To change tab to calendar tab."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    public static void startCalendar() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        logger.info(\"Changing to Calendar...\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            mainWindow.fillCalendar();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * To change tab to login window."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void startLoginWindow() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        logger.info(\"Changing to Login...\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            mainWindow.hide();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            mainWindow.showLogin();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    static void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Stage stage \u003d mainWindow.getPrimaryStage();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        showAlertDialogAndWait(stage, type, title, headerText, contentText);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 15,
      "Xuerneas": 20,
      "caesarpjz": 55,
      "kerwin97": 30,
      "-": 87
    }
  },
  {
    "path": "src/main/resources/view/CalendarListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cLabel fx:id\u003d\"module\" text\u003d\"\\$module\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 33
    }
  },
  {
    "path": "src/main/resources/view/CalendarListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003cListView fx:id\u003d\"earningsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 8
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003c?import seedu.address.ui.SuggestionsField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "  \u003cSuggestionsField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ".reminder-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ".reminder-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#type {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "#type.label {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 9,
      "caesarpjz": 14,
      "-": 354
    }
  },
  {
    "path": "src/main/resources/view/EarningsListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cLabel fx:id\u003d\"classId\" text\u003d\"\\$classId\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cLabel fx:id\u003d\"type\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cLabel fx:id\u003d\"claim\" alignment\u003d\"CENTER_RIGHT\" text\u003d\"\\$claim\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 35
    }
  },
  {
    "path": "src/main/resources/view/EarningsListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cListView fx:id\u003d\"earningsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 8
    }
  },
  {
    "path": "src/main/resources/view/LoginWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "         title\u003d\"TutorAid\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cStackPane prefHeight\u003d\"200.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #1A283E;\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#F8C33A\" height\u003d\"112.0\" stroke\u003d\"#f7d2e0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                               strokeType\u003d\"INSIDE\" width\u003d\"587.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cRectangle arcHeight\u003d\"5.0\" arcWidth\u003d\"5.0\" fill\u003d\"#1A283E\" height\u003d\"105.0\" stroke\u003d\"#f7d2e0\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                               strokeType\u003d\"INSIDE\" width\u003d\"580.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cImageView fitHeight\u003d\"84.0\" fitWidth\u003d\"186.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-background-color: #F8C33A;\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003cImage url\u003d\"@../images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003ceffect\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            \u003cGlow /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003c/effect\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cStackPane prefHeight\u003d\"200.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #1A283E;\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                           VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cText style\u003d\"-fx-font-family: Serif; -fx-font-size: 80; -fx-text-fill: white; -fx-color: white;-fx-color: #F8C33A\" text\u003d\"TUTORAID\"\u003e  \u003c/Text\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cStackPane fx:id\u003d\"loginCommand\" prefHeight\u003d\"150.0\" prefWidth\u003d\"600.0\"  style\u003d\"-fx-background-color: #1A283E;\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003cTextField fx:id\u003d\"loginItem\" onAction\u003d\"#handleLogin\" prefHeight\u003d\"33.0\" minWidth\u003d\"100\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                               prefWidth\u003d\"600.0\" maxWidth\u003d\"600\" promptText\u003d\"Enter your login credentials...\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                               style\u003d\"-fx-border-color: #F9F4F4; -fx-background-insets: 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                                                   -fx-border-radius: 20; -fx-text-fill: white;\" focusTraversable\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003cfont\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003c/font\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                        \u003cInsets left\u003d\"0.0\" right\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"300\" maxHeight\u003d\"600\" style\u003d\"-fx-background-color: #1A283E; -fx-border-radius: 20\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 71,
      "kerwin97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "         title\u003d\"TutorAid\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Reminders\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"remindertab\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleReminder\" text\u003d\"Reminders\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"reminderbox\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleReminderBox\" text\u003d\"RemindersBox\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Earnings\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"earningstab\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleEarnings\" text\u003d\"Earnings\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"calendartab\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCalendarDate\" text\u003d\"ByDate\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"tasktab\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCalendarTask\" text\u003d\"ByTask\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Notes\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"notestab\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleNotes\" text\u003d\"Notes\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003c!-- \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"reminderBoxPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003c/StackPane\u003e --\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "kerwin97": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/resources/view/NotesListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "              \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefWidth\u003d\"248.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                      \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                              \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                      \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                      \u003cLabel fx:id\u003d\"classId\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$classId\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "                  \u003cLabel fx:id\u003d\"content\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$content\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "   \u003cHBox alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "         \u003cButton maxHeight\u003d\"1.7976931348623157E308\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDelete\" style\u003d\"-fx-border-color: none; -fx-background-color: #489d64;\" text\u003d\"x\" textAlignment\u003d\"CENTER\" textFill\u003d\"#979797\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "               \u003cFont size\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 50
    }
  },
  {
    "path": "src/main/resources/view/NotesListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "    \u003cListView fx:id\u003d\"notesListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TeoShyanJie": 9
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "      \u003cLabel fx:id\u003d\"classid\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$classid\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "      \u003cLabel fx:id\u003d\"attendance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendance\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "      \u003cLabel fx:id\u003d\"participation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$participation\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "      \u003cLabel fx:id\u003d\"result\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$result\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "   \u003cImageView fx:id\u003d\"picture\" fitHeight\u003d\"105.0\" fitWidth\u003d\"117.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 14,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/ReminderBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "  \u003cTextArea fx:id\u003d\"reminderBox\" editable\u003d\"false\" styleClass\u003d\"reminder-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 9
    }
  },
  {
    "path": "src/main/resources/view/ReminderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$description\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"times\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003c!-- \u003cLabel fx:id\u003d\"times\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$times\" /\u003e --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 34
    }
  },
  {
    "path": "src/main/resources/view/ReminderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003cListView fx:id\u003d\"reminderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 8
    }
  },
  {
    "path": "src/main/resources/view/ReminderWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003cfx:root resizable\u003d\"true\" title\u003d\"Reminders\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cLabel fx:id\u003d\"reminder\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 34
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u003cLabel fx:id\u003d\"classId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u003cFlowPane fx:id\u003d\"times\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                \u003cLabel fx:id\u003d\"mark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$marking\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 35
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 8
    }
  },
  {
    "path": "src/main/resources/view/fullCalendar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "\u003cPane fx:id\u003d\"calendarPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"447.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.60\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "kerwin97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.storage.JsonTutorAidStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        JsonTutorAidStorage tutorAidStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                new JsonTutorAidStorage(temporaryFolder.resolve(\"tutorAid.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        StorageManager storage \u003d new StorageManager(tutorAidStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /*private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static class JsonTutorAidIoExceptionThrowingStub extends JsonTutorAidStorage {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private JsonTutorAidIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void saveTutorAid(ReadOnlyTutorAid tutorAid, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 9,
      "caesarpjz": 4,
      "-": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Person personInList \u003d model.getTutorAid().getPersonList().get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cPerson\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        testList.add(personInList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandFailure(new AddCommand(testList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 6,
      "Xuerneas": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cPerson\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        testList.add(validPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(testList).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cPerson\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        testList.add(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(testList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cPerson\u003e testListAlice \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        testListAlice.add(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cPerson\u003e testListBob \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        testListAlice.add(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(testListAlice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(testListBob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(testListAlice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public void deleteEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public String getSavedCommand() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public void saveCommand(String command) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public void updateFilteredCommandsList(Predicate\u003cCommandObject\u003e predicate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public void setCommands(CommandObject target, CommandObject editedCommands) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public void deleteCommand(CommandObject command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public void addCommand(CommandObject command) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public boolean hasCommand(CommandObject command) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public ObservableList\u003cCommandObject\u003e getFilteredCommandsList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setTutorAidFilePath(Path tutorAidFilePath) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setVersionedTutorAid(ReadOnlyTutorAid newData) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public void setNotes(Notes target, Notes editedNote) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setEarnings(Earnings target, Earnings editedEarnings) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public void setReminder(Reminder reminders, Reminder editedReminders) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public void deleteReminder(Reminder reminders) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cEarnings\u003e getFilteredEarningsList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean userHasLoggedIn() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void isLoggedIn() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void isLoggedOut() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        /*@Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredEarningsList(Predicate\u003cEarnings\u003e predicate) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public boolean hasReminder(Reminder reminders) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kerwin97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public void updateFilteredCalendarList() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void commitTutorAid() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean canUndoTutorAid() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean canRedoTutorAid() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void undoTutorAid() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void redoTutorAid() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new TutorAid();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 60,
      "TeoShyanJie": 26,
      "Xuerneas": 71,
      "caesarpjz": 37,
      "kerwin97": 36,
      "-": 186
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEarningsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.EarningsBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AddEarningsCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEarningsCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_earningsAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ModelStubAcceptingEarningsAdded modelStub \u003d new ModelStubAcceptingEarningsAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings validEarnings \u003d new EarningsBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        CommandResult commandResult \u003d new AddEarningsCommand(validEarnings).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(String.format(AddEarningsCommand.MESSAGE_SUCCESS, validEarnings),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(Arrays.asList(validEarnings), modelStub.earningsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_duplicateEarnings_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings validEarnings \u003d new EarningsBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AddEarningsCommand addEarningsCommand \u003d new AddEarningsCommand(validEarnings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEarnings(validEarnings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                AddEarningsCommand.MESSAGE_DUPLICATE_EARNINGS, () -\u003e addEarningsCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earnings1 \u003d new EarningsBuilder().withDate(\"02/02/2019\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earnings2 \u003d new EarningsBuilder().withDate(\"03/03/2020\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AddEarningsCommand addEarnings1Command \u003d new AddEarningsCommand(earnings1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AddEarningsCommand addEarnings2Command \u003d new AddEarningsCommand(earnings2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(addEarnings1Command.equals(addEarnings1Command));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AddEarningsCommand addEarnings1CommandCopy \u003d new AddEarningsCommand(earnings1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(addEarnings1Command.equals(addEarnings1CommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(addEarnings1Command.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(addEarnings1Command.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different earnings -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(addEarnings1Command.equals(addEarnings2Command));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void deleteEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public String getSavedCommand() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void saveCommand(String command) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredCommandsList(Predicate\u003cCommandObject\u003e predicate) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredCalendarList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setCommands(CommandObject target, CommandObject editedCommands) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void deleteCommand(CommandObject command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addCommand(CommandObject command) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasCommand(CommandObject command) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cCommandObject\u003e getFilteredCommandsList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setReminder(Reminder reminder, Reminder editedReminder) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setTutorAidFilePath(Path tutorAidFilePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setVersionedTutorAid(ReadOnlyTutorAid newData) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setNotes(Notes target, Notes editedNote) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setEarnings(Earnings target, Earnings editedEarnings) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cEarnings\u003e getFilteredEarningsList() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean userHasLoggedIn() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void isLoggedIn() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void isLoggedOut() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredEarningsList(Predicate\u003cEarnings\u003e predicate) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void commitTutorAid() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean canUndoTutorAid() {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean canRedoTutorAid() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void undoTutorAid() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void redoTutorAid() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private class ModelStubWithEarnings extends ModelStub {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        private final Earnings earnings;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ModelStubWithEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            requireNonNull(earnings);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            this.earnings \u003d earnings;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            requireNonNull(earnings);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return this.earnings.isSameEarnings(earnings);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private class ModelStubAcceptingEarningsAdded extends ModelStub {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        final ArrayList\u003cEarnings\u003e earningsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public boolean hasEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            requireNonNull(earnings);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return earningsAdded.stream().anyMatch(earnings::isSameEarnings);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public void addEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            requireNonNull(earnings);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            earningsAdded.add(earnings);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new TutorAid();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 37,
      "caesarpjz": 370
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.calendar.AddTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class AddTaskCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddTaskCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        AddTaskCommandTest.ModelStubAcceptingTaskAdded modelStub \u003d new AddTaskCommandTest.ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        CommandResult commandResult \u003d new AddTaskCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(String.format(AddTaskCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        AddTaskCommand addTaskCommand \u003d new AddTaskCommand(validTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            AddTaskCommand.MESSAGE_DUPLICATE_TASKS, () -\u003e addTaskCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ArrayList\u003cPerson\u003e testListAlice \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        testListAlice.add(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ArrayList\u003cPerson\u003e testListBob \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        testListAlice.add(bob);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(testListAlice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(testListBob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(testListAlice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void deleteEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public String getSavedCommand() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void saveCommand(String command) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredCommandsList(Predicate\u003cCommandObject\u003e predicate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setCommands(CommandObject target, CommandObject editedCommands) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void deleteCommand(CommandObject command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addCommand(CommandObject command) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasCommand(CommandObject command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cCommandObject\u003e getFilteredCommandsList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public Path getTutorAidFilePath() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setTutorAidFilePath(Path tutorAidFilePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addNotes(Notes notes) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setVersionedTutorAid(ReadOnlyTutorAid newData) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasEarnings(Earnings earnings) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasNotes(Notes notes) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void deleteNotes(Notes target) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setNotes(Notes target, Notes editedNote) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setEarnings(Earnings target, Earnings editedEarnings) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setReminder(Reminder reminders, Reminder editedReminders) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void deleteReminder(Reminder reminders) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cEarnings\u003e getFilteredEarningsList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilteredNotesList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean userHasLoggedIn() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void isLoggedIn() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void isLoggedOut() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        /*@Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyCalendar getCalendar() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredEarningsList(Predicate\u003cEarnings\u003e predicate) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasReminder(Reminder reminders) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredReminderList(Predicate\u003cReminder\u003e predicate) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void updateFilteredCalendarList() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void commitTutorAid() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean canUndoTutorAid() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean canRedoTutorAid() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void undoTutorAid() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void redoTutorAid() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ReadOnlyTutorAid getTutorAid() {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return new TutorAid();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 413
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void execute_emptyTutorAid_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void execute_nonEmptyTutorAid_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.setVersionedTutorAid(new TutorAid());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 8,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false, false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false, false,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false, false,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 3,
      "Xuerneas": 14,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESULT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand.EditEarningsDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.ClassIdContainKeywordPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.testutil.CommandObjectBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.UpdateEarningsDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String BASIC_COMMAND_ACTION_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String BASIC_COMMAND_WORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_CLASSID_BOB \u003d \"CS2103\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_CLASSID_AMY \u003d \"CS2100\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_ATTENDANCE_BOB \u003d \"10\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_ATTENDANCE_AMY \u003d \"2\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_PARTICIPATION_BOB \u003d \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_PARTICIPATION_AMY \u003d \"2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_PICTURE_BOB \u003d \"bob.jpg\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_PICTURE_AMY \u003d \"amy.png\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_RESULT_BOB \u003d \"92\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String VALID_RESULT_AMY \u003d \"32\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String VALID_MARKING_Y \u003d \"Y\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String VALID_MARKING_N \u003d \"N\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String VALID_TASK_TIME_1 \u003d \"10/11/2019 12:00, 10/11/2019 14:00\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String VALID_TASK_TIME_2 \u003d \"01/12/2019 15:00, 01/12/2019 16:00\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String VALID_TASK_TIME_3 \u003d \"30/01/2020 12:00, 30/01/2019 14:00\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String CLASSID_DESC_AMY \u003d \" \" + PREFIX_CLASSID + VALID_CLASSID_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String CLASSID_DESC_BOB \u003d \" \" + PREFIX_CLASSID + VALID_CLASSID_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String ATTENDANCE_DESC_AMY \u003d \" \" + PREFIX_ATTENDANCE + VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String ATTENDANCE_DESC_BOB \u003d \" \" + PREFIX_ATTENDANCE + VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String PARTICIPATION_DESC_AMY \u003d \" \" + PREFIX_PARTICIPATION + VALID_PARTICIPATION_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String PARTICIPATION_DESC_BOB \u003d \" \" + PREFIX_PARTICIPATION + VALID_PARTICIPATION_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String PICTURE_DESC_AMY \u003d \" \" + PREFIX_PICTURE + VALID_PICTURE_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String PICTURE_DESC_BOB \u003d \" \" + PREFIX_PICTURE + VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String RESULT_DESC_AMY \u003d \" \" + PREFIX_RESULT + VALID_PICTURE_AMY;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String RESULT_DESC_BOB \u003d \" \" + PREFIX_RESULT + VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String INVALID_PICTURE_DESC \u003d \" \" + PREFIX_PICTURE + \"James.docx\"; // .docx not allowed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String INVALID_ATTENDANCE_DESC \u003d \" \" + PREFIX_ATTENDANCE + \"Present\"; // Only numbers allowed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String INVALID_RESULT_DESC \u003d \" \" + PREFIX_RESULT + \"Full Marks\"; // Only numbers allowed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String INVALID_CLASSID_DESC \u003d \" \" + PREFIX_CLASSID + \" \"; // Class ID should not be blank"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String INVALID_PARTICIPATION_DESC \u003d \" \" + PREFIX_PARTICIPATION + \"Good\"; // Only numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_DATE_EARNINGS_CS2100_A01 \u003d \"03/04/2020\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_DATE_EARNINGS_CS1231_T05 \u003d \"06/04/2019\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_TYPE_EARNINGS_CS2100_A01 \u003d \"tut\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_TYPE_EARNINGS_CS1231_T05 \u003d \"c\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_AMOUNT_EARNINGS_CS2100_A01 \u003d \"50.00\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_AMOUNT_EARNINGS_CS1231_T05 \u003d \"60.00\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DATE_DESC_CS2100 \u003d \" \" + PREFIX_DATE + VALID_DATE_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DATE_DESC_CS1231 \u003d \" \" + PREFIX_DATE + VALID_DATE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String TYPE_DESC_CS2100 \u003d \" \" + PREFIX_TYPE + VALID_TYPE_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String TYPE_DESC_CS1231 \u003d \" \" + PREFIX_TYPE + VALID_TYPE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String AMOUNT_DESC_CS2100 \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String AMOUNT_DESC_CS1231 \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"04/593/2022\"; // \"593\" for months not allowed"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String INVALID_TYPE_DESC \u003d \" \" + PREFIX_TYPE + \"consulting\"; // \"consulting\" is not allowed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            \" \" + PREFIX_AMOUNT + \"323.332\"; // Only 2 decimal places are allowed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final EditEarningsDescriptor DESC_CS2100;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final EditEarningsDescriptor DESC_CS1231;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_USERNAME_ADRIAN \u003d \"amychoo\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_USERNAME_BARBARA \u003d \"barbara\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_PASSWORD_ADRIAN \u003d \"password123\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String VALID_PASSWORD_BARBARA \u003d \"passingword123\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final CommandObject DELETE_COMMAND;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withPicture(VALID_PICTURE_AMY).withAttendance(VALID_ATTENDANCE_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withResult(VALID_RESULT_AMY).withClassId(VALID_CLASSID_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withParticipation(VALID_PARTICIPATION_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withPicture(VALID_PICTURE_BOB).withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withResult(VALID_RESULT_BOB).withClassId(VALID_CLASSID_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withParticipation(VALID_PARTICIPATION_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        DESC_CS2100 \u003d new UpdateEarningsDescriptorBuilder().withDate(VALID_DATE_EARNINGS_CS2100_A01)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withType(VALID_TYPE_EARNINGS_CS2100_A01).withClassId(VALID_CLASSID_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withAmount(VALID_AMOUNT_EARNINGS_CS2100_A01).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        DESC_CS1231 \u003d new UpdateEarningsDescriptorBuilder().withDate(VALID_DATE_EARNINGS_CS1231_T05)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withType(VALID_TYPE_EARNINGS_CS1231_T05).withClassId(VALID_CLASSID_BOB)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withAmount(VALID_AMOUNT_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DELETE_COMMAND \u003d new CommandObjectBuilder().withCommandWord(BASIC_COMMAND_WORD_DELETE)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withCommandAction(BASIC_COMMAND_ACTION_DELETE).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid expectedTutorAid \u003d new TutorAid(actualModel.getTutorAid());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(expectedTutorAid, actualModel.getTutorAid());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static void showEarningsAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEarningsList().size());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings earnings \u003d model.getFilteredEarningsList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.updateFilteredEarningsList(new ClassIdContainKeywordPredicate("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            Collections.singletonList(earnings.getDate().dateNum)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(1, model.getFilteredEarningsList().size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.commitTutorAid();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 47,
      "Xuerneas": 19,
      "caesarpjz": 55,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorAid().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 13,
      "Xuerneas": 6,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCustomCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DELETE_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.TutorAidParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Contains integration tests and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * {@code DeleteCustomCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class DeleteCustomCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private TutorAidParser parser \u003d new TutorAidParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_validCustomCommand_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandObject commandToDelete \u003d model.getFilteredCommandsList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCustomCommand deleteCustomCommand \u003d new DeleteCustomCommand(commandToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomCommand.MESSAGE_DELETE_COMMAND_SUCCESS, commandToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        expectedModel.deleteCommand(commandToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandSuccess(deleteCustomCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_deleteBasicCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandObject basicCommand \u003d DELETE_COMMAND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCustomCommand deleteCustomCommand \u003d new DeleteCustomCommand(basicCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandFailure(deleteCustomCommand, model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                String.format(DeleteCustomCommand.MESSAGE_DELETE_COMMAND_FAIL, basicCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandObject firstCustomCommand \u003d model.getFilteredCommandsList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandObject secondCustomCommand \u003d model.getFilteredCommandsList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCustomCommand deleteFirstCommand \u003d new DeleteCustomCommand(firstCustomCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCustomCommand deleteSecondCommand \u003d new DeleteCustomCommand(secondCustomCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteCustomCommand deleteFirstCommandCopy \u003d new DeleteCustomCommand(firstCustomCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different commandObject -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteEarningsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEarningsAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.getTypicalTutorAid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * {@code DeleteEarningsCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DeleteEarningsCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Earnings earningsToDelete \u003d model.getFilteredEarningsList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteEarningsCommand deleteEarningsCommand \u003d new DeleteEarningsCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEarningsCommand.MESSAGE_DELETE_EARNINGS_SUCCESS, earningsToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedModel.deleteEarnings(earningsToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandSuccess(deleteEarningsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEarningsList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        DeleteEarningsCommand deleteEarningsCommand \u003d new DeleteEarningsCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandFailure(deleteEarningsCommand, model, Messages.MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showEarningsAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Earnings earningsToDelete \u003d model.getFilteredEarningsList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteEarningsCommand deleteEarningsCommand \u003d new DeleteEarningsCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEarningsCommand.MESSAGE_DELETE_EARNINGS_SUCCESS, earningsToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedModel.deleteEarnings(earningsToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        showNoEarnings(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandSuccess(deleteEarningsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showEarningsAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorAid().getEarningsList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        DeleteEarningsCommand deleteEarningsCommand \u003d new DeleteEarningsCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandFailure(deleteEarningsCommand, model, Messages.MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteEarningsCommand deleteEarningsFirstCommand \u003d new DeleteEarningsCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteEarningsCommand deleteEarningsSecondCommand \u003d new DeleteEarningsCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(deleteEarningsFirstCommand.equals(deleteEarningsFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteEarningsCommand deleteEarningsFirstCommandCopy \u003d new DeleteEarningsCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(deleteEarningsFirstCommand.equals(deleteEarningsFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(deleteEarningsFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(deleteEarningsFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(deleteEarningsFirstCommand.equals(deleteEarningsSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private void showNoEarnings(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        model.updateFilteredEarningsList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(model.getFilteredEarningsList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 12,
      "Xuerneas": 7,
      "caesarpjz": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPicture(VALID_PICTURE_BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withPicture(VALID_PICTURE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personInList \u003d model.getTutorAid().getPersonList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorAid().getPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 24,
      "Xuerneas": 11,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RESULT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different picture -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPicture(VALID_PICTURE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different result -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withResult(VALID_RESULT_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different class -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withClassId(VALID_CLASSID_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 10,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, true, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEarningsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EARNINGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.getTypicalTutorAid;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.ClassIdContainKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class FindEarningsCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new ClassIdContainKeywordPredicate(Collections.singletonList(\"CS2100\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new ClassIdContainKeywordPredicate(Collections.singletonList(\"CS2103T\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FindEarningsCommand findFirstEarningsCommand \u003d new FindEarningsCommand(firstPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FindEarningsCommand findSecondEarningsCommand \u003d new FindEarningsCommand(secondPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(findFirstEarningsCommand.equals(findFirstEarningsCommand));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FindEarningsCommand findFirstEarningsCommandCopy \u003d new FindEarningsCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(findFirstEarningsCommand.equals(findFirstEarningsCommandCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(findFirstEarningsCommand.equals(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(findFirstEarningsCommand.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(findFirstEarningsCommand.equals(findSecondEarningsCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_zeroKeywords_noEarningsFound() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EARNINGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FindEarningsCommand command \u003d new FindEarningsCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedModel.updateFilteredEarningsList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEarningsList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private ClassIdContainKeywordPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new ClassIdContainKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 3,
      "caesarpjz": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                true, false, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 3,
      "Xuerneas": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandAction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandWord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code NewCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class NewCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_COMMAND_WORD \u003d \"plus\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_COMMAND_ACTION \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_validNewCommand_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        NewCommand newCommand \u003d new NewCommand(VALID_COMMAND_WORD, VALID_COMMAND_ACTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        CommandObject commandToAdd \u003d new CommandObject(new CommandWord(VALID_COMMAND_ACTION),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new CommandAction(VALID_COMMAND_WORD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(NewCommand.SHOWING_NEW_COMMAND_MESSAGE + VALID_COMMAND_WORD,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                VALID_COMMAND_ACTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        expectedModel.addCommand(commandToAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandSuccess(newCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.undoTutorAid();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        model.undoTutorAid();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.undoTutorAid();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.undoTutorAid();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.redoTutorAid();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.redoTutorAid();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetPictureCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class SetPictureCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_validPictureSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personToSetPicture \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(personToSetPicture);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personWithPictureSet \u003d personInList.withPicture(VALID_PICTURE_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(personToSetPicture)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withPicture(VALID_PICTURE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand setPictureCommand \u003d new SetPictureCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(SetPictureCommand.MESSAGE_EDIT_PERSON_SUCCESS, personWithPictureSet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        expectedModel.setPerson(personToSetPicture, personWithPictureSet);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandSuccess(setPictureCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand setPictureCommand \u003d new SetPictureCommand(INDEX_FIRST, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person setPicturePerson \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(SetPictureCommand.MESSAGE_EDIT_PERSON_SUCCESS, setPicturePerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandSuccess(setPictureCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person personWithPictureSet \u003d new PersonBuilder(personInFilteredList).withPicture(VALID_PICTURE_AMY).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand setPictureCommand \u003d new SetPictureCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new EditPersonDescriptorBuilder().withPicture(VALID_PICTURE_AMY).build());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(SetPictureCommand.MESSAGE_EDIT_PERSON_SUCCESS, personWithPictureSet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), personWithPictureSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandSuccess(setPictureCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPicture(VALID_PICTURE_AMY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand setPictureCommand \u003d new SetPictureCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandFailure(setPictureCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorAid().getPersonList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand setPictureCommand \u003d new SetPictureCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new EditPersonDescriptorBuilder().withPicture(VALID_PICTURE_AMY).build());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandFailure(setPictureCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final SetPictureCommand standardCommand \u003d new SetPictureCommand(INDEX_FIRST, DESC_AMY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand commandWithSameValues \u003d new SetPictureCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(new SetPictureCommand(INDEX_SECOND, DESC_AMY)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(new SetPictureCommand(INDEX_FIRST, DESC_BOB)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 134,
      "Xuerneas": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.undoTutorAid();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.undoTutorAid();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnknownCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code UnknownCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class UnknownCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String FULL_COMMAND \u003d \"add n/caesar c/CS2030\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_fullLengthCommand_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        model.saveCommand(\"Previous Valid Command\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        UnknownCommand unknownCommand \u003d new UnknownCommand(FULL_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(FULL_COMMAND.split(\" \").length \u003e 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(UnknownCommand.UNKNOWN_COMMAND_USAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                        + model.getSavedCommand() + UnknownCommand.CANCEL_USAGE, FULL_COMMAND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandFailure(unknownCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void execute_commandWord_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        UnknownCommand unknownCommand \u003d new UnknownCommand(COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(UnknownCommand.SHOWING_UNKNOWN_MESSAGE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                + UnknownCommand.CANCEL_USAGE, COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertCommandSuccess(unknownCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateEarningsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2100;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEarningsAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.getTypicalTutorAid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand.EditEarningsDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.EarningsBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.UpdateEarningsDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UpdateEarningsCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalTutorAid(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings editedEarnings \u003d new EarningsBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor descriptor \u003d new UpdateEarningsDescriptorBuilder(editedEarnings).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d new UpdateEarningsCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateEarningsCommand.MESSAGE_UPDATE_SUCCESS, editedEarnings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedModel.setEarnings(model.getFilteredEarningsList().get(0), editedEarnings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandSuccess(updateEarningsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Index indexLastEarnings \u003d Index.fromOneBased(model.getFilteredEarningsList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings lastEarnings \u003d model.getFilteredEarningsList().get(indexLastEarnings.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EarningsBuilder earningsInList \u003d new EarningsBuilder(lastEarnings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings editedEarnings \u003d earningsInList.withDate(VALID_DATE_EARNINGS_CS1231_T05)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withType(VALID_TYPE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor descriptor \u003d new UpdateEarningsDescriptorBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withDate(VALID_DATE_EARNINGS_CS1231_T05)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withType(VALID_TYPE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d new UpdateEarningsCommand(indexLastEarnings, descriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateEarningsCommand.MESSAGE_UPDATE_SUCCESS, editedEarnings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedModel.setEarnings(lastEarnings, editedEarnings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                updateEarningsCommand,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                expectedMessage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new UpdateEarningsCommand(INDEX_FIRST, new EditEarningsDescriptor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Earnings editedEarnings \u003d model.getFilteredEarningsList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateEarningsCommand.MESSAGE_UPDATE_SUCCESS, editedEarnings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandSuccess(updateEarningsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showEarningsAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Earnings earningsInFilteredList \u003d model.getFilteredEarningsList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings editedEarnings \u003d new EarningsBuilder(earningsInFilteredList)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withDate(VALID_DATE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d new UpdateEarningsCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new UpdateEarningsDescriptorBuilder().withDate(VALID_DATE_EARNINGS_CS1231_T05).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateEarningsCommand.MESSAGE_UPDATE_SUCCESS, editedEarnings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TutorAid(model.getTutorAid()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedModel.setEarnings(model.getFilteredEarningsList().get(0), editedEarnings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedModel.commitTutorAid();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandSuccess(updateEarningsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_duplicateEarningsUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Earnings firstEarnings \u003d model.getFilteredEarningsList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor descriptor \u003d new UpdateEarningsDescriptorBuilder(firstEarnings).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d new UpdateEarningsCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandFailure(updateEarningsCommand, model, UpdateEarningsCommand.MESSAGE_DUPLICATE_EARNINGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_duplicateEarningsFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showEarningsAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // edit earnings in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Earnings earningsInList \u003d model.getTutorAid().getEarningsList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d new UpdateEarningsCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new UpdateEarningsDescriptorBuilder(earningsInList).build());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandFailure(updateEarningsCommand, model, UpdateEarningsCommand.MESSAGE_DUPLICATE_EARNINGS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_invalidEarningsIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEarningsList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor descriptor \u003d new UpdateEarningsDescriptorBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withDate(VALID_DATE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d new UpdateEarningsCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandFailure(updateEarningsCommand, model, Messages.MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void execute_invalidEarningsIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        showEarningsAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTutorAid().getEarningsList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UpdateEarningsCommand updateEarningsCommand \u003d new UpdateEarningsCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new UpdateEarningsDescriptorBuilder().withDate(VALID_DATE_EARNINGS_CS1231_T05).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertCommandFailure(updateEarningsCommand, model, Messages.MESSAGE_INVALID_EARNINGS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        final UpdateEarningsCommand standardCommand \u003d new UpdateEarningsCommand(INDEX_FIRST, DESC_CS2100);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor copyDescriptor \u003d new EditEarningsDescriptor(DESC_CS2100);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        UpdateEarningsCommand commandWithSameValues \u003d new UpdateEarningsCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateEarningsCommand(INDEX_SECOND, DESC_CS2100)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateEarningsCommand(INDEX_FIRST, DESC_CS1231)));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 19,
      "Xuerneas": 12,
      "caesarpjz": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateEarningsDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2100;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand.EditEarningsDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.UpdateEarningsDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UpdateEarningsDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor descriptorWithSameValues \u003d new EditEarningsDescriptor(DESC_CS2100);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(DESC_CS2100.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(DESC_CS2100.equals(DESC_CS2100));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(DESC_CS2100.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(DESC_CS2100.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(DESC_CS2100.equals(DESC_CS1231));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor editedCS2100 \u003d new UpdateEarningsDescriptorBuilder(DESC_CS2100)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withDate(VALID_DATE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(DESC_CS2100.equals(editedCS2100));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        editedCS2100 \u003d new UpdateEarningsDescriptorBuilder(DESC_CS2100)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withType(VALID_TYPE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(DESC_CS2100.equals(editedCS2100));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        editedCS2100 \u003d new UpdateEarningsDescriptorBuilder(DESC_CS2100)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withAmount(VALID_AMOUNT_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(DESC_CS2100.equals(editedCS2100));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different class -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        editedCS2100 \u003d new UpdateEarningsDescriptorBuilder(DESC_CS2100).withClassId(VALID_CLASSID_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(DESC_CS2100.equals(editedCS2100));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASSID_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLASSID_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PICTURE_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PICTURE_DESC_BOB,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // missing picture prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PICTURE_BOB,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PICTURE_BOB,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + CLASSID_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // invalid classid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_CLASSID_DESC, ClassId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 13,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEarningsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_CS2100;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASSID_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_CS2100;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLASSID_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_CS2100;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.AddEarningsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AddEarningsCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private AddEarningsCommandParser parser \u003d new AddEarningsCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEarningsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_CS2100"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + TYPE_DESC_CS2100 + VALID_AMOUNT_EARNINGS_CS2100_A01 + CLASSID_DESC_AMY,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, VALID_DATE_EARNINGS_CS2100_A01"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + TYPE_DESC_CS2100 + CLASSID_DESC_AMY + AMOUNT_DESC_CS2100,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, VALID_DATE_EARNINGS_CS2100_A01"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        + VALID_TYPE_EARNINGS_CS2100_A01 + VALID_AMOUNT_EARNINGS_CS2100_A01"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + VALID_CLASSID_AMY,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, INVALID_DATE_DESC + TYPE_DESC_CS2100"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + CLASSID_DESC_AMY + AMOUNT_DESC_CS2100, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // invalid classid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, DATE_DESC_CS2100 + TYPE_DESC_CS2100"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                + INVALID_CLASSID_DESC + AMOUNT_DESC_CS2100, ClassId.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteEarningsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.DeleteEarningsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * outside of the DeleteEarningsCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DeleteEarningsCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private DeleteEarningsCommandParser parser \u003d new DeleteEarningsCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ATTENDANCE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLASSID_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PARTICIPATION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PICTURE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RESULT_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PARTICIPATION_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PICTURE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Result;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PICTURE_DESC, Picture.MESSAGE_CONSTRAINTS); // invalid picture"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ATTENDANCE_DESC, Attendance.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CLASSID_DESC, ClassId.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RESULT_DESC, Result.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PARTICIPATION_DESC, Participation.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PICTURE_DESC_BOB + ATTENDANCE_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPicture(VALID_PICTURE_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .withAttendance(VALID_ATTENDANCE_AMY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // class part"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PARTICIPATION_DESC_AMY;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withParticipation(VALID_PARTICIPATION_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 32,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindEarningsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.FindEarningsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.ClassIdContainKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class FindEarningsCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private FindEarningsCommandParser parser \u003d new FindEarningsCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEarningsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        FindEarningsCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new FindEarningsCommand(new ClassIdContainKeywordPredicate(Arrays.asList(\"CS\", \"MA\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseSuccess(parser, \"CS MA\" , expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseSuccess(parser, \" \\n CS \\n \\t MA  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MarkAttendanceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkAttendanceCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class MarkAttendanceCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkAttendanceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private MarkAttendanceCommandParser parser \u003d new MarkAttendanceCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_null_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parser.parse(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        //non-numeric index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"one\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_validIndexesSpecified_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cIndex\u003e targetIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        targetIndexes.add(INDEX_FIRST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        targetIndexes.add(INDEX_SECOND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        targetIndexes.add(INDEX_THIRD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String userInput \u003d \"1,2,3\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        MarkAttendanceCommand expectedCommand \u003d new MarkAttendanceCommand(targetIndexes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MarkParticipationCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.MarkParticipationCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class MarkParticipationCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkParticipationCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private MarkParticipationCommandParser parser \u003d new MarkParticipationCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_null_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parser.parse(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        //non-numeric index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"one\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_validIndexesSpecified_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ArrayList\u003cIndex\u003e targetIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        targetIndexes.add(INDEX_FIRST);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        targetIndexes.add(INDEX_SECOND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        targetIndexes.add(INDEX_THIRD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String userInput \u003d \"1,2,3\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        MarkParticipationCommand expectedCommand \u003d new MarkParticipationCommand(targetIndexes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_PICTURE \u003d \"234.jpgg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_CLASSID \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_ATTENDANCE \u003d \"example\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_RESULT \u003d \"excellent\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_PARTICIPATION \u003d \"outspoken\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_PICTURE \u003d \"234.jpg\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_CLASSID \u003d \"Tut1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_COMMAND \u003d \"234.jpg\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_ATTENDANCE \u003d \"3\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_RESULT \u003d \"33\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_PARTICIPATION \u003d \"2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parsePicture_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePicture((String) null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parsePicture_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePicture(INVALID_PICTURE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parsePicture_validValueWithoutWhitespace_returnsPicture() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Picture expectedPicture \u003d new Picture(VALID_PICTURE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(expectedPicture, ParserUtil.parsePicture(VALID_PICTURE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parsePicture_validValueWithWhitespace_returnsTrimmedPicture() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String pictureWithWhitespace \u003d WHITESPACE + VALID_PICTURE + WHITESPACE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Picture expectedPicture \u003d new Picture(VALID_PICTURE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(expectedPicture, ParserUtil.parsePicture(pictureWithWhitespace));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void fillBasicCommands_equalTutorAidParseCommandList() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        TutorAidParser parser \u003d new TutorAidParser();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        TreeMap\u003cString, String\u003e testList \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ParserUtil.fillBasicCommands(testList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(testList, TutorAidParser.getCommandList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseClassId_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseClassId((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseClassId_validValueWithoutWhitespace_returnsClassId() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ClassId expectedClassId \u003d new ClassId(VALID_CLASSID);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(expectedClassId, ParserUtil.parseClassId(VALID_CLASSID));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseClassId_validValueWithWhitespace_returnsTrimmedClassId() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String classIdWithWhiteSpace \u003d WHITESPACE + VALID_CLASSID + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ClassId expectedClassId \u003d new ClassId(VALID_CLASSID);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(expectedClassId, ParserUtil.parseClassId(classIdWithWhiteSpace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseClassId_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseClassId(INVALID_CLASSID));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 48,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetPictureCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PICTURE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PICTURE_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.SetPictureCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class SetPictureCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPictureCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private SetPictureCommandParser parser \u003d new SetPictureCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_validPictureNameButFileDoesNotExist_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(\" 1 pic/fail.jpg\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        //the picture is a valid file name but it does not exist or is not in the same directory as TutorAid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1 pic/doesNotExist.jpg\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                \"Make sure the picture exists \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                        + \"and is in the same directory as TutorAid!\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, VALID_PICTURE_BOB, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1\", SetPictureCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"-5\" + PICTURE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"0\" + PICTURE_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PICTURE_DESC, Picture.MESSAGE_CONSTRAINTS); // invalid picture"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_pictureExistsInvalidFormat_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommandParserStub parserStub \u003d new SetPictureCommandParserStub();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseFailure(parserStub, \"1\" + INVALID_PICTURE_DESC, Picture.MESSAGE_CONSTRAINTS); // invalid picture"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parse_validPictureSpecifiedAndPictureExists_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PICTURE_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPicture(VALID_PICTURE_AMY).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommand expectedCommand \u003d new SetPictureCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        SetPictureCommandParserStub parserStub \u003d new SetPictureCommandParserStub();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertParseSuccess(parserStub, userInput, expectedCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * A stub for SetPictureCommandParser to test for the case where the picture file exists."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static class SetPictureCommandParserStub implements Parser\u003cSetPictureCommand\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "         * Parses the given {@code String} of arguments in the context of the SetPictureCommand"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "         * and returns an SetPictureCommand object for execution."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "         * In this stub, the file always exists."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "         * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public SetPictureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            requireNonNull(args);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_PICTURE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                        SetPictureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            if (argMultimap.getValue(PREFIX_PICTURE).isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                Picture pictureToSet \u003d ParserUtil.parsePicture(argMultimap.getValue(PREFIX_PICTURE).get());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                boolean isImageExisting \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                if (!isImageExisting) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                            \"Make sure the picture exists \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                            + \"and is in the same directory as TutorAid!\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                editPersonDescriptor.setPicture(pictureToSet);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                throw new ParseException(SetPictureCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return new SetPictureCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TutorAidParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.CancelCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.ListClassCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.UnknownCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.calendar.DeleteTaskCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.note.ListNotesCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.ClassIdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TutorAidParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String UNKNOWN_COMMAND \u003d \"unknown\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String SAMPLE_ARGUMENTS \u003d \" arguments\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TutorAidParser parser \u003d new TutorAidParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseCommand_deleteTask() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        DeleteTaskCommand command \u003d (DeleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                DeleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(new DeleteTaskCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseCommand_listClass() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"CS2030\", \"CS2040\", \"CS1231\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        ListClassCommand command \u003d (ListClassCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                ListClassCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(new ListClassCommand(new ClassIdContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(ListCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                + SAMPLE_ARGUMENTS));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseCommand_listNotes() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.parseCommand(ListNotesCommand.COMMAND_WORD) instanceof ListNotesCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.parseCommand(ListNotesCommand.COMMAND_WORD) instanceof ListNotesCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(ListNotesCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                + SAMPLE_ARGUMENTS));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseCommand_unrecognisedValidInput() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.parseCommand(UNKNOWN_COMMAND) instanceof UnknownCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseCommandWithoutLoggingIn_exit() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.parseCommandWithoutLoggingIn(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseCommandWithoutLoggingIn_help() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void parseCommandWithoutLoggingIn_unknown() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(ParseException.class, Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                parser.parseCommandWithoutLoggingIn(UNKNOWN_COMMAND));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void checkCommand_cancel() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.checkCommand(CancelCommand.COMMAND_WORD, UNKNOWN_COMMAND) instanceof CancelCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void checkCommand_valid() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.checkCommand(AddCommand.COMMAND_WORD, UNKNOWN_COMMAND) instanceof NewCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void checkCommand_unknown() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(parser.checkCommand(UNKNOWN_COMMAND, UNKNOWN_COMMAND) instanceof UnknownCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 78,
      "Xuerneas": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateEarningsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.AMOUNT_DESC_CS2100;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CLASSID_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TYPE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_CS1231;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand.EditEarningsDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.UpdateEarningsDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UpdateEarningsCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateEarningsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private UpdateEarningsCommandParser parser \u003d new UpdateEarningsCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, VALID_DATE_EARNINGS_CS1231_T05, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateEarningsCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DATE_DESC_CS1231, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"0\" + DATE_DESC_CS1231, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TYPE_DESC, Type.MESSAGE_CONSTRAINTS); // invalid type"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid amount"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CLASSID_DESC, ClassId.MESSAGE_CONSTRAINTS); // invalid classid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_CS1231 + AMOUNT_DESC_CS2100;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor descriptor \u003d new UpdateEarningsDescriptorBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withDate(VALID_DATE_EARNINGS_CS1231_T05)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .withAmount(VALID_AMOUNT_EARNINGS_CS2100_A01).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UpdateEarningsCommand expectedCommand \u003d new UpdateEarningsCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATE_DESC_CS1231;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        EditEarningsDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new UpdateEarningsDescriptorBuilder().withDate(VALID_DATE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UpdateEarningsCommand expectedCommand \u003d new UpdateEarningsCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // class part"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TYPE_DESC_CS1231;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor \u003d new UpdateEarningsDescriptorBuilder().withType(VALID_TYPE_EARNINGS_CS1231_T05).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedCommand \u003d new UpdateEarningsCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 4,
      "caesarpjz": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AccountBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.TypicalAccounts.ALISON_ACCOUNT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.AccountBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AccountBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final AccountBook accountBook \u003d new AccountBook();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(Collections.emptyList(), accountBook.getList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void hasAccount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accountBook.hasAccount(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void hasAccount_accountNotInAccountBook_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(accountBook.hasAccount(ALISON_ACCOUNT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void hasAccount_accountInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        accountBook.addAccount(ALISON_ACCOUNT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(accountBook.hasAccount(ALISON_ACCOUNT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void hasAccount_accountWithSameIdentityFieldsInAccountBook_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        accountBook.addAccount(ALISON_ACCOUNT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Account editedAlison \u003d new AccountBuilder(ALISON_ACCOUNT).withUsername(\"alison\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(accountBook.hasAccount(editedAlison));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.testutil.TutorAidBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(new TutorAid(), new TutorAid(modelManager.getTutorAid()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        userPrefs.setTutorAidFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        userPrefs.setTutorAidFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTutorAidFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTutorAidFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTutorAidFilePath_validPath_setsTutorAidFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        modelManager.setTutorAidFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(path, modelManager.getTutorAidFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasPerson_personNotInTutorAid_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasTask_taskNotInTutorAid_returnsFalse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(modelManager.hasTask(CS2103T));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasPerson_personInTutorAid_returnsTrue() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasTask_taskInTutorAid_returnsTrue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        modelManager.addTask(CS2103T);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(modelManager.hasTask(CS2103T));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid tutorAid \u003d new TutorAidBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid differentTutorAid \u003d new TutorAid();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        modelManager \u003d new ModelManager(tutorAid, userPrefs);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(tutorAid, userPrefs);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different tutorAid -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTutorAid, userPrefs)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tutorAid, userPrefs)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        differentUserPrefs.setTutorAidFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(tutorAid, differentUserPrefs)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 2,
      "Xuerneas": 40,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TutorAidTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "import seedu.address.model.note.Notes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "import seedu.address.model.reminder.Reminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TutorAidTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TutorAid tutorAid \u003d new TutorAid();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorAid.getPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorAid.getEarningsList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorAid.getTaskList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorAid.getCommandsList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorAid.getNotesList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(Collections.emptyList(), tutorAid.getReminderList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorAid.resetData(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void resetData_withValidReadOnlyTutorAid_replacesData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid newData \u003d getTypicalTutorAid();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAid.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(newData, tutorAid);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withClassId(\"Tutorial 7\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAidStub newData \u003d new TutorAidStub(newPersons, ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e tutorAid.resetData(newData));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task editedCS2103T \u003d new TaskBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(CS2103T, editedCS2103T);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAidStub newData \u003d new TutorAidStub(newTasks, CS2103T);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e tutorAid.resetData(newData));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorAid.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hatTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tutorAid.hasTask(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasPerson_personNotInTutorAid_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(tutorAid.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasTask_taskNotInTutorAid_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(tutorAid.hasTask(CS2103T));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasPerson_personInTutorAid_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAid.addPerson(ALICE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(tutorAid.hasPerson(ALICE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasTask_taskInTutorAid_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAid.addTask(CS2103T);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(tutorAid.hasTask(CS2103T));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInTutorAid_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAid.addPerson(ALICE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withClassId(\"Tutorial 7\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(tutorAid.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInTutorAid_returnsTrue() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAid.addTask(CS2103T);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task editedCS2103T \u003d new TaskBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(tutorAid.hasTask(editedCS2103T));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tutorAid.getPersonList().remove(0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tutorAid.getTaskList().remove(0));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void getEarningsList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e tutorAid.getEarningsList().remove(0));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * A stub ReadOnlyTutorAid whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static class TutorAidStub implements ReadOnlyTutorAid {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        private final ObservableList\u003cEarnings\u003e earnings \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        private final ObservableList\u003cCommandObject\u003e commands \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        private final ObservableList\u003cReminder\u003e reminder \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        private final ObservableList\u003cNotes\u003e notes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAidStub(Collection\u003cPerson\u003e persons, Person person) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAidStub(Collection\u003cTask\u003e tasks, Task task) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        public ObservableList\u003cEarnings\u003e getEarningsList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            return earnings;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        public ObservableList\u003cCommandObject\u003e getCommandsList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            return commands;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "            return reminder;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kerwin97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        public ObservableList\u003cNotes\u003e getNotesList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "            return notes;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TeoShyanJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 14,
      "TeoShyanJie": 7,
      "Xuerneas": 87,
      "caesarpjz": 7,
      "kerwin97": 6,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTutorAidFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTutorAidFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/earnings/AmountTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String invalidAmount \u003d \"22.123\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_invalidAmountWithDollarSign_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String invalidAmount \u003d \"$22.12\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_negativeAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String negativeAmount \u003d \"-22.12\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(negativeAmount));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"fifty dollars\")); // letter amount characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"$123.22\")); // contains dollar sign characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0\")); // zero only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"12345.23\")); // numbers only"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"999999.99\")); // max value"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/earnings/ClassIdContainKeywordPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.EarningsBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class ClassIdContainKeywordPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate firstPredicate \u003d new ClassIdContainKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate secondPredicate \u003d new ClassIdContainKeywordPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new ClassIdContainKeywordPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void test_classIdContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate predicate \u003d new ClassIdContainKeywordPredicate(Collections.singletonList(\"CS\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(predicate.test(new EarningsBuilder().withClassId(\"CS2103T\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        predicate \u003d new ClassIdContainKeywordPredicate(Arrays.asList(\"CS\", \"MA\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(predicate.test(new EarningsBuilder().withClassId(\"CSMA1000\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        predicate \u003d new ClassIdContainKeywordPredicate(Arrays.asList(\"CS2100\", \"MA1000\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(predicate.test(new EarningsBuilder().withClassId(\"MA1000\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        predicate \u003d new ClassIdContainKeywordPredicate(Arrays.asList(\"cS\", \"Ma\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(predicate.test(new EarningsBuilder().withClassId(\"CSMA2100S\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        ClassIdContainKeywordPredicate predicate \u003d new ClassIdContainKeywordPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(predicate.test(new EarningsBuilder().withClassId(\"CS2100\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        predicate \u003d new ClassIdContainKeywordPredicate(Arrays.asList(\"CS2103T\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(predicate.test(new EarningsBuilder().withClassId(\"MA1000\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/earnings/DateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String invalidDate \u003d \"011/93-2933\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_notLeapYearDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String notLeapYearDate \u003d \"29/02/2019\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(notLeapYearDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_isLeapYearDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String leapYearDate \u003d \"29/02/2016\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(Date.isValidDateNum(leapYearDate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDateNum(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Date.isValidDateNum(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Date.isValidDateNum(\" \")); // spaces only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Date.isValidDateNum(\"11-09/2020\")); // different date formats mixed together"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(Date.isValidDateNum(\"02/03/2019\")); // proper date only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(Date.isValidDateNum(\"23-02-1997\")); // different date format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/earnings/EarningsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.CS2103T_EARNINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.CS2107_EARNINGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.EarningsBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class EarningsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(CS2103T_EARNINGS.isSameEarnings(CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(CS2103T_EARNINGS.isSameEarnings(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings cs2103TCopy \u003d new EarningsBuilder(CS2103T_EARNINGS).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(CS2103T_EARNINGS.equals(cs2103TCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(CS2103T_EARNINGS.equals(CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(CS2103T_EARNINGS.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(CS2103T_EARNINGS.equals(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(CS2103T_EARNINGS.equals(CS2107_EARNINGS));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings editedCS2103T \u003d new EarningsBuilder(CS2103T_EARNINGS).withDate(VALID_DATE_EARNINGS_CS2100_A01).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(CS2103T_EARNINGS.equals(editedCS2103T));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // different picture -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        editedCS2103T \u003d new EarningsBuilder(CS2103T_EARNINGS).withAmount(VALID_AMOUNT_EARNINGS_CS2100_A01).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(CS2103T_EARNINGS.equals(editedCS2103T));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/earnings/TypeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class TypeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Type(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_invalidType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String invalidType \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Type(invalidType));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void constructor_invalidCombinationType_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String invalidCombinationType \u003d \"lab + consultations\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Type(invalidCombinationType));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void isValidType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Type.isValidType(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Type.isValidType(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Type.isValidType(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(Type.isValidType(\"discussion\")); // invalid type characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(Type.isValidType(\"lab\")); // lab only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/earnings/UniqueEarningsListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.model.earnings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.CS2103T_EARNINGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.CS2107_EARNINGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.earningsexception.DuplicateEarningsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.earningsexception.EarningsNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.testutil.EarningsBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UniqueEarningsListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String VALID_AMOUNT_CS2100 \u003d \"50.00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private final UniqueEarningsList uniqueEarningsList \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void contains_nullEarnings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEarningsList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void contains_earningsNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertFalse(uniqueEarningsList.contains(CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void contains_earningsInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertTrue(uniqueEarningsList.contains(CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void add_nullEarnigns_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEarningsList.add(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void add_duplicateEarnings_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(DuplicateEarningsException.class, () -\u003e uniqueEarningsList.add(CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_nullTargetEarnings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEarningsList.setEarnings(null, CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_nullEditedEarnings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            -\u003e uniqueEarningsList.setEarnings(CS2103T_EARNINGS, null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_targetEarningsNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(EarningsNotFoundException.class, ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            -\u003e uniqueEarningsList.setEarnings(CS2103T_EARNINGS, CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_editedEarningsIsSameEarnings_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.setEarnings(CS2103T_EARNINGS, CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UniqueEarningsList expectedUniqueEarningsList \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedUniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(expectedUniqueEarningsList, uniqueEarningsList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_editedEarningsHasSameIdentity_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        Earnings editedCS2103T \u003d new EarningsBuilder(CS2103T_EARNINGS).withAmount(VALID_AMOUNT_CS2100)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.setEarnings(CS2103T_EARNINGS, editedCS2103T);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UniqueEarningsList expectedUniqueEarningsList \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedUniqueEarningsList.add(editedCS2103T);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(expectedUniqueEarningsList, uniqueEarningsList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_editedEarningsHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.setEarnings(CS2103T_EARNINGS, CS2107_EARNINGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UniqueEarningsList expectedUniqueEarningsList \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedUniqueEarningsList.add(CS2107_EARNINGS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(expectedUniqueEarningsList, uniqueEarningsList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_editedEarningsHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2107_EARNINGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(DuplicateEarningsException.class, ()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            -\u003e uniqueEarningsList.setEarnings(CS2103T_EARNINGS, CS2107_EARNINGS));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void remove_nullEarnings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEarningsList.remove(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void remove_earningsDoesNotExist_throwsEarningsNotFoundException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(EarningsNotFoundException.class, () -\u003e uniqueEarningsList.remove(CS2103T_EARNINGS));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void remove_existingEarnings_removesEarnings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.remove(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UniqueEarningsList expectedUniqueEarningsList \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(expectedUniqueEarningsList, uniqueEarningsList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_nullUniqueEarningsList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEarningsList.setEarnings((UniqueEarningsList) null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_uniqueEarningsList_replacesOwnListWithProvidedUniqueEarningsList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UniqueEarningsList expectedUniqueEarningsList \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedUniqueEarningsList.add(CS2107_EARNINGS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.setEarnings(expectedUniqueEarningsList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(expectedUniqueEarningsList, uniqueEarningsList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueEarningsList.setEarnings((List\u003cEarnings\u003e) null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.add(CS2107_EARNINGS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        List\u003cEarnings\u003e personList \u003d Collections.singletonList(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        uniqueEarningsList.setEarnings(personList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        UniqueEarningsList expectedUniqueEarningsList \u003d new UniqueEarningsList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        expectedUniqueEarningsList.add(CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(expectedUniqueEarningsList, uniqueEarningsList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void setEarnings_listWithDuplicateEarnings_throwsDuplicateEarningsException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        List\u003cEarnings\u003e listWithDuplicateEarnings \u003d Arrays.asList(CS2103T_EARNINGS, CS2103T_EARNINGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(DuplicateEarningsException.class, () -\u003e uniqueEarningsList.setEarnings(listWithDuplicateEarnings));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            -\u003e uniqueEarningsList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AttendanceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class AttendanceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Attendance(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_invalidAttendance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String invalidAttendance \u003d \"present\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Attendance(invalidAttendance));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void isValidAttendance() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // null attendance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Attendance.isValidAttendance(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // invalid attendances"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\" \"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"^\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Attendance.isValidAttendance(\"here\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // valid attendances"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"23\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"79\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Attendance.isValidAttendance(\"99\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ParticipationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class ParticipationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Participation(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_invalidParticipation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String invalidParticipation \u003d \"present\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Participation(invalidParticipation));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void isValidParticipation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Participation.isValidParticipation(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\"^\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Participation.isValidParticipation(\"here\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Participation.isValidParticipation(\"1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Participation.isValidParticipation(\"23\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Participation.isValidParticipation(\"79\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Participation.isValidParticipation(\"99\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // different picture -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPicture(VALID_PICTURE_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 6,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PictureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class PictureTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Picture(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_invalidPicture_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String invalidPicture \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Picture(invalidPicture));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_invalidPictureFormat_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String invalidPicture \u003d \"test.tif\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Picture(invalidPicture));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void isValidPicture() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // null picture"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Picture.isValidPicture(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // invalid pictures"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Picture.isValidPicture(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Picture.isValidPicture(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        // valid pictures"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Picture.isValidPicture(\"test.jpg\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Picture.isValidPicture(\"123.jpg\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Picture.isValidPicture(\"21!.jpg\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 21,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class ResultTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Result(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void constructor_invalidResult_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String invalidResult \u003d \"full marks\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Result(invalidResult));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void isValidResult() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Result.isValidResult(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Result.isValidResult(\"\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Result.isValidResult(\" \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Result.isValidResult(\"^\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertFalse(Result.isValidResult(\"here\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Result.isValidResult(\"1\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Result.isValidResult(\"23\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Result.isValidResult(\"79\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertTrue(Result.isValidResult(\"99\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_PICTURE_BOB \u003d \"bob.jpg\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPicture(VALID_PICTURE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 4,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/MarkingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MARKING_N;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MARKING_Y;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class MarkingTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Marking(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void constructor_invalidMark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String invalidMark \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Marking(invalidMark));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void isValidMark() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // null marking"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Marking.isValidMark(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //valid marking"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(Marking.isValidMark(VALID_MARKING_N));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(Marking.isValidMark(VALID_MARKING_Y));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        //invalid marking"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(Marking.isValidMark(\"123\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(Marking.isValidMark(\"y\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(Marking.isValidMark(\"marked\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(Marking.isValidMark(\"$%#%%\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2100;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static final String VALID_PICTURE_BOB \u003d \"bob.jpg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(taskList.contains(CS2103T));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(taskList.contains(CS2103T));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task editedCS2103T \u003d new TaskBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(taskList.contains(editedCS2103T));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.add(CS2103T));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(null, CS2103T));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTask(CS2103T, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.setTask(CS2103T, CS2103T));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.setTask(CS2103T, CS2103T);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedTaskList.add(CS2103T);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task editedCS2103T \u003d new TaskBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.setTask(CS2103T, editedCS2103T);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedTaskList.add(editedCS2103T);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.setTask(CS2103T, CS2100);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedTaskList.add(CS2100);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2100);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.setTask(CS2103T, CS2100));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.remove(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e taskList.remove(CS2103T));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2100);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.remove(CS2100);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((TaskList) null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks_taskList_replacesOwnListWithProvidedTaskList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedTaskList.add(CS2100);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.setTasks(expectedTaskList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.add(CS2103T);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        List\u003cTask\u003e newTaskList \u003d Collections.singletonList(CS2100);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskList.setTasks(newTaskList);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        expectedTaskList.add(CS2100);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(expectedTaskList, taskList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(CS2100, CS2100);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            -\u003e taskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MARKING_N;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_TIME_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_TIME_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2100;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.CS2103T;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(CS2103T.isSameTask(CS2103T));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.isSameTask(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.isSameTask(CS2100));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task cs2103TCopy \u003d new TaskBuilder(CS2103T).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(CS2103T.equals(cs2103TCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.equals(CS2100));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        Task editedCS2103T \u003d new TaskBuilder(CS2103T).withClassId(VALID_CLASSID_AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different marking -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        editedCS2103T \u003d new TaskBuilder(CS2103T).withMarking(VALID_MARKING_N).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        // different task time -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        editedCS2103T \u003d new TaskBuilder(CS2103T).withTaskTimes(VALID_TASK_TIME_1, VALID_TASK_TIME_2).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(CS2103T.equals(editedCS2103T));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskTimeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TaskTime(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void constructor_invalidTaskTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        String invalidTaskTime \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TaskTime(invalidTaskTime));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedEarningsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.storage.earnings.JsonAdaptedEarnings.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.TypicalEarnings.CS2107_EARNINGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Claim;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.storage.earnings.JsonAdaptedEarnings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class JsonAdaptedEarningsTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String INVALID_DATE \u003d \"523/23-2033\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String INVALID_TYPE \u003d \"meeting+consultation\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String INVALID_CLASSID \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"23.241\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String INVALID_CLAIM \u003d \"waiting\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String VALID_DATE \u003d CS2107_EARNINGS.getDate().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String VALID_TYPE \u003d CS2107_EARNINGS.getType().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String VALID_CLASSID \u003d CS2107_EARNINGS.getClassId().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String VALID_AMOUNT \u003d CS2107_EARNINGS.getAmount().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final String VALID_CLAIM \u003d CS2107_EARNINGS.getClaim().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_validEarningsDetails_returnsEarnings() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d new JsonAdaptedEarnings(CS2107_EARNINGS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertEquals(CS2107_EARNINGS, earnings.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(INVALID_DATE, VALID_CLASSID,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                VALID_AMOUNT, VALID_TYPE, VALID_CLAIM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(null, VALID_CLASSID, VALID_AMOUNT, VALID_TYPE, VALID_CLAIM);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_invalidType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, VALID_CLASSID,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        VALID_AMOUNT, INVALID_TYPE, VALID_CLAIM);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d Type.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_nullType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, VALID_CLASSID, VALID_AMOUNT, null, VALID_CLAIM);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_invalidClassId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, INVALID_CLASSID,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        VALID_AMOUNT, VALID_TYPE, VALID_CLAIM);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d ClassId.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_nullClassId_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, null, VALID_AMOUNT, VALID_TYPE, VALID_CLAIM);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ClassId.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, VALID_CLASSID,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        INVALID_AMOUNT, VALID_TYPE, VALID_CLAIM);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, VALID_CLASSID, null, VALID_TYPE, VALID_CLAIM);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_invalidClaim_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, VALID_CLASSID,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                        VALID_AMOUNT, VALID_TYPE, INVALID_CLAIM);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d Claim.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_nullClaim_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonAdaptedEarnings earnings \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                new JsonAdaptedEarnings(VALID_DATE, VALID_CLASSID, VALID_AMOUNT, VALID_TYPE, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Claim.class.getSimpleName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, earnings::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_PICTURE \u003d \"+651234.xyz\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_ATTENDANCE \u003d \"here\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_CLASSID \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_RESULT \u003d \"hundred\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_PARTICIPATION \u003d \"two\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_PICTURE \u003d BENSON.getPicture().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_ATTENDANCE \u003d BENSON.getAttendance().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_CLASSID \u003d BENSON.getClassId().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_RESULT \u003d BENSON.getResult().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_PARTICIPATION \u003d BENSON.getParticipation().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PICTURE, VALID_CLASSID,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                        VALID_ATTENDANCE, VALID_RESULT, VALID_PARTICIPATION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PICTURE, VALID_CLASSID,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                VALID_ATTENDANCE, VALID_RESULT, VALID_PARTICIPATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PICTURE, INVALID_CLASSID,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                        INVALID_ATTENDANCE, INVALID_RESULT, INVALID_PARTICIPATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d Picture.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 19,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAccountBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class JsonSerializableAccountBookTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAccountBookTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private static final Path INVALID_ACCOUNT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAccountBook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public void toModelType_invalidFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        JsonSerializableAccountBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ACCOUNT_FILE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "                JsonSerializableAccountBook.class).get();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTutorAidTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class JsonSerializableTutorAidTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTutorAidTest\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonTutorAid.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        JsonSerializableTutorAid dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                JsonSerializableTutorAid.class).get();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 5,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTutorAidStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class JsonTutorAidStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTutorAidStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void readTutorAid_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTutorAid(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTutorAid\u003e readTutorAid(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new JsonTutorAidStorage(Paths.get(filePath)).readTutorAid(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertFalse(readTutorAid(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorAid(\"notJsonFormatTutorAid.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void readTutorAid_invalidPersonTutorAid_throwDataConversionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorAid(\"invalidPersonTutorAid.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void readTutorAid_invalidAndValidPersonTutorAid_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readTutorAid(\"invalidAndValidPersonTutorAid.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void saveTutorAid_nullTutorAid_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTutorAid(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Saves {@code tutorAid} at the specified {@code filePath}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private void saveTutorAid(ReadOnlyTutorAid tutorAid, String filePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            new JsonTutorAidStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "                    .saveTutorAid(tutorAid, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void saveTutorAid_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTutorAid(new TutorAid(), null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        userPrefs.setTutorAidFilePath(Paths.get(\"tutoraid.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.getTypicalTutorAid;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.ReadOnlyTutorAid;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        JsonTutorAidStorage addressBookStorage \u003d new JsonTutorAidStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "         * {@link JsonTutorAidStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTutorAidStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid original \u003d getTypicalTutorAid();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        storageManager.saveTutorAid(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        ReadOnlyTutorAid retrieved \u003d storageManager.readTutorAid().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertEquals(original, new TutorAid(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public void getTutorAidFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        assertNotNull(storageManager.getTutorAidFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 1,
      "Xuerneas": 11,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/commands/JsonAdaptedCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.storage.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.storage.commands.JsonAdaptedCommand.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.testutil.TypicalTutorAid.ADDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandAction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class JsonAdaptedCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_COMMAND_WORD \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String INVALID_COMMAND_ACTION \u003d \"  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_COMMAND_WORD \u003d ADDER.getCommandWord().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private static final String VALID_COMMAND_ACTION \u003d ADDER.getCommandAction().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void toModelType_validCommandObjectDetails_returnsCommandObject() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        JsonAdaptedCommand command \u003d new JsonAdaptedCommand(ADDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertEquals(ADDER, command.toModelType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void toModelType_invalidCommandWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        JsonAdaptedCommand command \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new JsonAdaptedCommand(INVALID_COMMAND_WORD, VALID_COMMAND_ACTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d CommandWord.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, command::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void toModelType_nullCommandWord_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        JsonAdaptedCommand command \u003d new JsonAdaptedCommand(null, VALID_COMMAND_ACTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, JsonAdaptedCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, command::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void toModelType_nullCommandAction_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        JsonAdaptedCommand command \u003d new JsonAdaptedCommand(VALID_COMMAND_WORD, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, JsonAdaptedCommand.COMMAND_ACTION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, command::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public void toModelType_invalidCommandAction_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        JsonAdaptedCommand command \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                new JsonAdaptedCommand(VALID_COMMAND_WORD, INVALID_COMMAND_ACTION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        String expectedMessage \u003d CommandAction.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, command::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AccountBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Username;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A utility class to help with building Account objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class AccountBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"bryan_ng\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"admin\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AccountBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        password \u003d DEFAULT_PASSWORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        // do i have to hash it here???????????????????????????"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Initializes the EarningsBuilder with the data of {@code accountToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AccountBuilder(Account accountToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        username \u003d accountToCopy.getUsername();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        password \u003d accountToCopy.getPassword();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Username} of the {@code Account} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AccountBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Type} of the {@code Earnings} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public AccountBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Account build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Account(username, password);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CommandObjectBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandAction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandWord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * A utility class to help with building CommandObject objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class CommandObjectBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String DEFAULT_COMMAND_WORD \u003d \"plus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String DEFAULT_COMMAND_ACTION \u003d \"add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private CommandWord commandWord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private CommandAction commandAction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandObjectBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandWord \u003d new CommandWord(DEFAULT_COMMAND_WORD);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandAction \u003d new CommandAction(DEFAULT_COMMAND_ACTION);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Initializes the CommandObjectBuilder with the data of {@code commandToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandObjectBuilder(CommandObject commandToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandWord \u003d commandToCopy.getCommandWord();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        commandAction \u003d commandToCopy.getCommandAction();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Sets the {@code CommandWord} of the {@code CommandObject} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandObjectBuilder withCommandWord(String word) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandWord \u003d new CommandWord(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Sets the {@code CommandAction} of the {@code CommandObject} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandObjectBuilder withCommandAction(String action) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.commandAction \u003d new CommandAction(action);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public CommandObject build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new CommandObject(commandWord, commandAction);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EarningsBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A utility class to help with building Earnings objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class EarningsBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"01/01/2019\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DEFAULT_TYPE \u003d \"tut\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DEFAULT_CLASSID \u003d \"F14\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"50.00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Type type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private ClassId classid;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        type \u003d new Type(DEFAULT_TYPE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        classid \u003d new ClassId(DEFAULT_CLASSID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Initializes the EarningsBuilder with the data of {@code earningsToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsBuilder(Earnings earningsToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        date \u003d earningsToCopy.getDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        type \u003d earningsToCopy.getType();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        classid \u003d earningsToCopy.getClassId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        amount \u003d earningsToCopy.getAmount();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Date} of the {@code Earnings} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsBuilder withDate(String date) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Type} of the {@code Earnings} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsBuilder withType(String type) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.type \u003d new Type(type);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code ClassId} of the {@code Earnings} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsBuilder withClassId(String classId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.classid \u003d new ClassId(classId);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Amount} of the {@code Earnings} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EarningsBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public Earnings build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new Earnings(date, classid, amount, type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setPicture(person.getPicture());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setClassId(person.getClassId());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setParticipation(person.getParticipation());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setResult(person.getResult());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setAttendance(person.getAttendance());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public EditPersonDescriptorBuilder withPicture(String picture) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setPicture(new Picture(picture));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public EditPersonDescriptorBuilder withClassId(String classId) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setClassId(new ClassId(classId));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public EditPersonDescriptorBuilder withAttendance(String attendance) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setAttendance(new Attendance(attendance));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public EditPersonDescriptorBuilder withResult(String result) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setResult(new Result(result));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public EditPersonDescriptorBuilder withParticipation(String participation) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.setParticipation(new Participation(participation));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 28,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Attendance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Participation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Picture;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.person.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String DEFAULT_PICTURE \u003d \"alice.jpg\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String DEFAULT_CLASSID \u003d \"Tutorial 4\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String DEFAULT_ATTENDANCE \u003d \"10\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String DEFAULT_RESULT \u003d \"12\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final String DEFAULT_PARTCIPATION \u003d \"0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Picture picture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private ClassId classid;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Attendance attendance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Result result;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private Participation participation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        picture \u003d new Picture(DEFAULT_PICTURE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        classid \u003d new ClassId(DEFAULT_CLASSID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        attendance \u003d new Attendance(DEFAULT_ATTENDANCE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        result \u003d new Result(DEFAULT_RESULT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        participation \u003d new Participation(DEFAULT_PARTCIPATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        picture \u003d personToCopy.getPicture();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        classid \u003d personToCopy.getClassId();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        attendance \u003d personToCopy.getAttendance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        result \u003d personToCopy.getResult();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        participation \u003d personToCopy.getParticipation();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public PersonBuilder withPicture(String picture) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.picture \u003d new Picture(picture);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public PersonBuilder withClassId(String classId) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.classid \u003d new ClassId(classId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public PersonBuilder withAttendance(String attendance) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.attendance \u003d new Attendance(attendance);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public PersonBuilder withResult(String result) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.result \u003d new Result(result);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public PersonBuilder withParticipation(String participation) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        this.participation \u003d new Participation(participation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new Person(name, picture, classid, attendance, result, participation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 46,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ATTENDANCE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CLASSID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PARTICIPATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PICTURE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RESULT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.logic.commands.util.EditPersonDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        sb.append(PREFIX_PICTURE + person.getPicture().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        sb.append(PREFIX_CLASSID + person.getClassId().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        sb.append(PREFIX_ATTENDANCE + person.getAttendance().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        sb.append(PREFIX_RESULT + person.getResult().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        sb.append(PREFIX_PARTICIPATION + person.getParticipation().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.getPicture().ifPresent(picture -\u003e sb.append(PREFIX_PICTURE).append(picture.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.getClassId().ifPresent(classid -\u003e sb.append(PREFIX_CLASSID).append(classid.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.getAttendance().ifPresent(attendance -\u003e sb.append(PREFIX_ATTENDANCE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(attendance.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.getResult().ifPresent(result -\u003e sb.append(PREFIX_RESULT).append(result.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        descriptor.getParticipation().ifPresent(participation -\u003e sb.append(PREFIX_PARTICIPATION)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "                .append(participation.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 19,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Marking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.TaskTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String DEFAULT_CLASSID \u003d \"Tutorial 4\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String DEFAULT_MARKING \u003d \"Y\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private ClassId classid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private Marking marking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private TreeSet\u003cTaskTime\u003e taskTimes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        classid \u003d new ClassId(DEFAULT_CLASSID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        marking \u003d new Marking(DEFAULT_MARKING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskTimes \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        classid \u003d taskToCopy.getClassId();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        marking \u003d taskToCopy.getMarking();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        taskTimes \u003d taskToCopy.getTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Sets the {@code classId} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskBuilder withClassId(String classId) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.classid \u003d new ClassId(classId);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Sets the {@code marking} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskBuilder withMarking(String marking) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.marking \u003d new Marking(marking);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Parses the {@code taskTimes} into a {@code Set\u003cTaskTime\u003e} and set it to the {@code Task} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TaskBuilder withTaskTimes(String ... taskTimes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.taskTimes \u003d SampleDataUtil.getTaskTimeSet(taskTimes);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new Task(classid, taskTimes, marking);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TutorAidBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " *     {@code TutorAid ab \u003d new TutorAidBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TutorAidBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private TutorAid tutorAid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAidBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAid \u003d new TutorAid();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAidBuilder(TutorAid tutorAid) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        this.tutorAid \u003d tutorAid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Adds a new {@code Person} to the {@code TutorAid} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAidBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        tutorAid.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public TutorAid build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return tutorAid;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAccounts.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_ADRIAN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BARBARA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_ADRIAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BARBARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.AccountBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.account.Account;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A utility class containing a list of {@code Account} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class TypicalAccounts {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Account ALISON_ACCOUNT \u003d new AccountBuilder().withUsername(\"alison\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withPassword(\"user123\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Account BENDIMEER_ACCOUNT \u003d new AccountBuilder().withUsername(\"bendimeer\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withPassword(\"p2ssW0rd\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Account ADRIAN \u003d new AccountBuilder().withUsername(VALID_USERNAME_ADRIAN)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withPassword(VALID_PASSWORD_ADRIAN).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Account BARBARA \u003d new AccountBuilder().withUsername(VALID_USERNAME_BARBARA)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withPassword(VALID_PASSWORD_BARBARA).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private TypicalAccounts() {} // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static AccountBook getTypicalAccountBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        AccountBook ab \u003d new AccountBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (Account acct : getTypicalAccount()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            ab.addAccount(acct);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static List\u003cAccount\u003e getTypicalAccount() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALISON_ACCOUNT, BENDIMEER_ACCOUNT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEarnings.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_AMOUNT_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_EARNINGS_CS1231_T05;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TYPE_EARNINGS_CS2100_A01;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A utility class containing a list of {@code Earnings} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class TypicalEarnings {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Earnings CS2103T_EARNINGS \u003d new EarningsBuilder().withDate(\"02/02/2019\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withType(\"tut\").withClassId(\"Tutorial 7\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withAmount(\"90.00\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Earnings CS2107_EARNINGS \u003d new EarningsBuilder().withDate(\"03/04/2020\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withType(\"lab\").withClassId(\"Tutorial 99\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withAmount(\"19.00\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    // Manually added - Earnings\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Earnings CS2100 \u003d new EarningsBuilder().withDate(VALID_DATE_EARNINGS_CS2100_A01)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withType(VALID_TYPE_EARNINGS_CS2100_A01)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withClassId(VALID_CLASSID_AMY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withAmount(VALID_AMOUNT_EARNINGS_CS2100_A01)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final Earnings CS1231 \u003d new EarningsBuilder().withDate(VALID_DATE_EARNINGS_CS1231_T05)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withType(VALID_TYPE_EARNINGS_CS1231_T05)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withClassId(VALID_CLASSID_BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .withAmount(VALID_AMOUNT_EARNINGS_CS1231_T05)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static final String KEYWORD_MATCHING_03_04_2020 \u003d \"03/04/2020\"; // A keyword that matches 03/04/2020"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private TypicalEarnings() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns an {@code TutorAid} with all the typical persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static TutorAid getTypicalTutorAid() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid ab \u003d new TutorAid();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        for (Earnings earning : getTypicalEarnings()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "            ab.addEarnings(earning);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public static List\u003cEarnings\u003e getTypicalEarnings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T_EARNINGS, CS2107_EARNINGS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 4,
      "caesarpjz": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final Task CS2103T \u003d new TaskBuilder().withClassId(\"CS2103T\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            .withMarking(\"Y\").withTaskTimes(\"10/10/2019 13:00, 10/10/2019 15:00\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final Task CS2100 \u003d new TaskBuilder().withClassId(\"CS2100\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            .withMarking(\"N\").withTaskTimes(\"10/10/2019 13:00, 10/10/2019 15:00\", \"13/10/2019 15:00, 13/10/2019 16:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     * Returns an {@code TutorAid} with all the typical persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static TutorAid getTypicalTutorAid() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid ab \u003d new TutorAid();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, CS2100));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Xuerneas": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTutorAid.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ATTENDANCE_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CLASSID_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PARTICIPATION_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PICTURE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RESULT_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RESULT_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "import seedu.address.model.TutorAid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "import seedu.address.model.commands.CommandObject;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": " * A utility class containing a list of {@code Person} and {@code CommandObject} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "public class TypicalTutorAid {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withPicture(\"alice.jpg\").withClassId(\"Tutorial 7\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withAttendance(\"9\").withResult(\"12\").withParticipation(\"100\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withPicture(\"benson.jpg\").withClassId(\"Tutorial 99\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withAttendance(\"19\").withResult(\"13\").withParticipation(\"10\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final CommandObject ADDER \u003d new CommandObjectBuilder().withCommandWord(\"adder\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withCommandAction(\"add\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final CommandObject DELETER \u003d new CommandObjectBuilder().withCommandWord(\"deleter\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withCommandAction(\"delete\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withPicture(VALID_PICTURE_AMY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withClassId(VALID_CLASSID_AMY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withResult(VALID_RESULT_AMY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withParticipation(VALID_PARTICIPATION_AMY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withAttendance(VALID_ATTENDANCE_AMY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withPicture(VALID_PICTURE_BOB)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withClassId(VALID_CLASSID_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withResult(VALID_RESULT_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withParticipation(VALID_PARTICIPATION_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            .withAttendance(VALID_ATTENDANCE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    private TypicalTutorAid() {} // prevents instantiation"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "     * Returns an {@code TutorAid} with all the typical persons and CommandObjects"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "    public static TutorAid getTypicalTutorAid() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        TutorAid ta \u003d new TutorAid();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "            ta.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        for (CommandObject command : getTypicalCommands()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "            ta.addCommand(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Xuerneas"
        },
        "content": "        return ta;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    public static List\u003cCommandObject\u003e getTypicalCommands() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ADDER, DELETER));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ngswbryan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ngswbryan": 45,
      "Xuerneas": 6,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UpdateEarningsDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.logic.commands.UpdateEarningsCommand.EditEarningsDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.classid.ClassId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Earnings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "import seedu.address.model.earnings.Type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " * A utility class to help with building UpdateEarningsDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "public class UpdateEarningsDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    private EditEarningsDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor \u003d new EditEarningsDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsDescriptorBuilder(EditEarningsDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        this.descriptor \u003d new EditEarningsDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsDescriptorBuilder(Earnings earnings) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor \u003d new EditEarningsDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setDate(earnings.getDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setType(earnings.getType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setClassId(earnings.getClassId());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setAmount(earnings.getAmount());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsDescriptorBuilder withType(String type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setType(new Type(type));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsDescriptorBuilder withClassId(String classId) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setClassId(new ClassId(classId));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public UpdateEarningsDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    public EditEarningsDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caesarpjz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caesarpjz": 72
    }
  }
]
