[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003d Mark"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T13-4/main[image:https://travis-ci.org/AY1920S1-CS2103T-T13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "https://ci.appveyor.com/project/Na-Nazhou/main-s7pnr[image:https://ci.appveyor.com/api/projects/status/uudh03pfcj3d2skk?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T13-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T13-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "https://www.codacy.com/manual/Na-Nazhou/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103T-T13-4/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/acdf3b37edfe40dbab7320f740928c89[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d About Mark"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark::"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "An intuitive bookmark manager made by people who love to type, for people who love to type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "*Special Features*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Save important content from a webpage for *offline* use, and *annotate* it right away."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Set *reminders* for websites. Never forget to pay those pesky e-bills again!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Sort and tag your bookmarks automatically with our intelligent *auto-tagging* system. Keeping your bookmarks organized is easy."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* This application was inspired by the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 14,
      "openorclose": 4,
      "Na-Nazhou": 1,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "mainClassName \u003d \u0027seedu.mark.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    compile group: \u0027org.jsoup\u0027, name: \u0027jsoup\u0027, version: \u00271.9.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    compile \u0027net.dankito.readability4j:readability4j:1.0.3\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveName \u003d \u0027mark.jar\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        \u0027site-name\u0027: \u0027Mark\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T13-4/main\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "openorclose": 1,
      "Na-Nazhou": 1,
      "kxyoke": 8,
      "-": 150
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Susumu Yoshida - http://www.mcdodesign.com/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "- address_book_32.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "- AddressApp.ico"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Icon made by Smashicons - https://www.flaticon.com/authors/smashicons from www.flaticon.com"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "- bookmark_icon.png"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 9
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Mark was developed by the team https://github.com/orgs/AY1920S1-CS2103T-T13-4/teams/developers[CS2103T-T13-4]. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Dorcas Tabitha Tan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "image::dorcastan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "{empty}[https://github.com/dorcastan[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Role: Team lead \u0026 Scheduling and Tracking +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Daryl Tan"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "image::openorclose.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "{empty}[https://github.com/openorclose[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Role: Testing \u0026 Code Quality +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Na Nazhou"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "image::na-nazhou.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "{empty}[https://github.com/Na-Nazhou[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Role: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Yoke Kai Xin"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "image::kxyoke.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "{empty}[https://github.com/kxyoke[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d TSAI, HSIAO-HAN"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "image::tsai-hsiao-han.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "{empty}[https://github.com/TSAI-HSIAO-HAN[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Responsibilities: Commons"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 9,
      "Na-Nazhou": 17,
      "-": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d Mark - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/mark/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "A project often depends on third-party libraries. For example, Mark depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 4,
      "-": 44
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d Mark - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "By: `Team CS2103T-T13-4`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Welcome to Mark. This developer guide aims to introduce potential developers to the structure and implementation of Mark,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "so that you can contribute too!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The guide first covers the high-level design of Mark, and then discusses the implementation of key features and the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "rationale behind certain design decisions. Next, it provides links to guides for the tools used in Documentation, Testing,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "and DevOps. Finally, the appendices of this guide specify the product scope, requirements, a glossary, and instructions for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "manual testing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "This section shows the design of Mark."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/mark/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/mark/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "For example, `LogsCenter` plays an important role at the architecture level as it is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "The rest of the App consists of the following four components:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ". \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ". \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ". \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ". \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The following diagram illustrates the structure of the UI component:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/mark/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookmarkListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow` and \u0027TabView\u0027 components (not shown in the above figure), inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The structure of the `TabView` is depicted here:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ".Structure of the TabView Component, which is a part of the UI component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "image::UiTabViewClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/mark/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The `UI` component does the following:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "The following class diagram illustrates the structure of the `Logic` component:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "link:{repoURL}/src/main/java/seedu/mark/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`Logic` uses the `MarkParser` class to parse the user command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "The command execution can affect the `Model` (e.g. adding a bookmark) and/or `Storage` (e.g. import bookmarks)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "such as displaying help to the user, switching the tab view, or exiting the application."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "As an example of how the `Logic` component works, the following sequence diagram shows the interactions"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "within the `Logic` component for the `execute(\"delete 1\")` API call:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "The `Logic` component does the following:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* Parses and executes user commands"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* Modifies `Model` and/or `Storage` according to user commands"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* Instructs `Ui` through `CommandResult` objects"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The `Model` component:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Stores the data of Mark."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Does not depend on any of the other three components."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/mark/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The `Model` consists of the following:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "1. `VersionedMark` - contains Mark data"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "2. `UserPrefs` - represents the user\u0027s preferences"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "3. `OfflineDocument` - represents the current document being displayed in the offline tab"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "4. `Url` - represents the current URL being displayed in the offline tab"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "It also exposes an unmodifiable `ObservableList\u003cBookmark\u003e` that"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "can be \u0027observed\u0027, e.g. the UI can be bound to this list so that the UI automatically updates"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "when the list data are changed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`VersionedMark` contains a list of `ReadOnlyMark` objects that represent past or future states of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark. Each `Mark`, in turn, comprises a `UniqueBookmarkList`, a `ReminderAssociation` object, an"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`AutotagController`, and a `FolderStructure`."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ".Structure of the Annotation package"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "image::AnnotationPackageClassDiagram.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The above diagram shows the structure of the Annotation package, which is accessed by `ModelManager` via `OfflineDocument`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "An `OfflineDocument` consists of zero or more `Paragraph` objects. A `Paragraph` can be either a `PhantomParagraph`, which"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "contains only an `AnnotationNote` and a `ParagraphIdentifier`, or a `TrueParagraph`, which contains `AnnotationNote`,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`ParagraphIdentifier`, `Highlight`, and `ParagraphContent`. `AnnotationNote` and `Highlight` are optional fields"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "whenever they are used, i.e. in `PhantomParagraph` and/or `TrueParagraph`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The following diagram illustrates the structure of the Storage component:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "openorclose"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/mark/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The `Storage` component does the following:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* Saves `UserPref` objects in json format and reads them back."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* Saves the Mark data in json format and reads it back."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Classes used by multiple components are in the `seedu.mark.commons` package."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedMark`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "It extends `Mark` with an undo/redo history, stored internally as a list of `markStateRecord` and `currentPointer`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `VersionedMark#save()` -- Saves the current Mark state and the corresponding record to its history."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `VersionedMark#undo()` -- Restores the previous Mark state from its history and returns the record."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `VersionedMark#redo()` -- Restores a previously undone Mark state from its history and returns the record for that"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#saveMark()`, `Model#undoMark()` and `Model#redoMark()`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedMark` will be initialized with the initial"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Mark state and an empty record, and the `currentPointer` pointing to that single state record."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th bookmark in the Mark. The `delete` command calls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`Model#saveMark()`, causing the modified state of the Mark and the record of the command after command execution to be"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "saved in the `markStateRecords`, and the `currentPointer` is shifted to the newly inserted state record."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Step 3. The user executes `add u/www.google.com ...` to add a new bookmark. The `add` command also calls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`Model#saveMark()`,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "causing another modified Mark state and the record to be saved into the `markStateRecords`, and the `currentPointer` is"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "again shifted to the newly inserted state record.."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "If a command fails its execution, it will not call `Model#saveMark()`, so the Mark state will not be saved into the"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`markStateRecords`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Step 4. The user now decides that adding the bookmark was a mistake, and decides to undo that action by executing the"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`undo` command. The `undo` command will call `Model#undoMark()`, which will shift the `currentPointer` once to the left,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "pointing it to the previous state record, and restores the Mark to that state."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "If the `currentPointer` is at index 0, pointing to the initial Mark state, then there are no previous Mark states to"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "restore."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "The `undo` command uses `Model#canUndoMark()` to check if this is the case. If so, it will return an error to the user"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "rather than attempting to perform the undo."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoMark()`, which shifts the `currentPointer` once to the right,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "pointing to the previously undone state record, and restores the Mark to that state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "If the `currentPointer` is at index `markStateRecords.size() - 1`, pointing to the latest Mark state, then there"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "are no undone Mark states to restore. The `redo` command uses `Model#canRedoMark()` to check if this is"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the Mark, such as `find`, will"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "usually not call `Model#saveMark()`, `Model#undoMark()` or `Model#redoMark()`. Thus, the `markStateRecords` remains"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "unchanged."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#saveMark()`. Since the `currentPointer` is not pointing at the end"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "of the `markStateRecords`, all state records after the `currentPointer` will be purged."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "We designed it this way because it no longer makes sense to redo the `add u/www.google.com ...` command. This is the"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "image::SaveMarkActivityDiagram.png[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Mark state."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the bookmark being deleted)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of Mark state records."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "** Pros: Undo/redo multiple commands can be achieved in O(1) time by just shifting the current pointer."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "** Cons: Clear state records after the current pointer can take O(n) time."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* **Alternative 2:** Use two stacks, an undo stack and a redo stack to store the history of Mark state records."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "** Pros: Clear state records after the current pointer can be achieved in O(1) time by clearing the redo stack."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "** Cons: Undo/redo multiple commands can take O(n) time as each undo/redo action requires popping a state record from the"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "undo stack and pushing it into the redo stack. There is no way to pop multiple state records efficiently at one time."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "// tag::autotag[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Autotag feature"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The autotag mechanism is facilitated by `AutotagController`. It stores and manages a list of `SelectiveBookmarkTaggers` which apply tags to"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "bookmarks if they match specific criteria. It also implements the following operations:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `AutotagController#hasTagger(SelectiveBookmarkTagger)` -- Checks whether the controller contains the given tagger."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `AutotagController#addTagger(SelectiveBookmarkTagger)` -- Starts managing the given tagger."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `AutotagController#applyTaggersToList(List\u003cBookmark\u003e)` -- Tags the bookmarks in the list using all relevant taggers."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `AutotagController#applyTaggers(Bookmark)` -- Tags the bookmark using all relevant taggers."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The first three operations are exposed in the `Model` interface as `Model#hasTagger(SelectiveBookmarkTagger)`, `Model#addTagger(SelectiveBookmarkTagger)`,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "and `Model#applyAllTaggers()` respectively."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Given below is an example usage scenario and how the autotag mechanism behaves at each step."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Step 1. The user opens the application with an existing list of bookmarks and no autotags."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "image::AutotagState0.png[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Step 2. The user executes the command `autotag Help u/stackoverflow.com/questions` to add an autotag that tags all bookmarks"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "from StackOverflow with the tag ProgrammingHelp. A `SelectiveBookmarkTagger` is created with a `UrlContainsKeywordsPredicate` and the tag"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`Help`. `b2`, which matches the `UrlContainsKeywordsPredicate`, is replaced by a copy of itself that also contains the tag"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`Help`."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "image::AutotagState1.png[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The following sequence diagram shows how the `autotag` command works."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "__(The sequence diagram will be improved in future versions of the Developer Guide.)__"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "// TODO: improve sequence diagram"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "image::AutotagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "NOTE: The lifeline for `AutotagCommand` should end at the destroy marker (X), but due to a limitation of PlantUML, it reaches the end of this diagram."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Now, autotags will be applied whenever a bookmark is added or modified."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Step 3. The user then executes the command `add n/JavaFX new scene u/https://stackoverflow.com/questions/29080759/` to bookmark"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "a question on StackOverflow. This bookmark matches the conditions for the autotag `Help`, so it is tagged."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "image::AutotagState2.png[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a `*autotag*` command:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "// TODO: make activity diagram"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ".The activity diagram has not been created yet"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "image::AutotagActivityDiagram.png[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How autotags are applied"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* **Alternative 1 (current choice):** Iterate through each autotag and bookmark, then apply tags to all bookmarks that match."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Cons: May have performance issues in terms of runtime, as bookmarks may be checked multiple times."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* **Alternative 2:** Check for changes in the bookmark list then edit tags accordingly."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Pros: Will be faster if most bookmarks are unchanged."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Cons: More complicated to implement."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to apply taggers to a bookmark list in Mark"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* **Alternative 1:** Modify individual bookmarks when adding tags."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Pros: Eliminates the need to reset Mark\u0027s bookmark list whenever taggers are applied."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Cons: Can cause unanticipated changes in other parts of the Model."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* **Alternative 2 (current choice):** Replace the whole bookmark list with a new list of bookmarks, some of which have been tagged."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Pros: Simple to implement, ensures immutability of bookmarks."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Cons: Inefficient to construct a new list each time a single bookmark is tagged."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* **Alternative 3:** Replace only those bookmarks that were tagged."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Pros: Minimises performance issues from creating a new bookmark list."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** Cons: More complicated to implement."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "// end::autotag[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "// tag::annotation[]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Annotation feature"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The annotation feature builds upon the structure of an offline document used to represent a _Readability-derived cache_."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Such an offline document is represented by `OfflineDocument`, which contains at least one `Paragraph`. As each annotation is targeted to an entire paragraph,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "we can simply add an annotation to a `Paragraph`. The annotation will be internally stored as an `annotation`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "You can view the class structure of the annotation feature in the Figure above."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "//TODO: link to annotation class diagram"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "There are three parts to the annotation feature:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Add an annotation (executed by `AddAnnotationCommand#execute()`)."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Delete an annotation (executed by `DeleteAnnotationCommand#execute()`)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Edit an annotation (executed by `EditAnnotationCommand#execute()`)."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "These executions are triggered by `annotation` command inputs entered into the `CommandBox`, which calls the respective command parser to create the command."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Subsequently, the appropriate `Paragraph`(s) is retrieved and the annotation is handled according to the command."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The following sequence diagram illustrates how the adding annotation operation works:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "image::AddAnnotationSequenceDiagram.png[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "NOTE: The lifeline for `AddAnnotationCommandParser` and `AddAnnotationCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "//TODO: after adding delete cmd, (highlight, note, both --\u003e stray paragrph)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "For the delete operation, instead of creating and adding an `Annotation` to the retrieved `Paragraph`, the part or the entire pre-existing `Annotation` of the `Paragraph` will be dereferenced from the `Paragraph`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "If the user requests to remove the entire annotation of the `Paragraph`, the `Annotation` is simply dereferenced and an `OfflineCommandResult` is returned."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "If the user requests to remove only the annotation note, the `AnnotationNote` of `Annotation` is dereferenced."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Otherwise, if the user requests to remove only the highlight, the entire annotation is dereferenced from the `Paragraph` and added to a newly created `PhantomParagraph`."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "NOTE: A `TrueParagraph`, whose content is from the `cache`, must be highlighted in order to have a note attached. `PhantomParagraph` is a temporary holding place for a `stray note` and does not contain content from the `cache`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "//TODO: edit -- add the other parts of the command (eg shift from one p to another); atm only edit note and highlight"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "//TODO: \u003cmay not do\u003e object diagram showing only paragraph and annotation for all three above?"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The edit operation can modify the content of the `AnnotationNote`, colour of `Highlight` and re-link a `stray note` to a `TrueParagraph`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The former two is simply done by changing the fields in `Annotation` of the `Paragraph` in query."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "To re-link a `stray note` from a `PhantomParagraph` to a `TrueParagraph`, the `Annotation` replaces any `Annotation` present in the `TrueParagraph` and the `PhantomParagraph` is destroyed."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The following activity diagram summarizes what happens when a user attempts to annotate their offline document:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "//TODO: activity diagram (and also for prev parts rmb to handle edge cases?)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "image::AnnotationActivityDiagram.png[]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "The following are a few design considerations made in deciding how to implement the annotation feature:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to structure the offline components to store annotations"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Each annotation is tagged to a paragraph and an offline document is composed of multiple paragraphs."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "A cached copy has the original cache of the website."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "There are hence a few alternatives in which we can combine these elements and store them:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* **Alternative 1 (current choice):** Let each `CachedCopy` have an `OfflineDocument` that consists of paragraphs with content parsed from the original cache. Each paragraph contains a annotation, if any."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** Cons: May have performance issues in terms of memory usage and overheads from layers of abstraction."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* **Alternative 2**: Let each cache keep only the original cache of the website. Use another class to store the annotations with the respective paragraph identifiers."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** Pros: Will use less memory since the content of the website is not duplicated."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** Cons: Not straightforward to implement. Stray notes will need a different implementation to order and store them. Objects not well abstracted."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "//TODO: need do? \u003d\u003d\u003d\u003d\u003d Aspect: How to save the"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "// end::annotation[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "openorclose"
        },
        "content": "// tag::folders[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003d\u003d\u003d Folders feature"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "openorclose"
        },
        "content": "A bookmark can be in a folder, and a folder can be nested within other folders for traditional directory organization."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "openorclose"
        },
        "content": "This mechanism is facilitated mainly by `Folder` and `FolderStructure`."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "openorclose"
        },
        "content": "`Folder` is simply another field in `Bookmark`, just like `Url` or `Name`, and has a single `String` property that contains the folder in which the bookmark is located."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "openorclose"
        },
        "content": "`FolderStructure` represents the hierarchy of folders, containing the folder it represents and its subfolders"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "openorclose"
        },
        "content": ".Class Diagram of the Folders component"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "openorclose"
        },
        "content": "image::FolderStructureClassDiagram.png[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Given below is an example usage scenario and how the folder structure behaves at each step."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Step 1. The user launches the application for the first time. The root `FolderStructure` will be initialized with the initial hierarchy in the stored data."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "openorclose"
        },
        "content": "image::FolderStructureState0.png[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Step 2. The user enters a `folder GER1000 p/Work` command to create a new `FolderStructure` in the subfolders of `work`. Starting from the `root`, a depth first search will be performed to locate `work`. When found, `ger1000` will be added to its subfolders."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "openorclose"
        },
        "content": "image::FolderStructureState1.png[]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "openorclose"
        },
        "content": "If the parent folder is not provided, the parent folder will default to `root`."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The following sequence diagram shows in more detail how the execution of `folder GER1000 p/Work` works:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "openorclose"
        },
        "content": "image::FolderSequenceDiagram.png[]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "openorclose"
        },
        "content": "NOTE: The lifeline for `AddFolderCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Finally, the user sees his folder added successfully in the folder hierarchy."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The following are a few design considerations made in deciding how to implement the folders feature:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the folder hierarchy is saved into storage."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* **Alternative 1 (current choice):** Saves bookmark folder as its own field, and the hierarchy as a separate data structure."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "openorclose"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "openorclose"
        },
        "content": "** Cons: Easy for model to get into invalid state (e.g. bookmark has a folder that is not in the hierarchy)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* **Alternative 2:** Change the bookmarks from being stored in a list to being stored as a hierarchy"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "openorclose"
        },
        "content": "** Pros: Single source of truth, its folder is simply where it\u0027s located"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "openorclose"
        },
        "content": "** Cons: The whole `BookmarkList` abstraction will have to be rewritten"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "openorclose"
        },
        "content": "// end::folders[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Reminder feature"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "A bookmark can have a reminder, and a reminder can be used to open the bookmark."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "This mechanism is facilitated by `Reminder` and `ReminderAssociation`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "`Reminder` contains a reminding time, the `Url` of the `Bookmark` and a `Note`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "`ReminderAssociation` represents the association between `Reminder` and `Bookmark`, containing"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " the relation from `Reminder` to `Bookmark` and `Reminder` to `Bookmark`."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ".Structure of the Reminder"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "image::ReminderAssociationDiagram.png[]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to represent the relationship between reminder and bookmark"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* **Alternative 1 (current choice):** Use two hashmaps to store both the relationship from reminder to bookmark and bookmark to reminder."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** Pros: More OOP and can easily find the relationship."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** Cons: More complex when doing any operation to a reminder. Need to check two hashmaps."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* **Alternative 2:** Reminder is a field of bookmark."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** Pros: Easier to implement."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "//TODO: Change this description"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** Cons: Reminder is a field of bookmark, so using a reminder to open the bookmark violate the relationship."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "// end::reminder[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "*Our target user*:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* needs to manage a significant number of bookmarks"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* needs to make notes on webpage content quite frequently"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* needs reminders to submit forms or visit websites"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* prefers desktop apps over other types"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* types fast and prefers typing over mouse input"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* likes using CLI apps"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "*Our value proposition*:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* manage bookmarks faster than a typical mouse/ GUI driven app"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* access and annotate webpage content without an Internet connection"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* set reminders to visit websites at specific times"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* minimize the need to manually categorize bookmarks"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"17%,\u003c17%,\u003c31%,\u003c35%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |new user |see usage instructions |learn how to use the app quickly"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |add a new bookmark |keep track of websites that I want to visit later"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |bookmark the current website being viewed |save the page without having to copy-and-paste the URL"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |delete a bookmark |remove bookmarks that I no longer need"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |find a bookmark by name, URL or tag |locate details of bookmarks without having to scroll through the entire list"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |edit a bookmark | make changes in case I type something wrongly or change my mind"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* * *` |user |undo the previous undoable command | reverse wrongly entered commands"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* * *` |user |redo the previous \u0027undo\u0027 command | reverse wrongly entered \u0027undo\u0027 command"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |add multiple tags to a bookmark | see what type of bookmark it is at a glance"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |automatically tag a bookmark based on certain conditions (such as its domain) |save time by avoiding the repeated tagging of bookmarks from the same domain"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user with many bookmarks |organise all the bookmarks in a hierarchical folder structure |find my bookmarks more easily"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |move a bookmark to a different folder |re-organize my bookmarks when my needs change"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* * *` |user |open a bookmark within the App |easily visit a website without switching to other windows"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |view an offline copy of the content of a bookmark |still access the bookmarked page when there is no internet access"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* * *` |user |update the offline copy of bookmarks manually or automatically |keep offline copies updated"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |keep old offline copies |can refer to them in case information gets removed from the webpage"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |remove an specific offline copy |free up storage space by removing \u003c\u003ccache,cached\u003e\u003e copies that I no longer need"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |highlight and annotate specific paragraphs in a bookmark |refer to the original content when reading my notes"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |edit highlighting and annotations |update my notes as I learn more about the content"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |remove highlighting and annotations |remove notes about content that is no longer important to me"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |add reminders for a bookmark |remember to submit online forms, to prepare for upcoming deadlines, etc."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |edit a reminder |adjust my reminders when deadlines change"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* * *` |user |delete a reminder |remove reminders if I make a mistake when entering them"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* * *` |user |export and import all the bookmark data |easily migrate to another computer"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* *` |user |favorite a bookmark |access it more easily in future"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* *` |user |mark a bookmark as \u0027read later\u0027 |know which bookmarks I have not read yet"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* *` |user |check my view history |see what websites I have visited"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "|`* *` |user |automatically clean up old or outdated bookmarks |keep my bookmark list up to date without having to look through it regularly"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "|`* *` |user |sort the bookmarks according to name |locate a specific bookmark"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "(For all use cases below, the *System* is the `Mark` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC01]]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC01 - List bookmarks"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "openorclose"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "openorclose"
        },
        "content": "1.  User requests to list bookmarks"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "openorclose"
        },
        "content": "2.  Mark shows a list of bookmarks"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC02]]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC02 - Add bookmark"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "openorclose"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "openorclose"
        },
        "content": "1.  User requests to add a bookmark"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "openorclose"
        },
        "content": "2.  User provides all the details of the bookmark to add"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "openorclose"
        },
        "content": "3.  Mark deletes the bookmark"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "openorclose"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* 2a. The given URL is invalid."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "openorclose"
        },
        "content": "** 2a1. Mark shows an error message."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC03]]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC03 - Delete bookmark"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "1.  User requests to list bookmarks"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "2.  Mark shows a list of bookmarks"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "3.  User requests to delete a specific bookmark in the list"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "4.  Mark deletes the bookmark"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "** 3a1. Mark shows an error message."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC04]]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC04 - Edit bookmark"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "1.  User requests to list bookmarks"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "openorclose"
        },
        "content": "2.  Mark shows a list of bookmarks"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "openorclose"
        },
        "content": "3.  User requests to edit a specific bookmark in the list"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "openorclose"
        },
        "content": "4.  Mark edits the bookmark"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "openorclose"
        },
        "content": "** 3a1. Mark shows an error message."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC05]]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC05 - Open bookmark"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "1.  User requests to list bookmarks"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "2.  Mark shows a list of bookmarks"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "3.  User requests to open a specific bookmark in the list"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "4.  Mark opens the bookmark"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "** 3a1. Mark shows an error message."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC06]]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC06 - Export bookmarks"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "1.  User requests to list bookmarks."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "2.  Mark shows a list of bookmarks."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "3.  User requests to export all the bookmarks in this list."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "4.  Mark creates a file containing the bookmarks on the hard disk."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* 3a. User specifies a file name to be written to."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC07]]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC07 - Import bookmarks"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "1.  User requests to import bookmarks from a given file."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "2.  Mark imports bookmarks from the specified file and displays the final list of bookmarks."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "+"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* 1a. No file with the specified file name is found."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "+"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** 1a1. Mark shows an error message."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "+"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* 1b. The file format is invalid."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "+"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "** 1b1. Mark shows an error message."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "+"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC08]]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC08 - Make a bookmark available offline"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "openorclose"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "openorclose"
        },
        "content": "1.  User requests to make a bookmark available offline"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "openorclose"
        },
        "content": "2.  Mark downloads the bookmark and converts it with Readability."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "openorclose"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* 2a. The bookmark\u0027s url is not available"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Mark shows an error message."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "openorclose"
        },
        "content": "** 3a1. Mark shows an error message."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC09]]"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC09 - Undo previous \u003c\u003cundoable-commands,undoable commands\u003e\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "1. User requests to undo the previous undoable command"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "2. Marks restores the list to the state before the previous"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "undoable command was executed"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* 1a. There is no command to undo."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Mark shows an error message."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC10]]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC10 - Redo previously undone commands"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "1. User requests to redo the previously undone command"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "2. Marks reverses the most recent ‘undo’ command"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* 1a. There is no previous `undo` command to redo."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Mark shows an error message."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "+"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC11]]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC11 - Browse the web"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "1. User requests to browse the web."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "2. Mark provides in-built web browser."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "3. User browses the web."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "+"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* 1a. Mark does not have internet access."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** 1a1. Mark tells user that there is no internet access and suggests that user sees cache."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "+"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC12]]"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC12 - Add bookmarks from web browser"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "1. User \u003c\u003cUC11,[.underline]#browses the web (UC11)#\u003e\u003e."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "2. User requests to bookmark the currently showing webpage."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "3. Mark uses current website\u0027s URL and \u003c\u003cUC02,[.underline]#adds bookmark (UC02)#\u003e\u003e."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "+"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC13]]"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Use case: UC13 - Annotate offline documents"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "1. User chooses bookmark document to annotate."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "2. Mark shows the annotated document."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "3. User annotates the document."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "4. Mark shows document with new annotations."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "+"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* 1a. Mark detects invalid bookmark index or non-existent document of bookmark."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** 1a1. Mark gives warning and requests for correct index."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** 1a2. User enters revised data."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Steps 1a1-1a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* 3a. Mark detects invalid paragraph index."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** 3a1. Mark gives warning and requests for correct paragraph index."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** 3a2. User enters new data."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Steps 3a1-3a2 are repeated until the data entered are correct."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "+"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* 3b. Mark detects invalid highlight colour."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "** 3b1. Mark gives warning and sets highlight colour to default colour."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "+"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC14]]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Use case: UC14 - Add a reminder"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "1. User requests to list bookmarks."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "2. Mark shows a list of bookmarks."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "3. User requests to add a reminder for a specific bookmark in the list."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "4. Mark shows the new reminder in the reminder list."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 3a. Mark detects invalid index."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** 3a1. Mark shows an error message."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 3b. Mark detects the specified bookmark already has a reminder."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** 3b1. Mark shows an error message."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 3c. Mark detects the time format is wrong."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** 3c1. Mark shows an error message."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC15]]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Use case: UC15 - Edit a reminder"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "1. Mark shows a list of reminders."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "2. User requests to edit a specified reminder in the list."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "3. Mark shows the edited reminder in the reminder list."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 2a. Mark detects invalid index."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** 2a1. Mark shows an error message."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 2b. Mark detects the time format is wrong."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** 2b1. Mark shows an error message."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case resumes from step 1."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC16]]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Use case: UC16 - Delete a reminder"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "1. Mark shows a list of reminders."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "2. User requests to delete a specified reminder in the list."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "3. Mark shows the edited reminder list."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 2a. Mark detects invalid index."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** 2a1. Mark shows an error message."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[UC17]]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Use case: UC17 - Sort the bookmark list"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "1. Mark shows a list of bookmarks."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "2. User requests to sort the list in the specified criterion."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "3. Mark shows the sorted bookmark list."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* 2a. Mark detects invalid criterion."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "** 2a1. Mark shows an error message."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "+"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ".  The product should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ".  The product should be able to hold up to 500 bookmarks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ".  The product\u0027s major features should not depend on Internet access."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ".  The project is expected to adhere to a schedule that delivers features in increments every two weeks."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[[cache]] Cache::"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The collection of offline copies of a specific bookmark"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[[undoable-commands]] Undoable commands::"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Commands that modify the bookmark list or reminders, which includes `add`, `edit`, `delete`, `clear`, `reminder`,"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`reminder edit`, and `reminder delete`"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Deleting a bookmark"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ". Deleting a bookmark while all bookmarks are listed"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ".. Prerequisites: List all bookmarks using the `list` command. Multiple bookmarks in the list."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "   Expected: First bookmark is deleted from the list. Details of the deleted bookmark shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "   Expected: No bookmark is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 191,
      "TSAI-HSIAO-HAN": 132,
      "openorclose": 136,
      "Na-Nazhou": 173,
      "kxyoke": 144,
      "-": 361
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d Mark - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 2,
      "-": 121
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d Mark - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "e.g. `seedu.mark.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "e.g. `seedu.mark.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "e.g. `seedu.mark.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 5,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003d Mark - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "By: `Team CS2103T-T13-4`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Mark is for those who *prefer to use a desktop app for managing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "bookmarks*. More importantly, it is *optimized for those who prefer to"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "work with a Command Line Interface* (CLI) while still having the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "benefits of a Graphical User Interface (GUI). If you can type fast, Mark"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "can get your bookmark organisation and note-taking done faster than"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "traditional GUI apps. Interested? Jump to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003c\u003cQuick Start\u003e\u003e to get"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "started. Enjoy!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Here are a few steps to get you started on Mark: +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ".  Download the latest `mark.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Mark."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Some example commands you can try:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *`list`* : lists all bookmarks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *`add u/https://git-scm.com/book/en/v2 n/Pro Git f/Tutorials`* : adds a bookmark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "named `Pro Git` to Mark."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *`delete 3`* : deletes the 3rd bookmark shown in the current list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "This section describes the main features of Mark and how to use them."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "E.g. In the command format `*add* u/URL`, `URL` is a parameter which can be used as `*add* u/https://luminus.nus.edu.sg`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Items in square brackets are optional. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "E.g `u/URL [t/TAG]` can be used as"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`u/https://luminus.nus.edu.sg t/NUS` or as `u/https://luminus.nus.edu.sg`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Default values for optional items are specified with an `\u003d` symbol. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "E.g. When `u/URL [t/TAG\u003dCS2103T]` is specified in the command format, the default value for the tag is `CS2103T` if not"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "it is not provided."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* Items with `...`​ after them can be used multiple times, including zero times. +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "E.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/module`,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`t/module t/read-later` etc."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Parameters can be in any order. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "E.g. if the command specifies `u/URL n/NAME`, `n/NAME u/URL` is also acceptable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Viewing help: *`help`*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Shows the list of commands in the bookmark manager."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: *`help`*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Adding a bookmark: *`add`*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Adds a bookmark to the bookmark manager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*add* u/URL n/NAME [r/REMARK] [f/FOLDER] [t/TAG]...​`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* A bookmark can have any number of tags (including 0)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* `FOLDER` must be an existing folder (see \u003c\u003cfolder\u003e\u003e)."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* The keyword `this` can be used in place of a URL to bookmark the current page,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "e.g. `*add* u/this n/Homepage`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*add* u/this n/Homepage` +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Bookmarks the current page and names it `Homepage`. The new bookmark contains"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "a default remark of \"-\" and is added to the root folder since they are not"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "specified."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*add* u/https://nus-cs2103-ay1920s1.github.io/website/ n/Module Website"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "f/CS2103T r/Contains textbook \u0026 important deadlines` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmarks the given website, names it `Module Website`, and adds it to the folder `CS2103T`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The new bookmark\u0027s remark is \"Contains textbook \u0026 important deadlines\"."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*add* u/www.youtube.com/watch?v\u003d9AMcN-wkspU n/IntelliJ Tips and Tricks t/video t/watch-later`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Bookmarks the given website, names it `IntelliJ Tips and Tricks`. The new bookmark\u0027s tags include"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\"video\" and \"watch-later\"."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[[folder]]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Adding a new folder: *`folder`*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Creates a new folder for organizing bookmarks into."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Format: `*folder* FOLDER_NAME [p/PARENT_FOLDER]`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* `FOLDER_NAME` must not already exist."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* `PARENT_FOLDER` must be an existing folder."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* If `PARENT_FOLDER` is not specified, `FOLDER_NAME` will have no parent and will be placed at the root."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*folder* CS2103 p/NUS` +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Creates a new folder named `CS2103` under the parent folder `NUS`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Deleting a folder: *`folder delete`*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "//TODO: What happens to the bookmarks under the folder?"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Deletes the specified folder and its subfolders."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Format: `*folder delete* FOLDER_NAME`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* `FOLDER_NAME` must be an existing folder."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* If `FOLDER_NAME` contains other folders, those folders will be deleted as well."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*folder delete* CS2103` +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Deletes the folder named `CS2103` and all of its subfolders."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Listing all bookmarks: *`list`*"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Shows a list of all bookmarks in the bookmark manager."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*list*`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[[editing-bookmarks]]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Editing a bookmark: *`edit`*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Edits an existing bookmark in the bookmark manager."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*edit* INDEX [u/URL] [n/NAME] [r/REMARK] [f/FOLDER] [t/TAG]...`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* The bookmark at the specified `INDEX` will be edited. The index refers to the index"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "openorclose"
        },
        "content": "number shown in the displayed bookmark list. The index must be a"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "positive integer `1`, `2`, `3`, …​"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* When editing tags, the existing tags of the bookmark will be removed i.e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "openorclose"
        },
        "content": "adding of tags is not cumulative."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* You can remove all the bookmark’s tags by typing `t/` without specifying"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "openorclose"
        },
        "content": "any tags after it."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*edit* 1 n/CS2103T Website f/AY1920-S1` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Edits the name and folder of the 1st bookmark to be CS2103T Website and AY1920-S1 respectively."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*edit* 2 t/` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Clears all existing tags from the 2nd bookmark."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[[locating-bookmarks]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Locating bookmarks by name, URL, tag or folder: *`find`*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Finds bookmarks that contain any of the given keywords in their name or"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "openorclose"
        },
        "content": "URL, or that are tagged with the given tag(s)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*find* [KEYWORD]... [t/TAG]... [f/FOLDER]...`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* At least one keyword, tag or folder must be provided."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* Keyword search is case insensitive. e.g video will match Video."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* The order of the keywords does not matter. e.g. `Website Video` will match `Video Website`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* Keywords are only searched in the URL and name."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* For keywords, words will be partially matched e.g. `Video` will match `Videos`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* For tags and folders, words will be fully matched."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* Bookmarks matching at least one search criterion will be returned (i.e. OR search)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*find* Website Video t/Fun` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Returns all the bookmarks with CS2103T or Video in its name or URL, and all bookmarks tagged with Fun."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*find* CS2103T CS2101 CS2105` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Returns any bookmark with CS2103T, CS2101, or CS2105 in its name or in its URL."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*find* GitHub t/School f/CS2103T` +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Returns any bookmark with the tag School or folder CS2103T or that contains github in either name or URL."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Deleting a bookmark: *`delete`*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Deletes the specified bookmark from the bookmark manager."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*delete* INDEX`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* Deletes the bookmark at the specified INDEX."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* The index refers to the index number shown in the displayed bookmark list."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* The index must be a positive integer `1`, `2`, `3`, …​"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*list*` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "`*delete* 2` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Deletes the 2nd bookmark in the bookmark manager."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*find* luminus` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "`*delete* 1` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Deletes the 1st bookmark in the results of the find command."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Opening a bookmark: *`goto`*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Opens the specified the bookmark from the bookmark manager."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*goto* INDEX`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* Opens the bookmark at the specified INDEX."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* The index refers to the index number shown in the displayed bookmark list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* The index must be a positive integer `1`, `2`, `3`, …​"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*list*` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "`*goto* 1` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Opens the first bookmark in the bookmark manager."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "//TODO: Not supported yet"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Opening a bookmark from a reminder: *`goto reminder`*"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Opens the related bookmark of the specified reminder from the bookmark manager."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*goto reminder* INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* INDEX is the index of the reminder as viewed on the dashboard."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* The index must be a positive integer `1`, `2`, `3`, …​"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*goto reminder* 1` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "If reminder 1 points to bookmark 5, this command is equivalent to"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "`*goto* 5`. (i.e. opens the 5th bookmark in the bookmark manager.)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Adding a bookmark to Favorites: *`favorite|fav`*"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Adds a Favorite tag to the specified bookmark."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*favorite|fav* INDEX`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `fav` is an alias for `favorite`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* Removing the Favorite tag is the same as removing a normal tag from a bookmark (see \u003c\u003cediting-bookmarks\u003e\u003e)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* The index refers to the index number shown in the displayed bookmark list."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* The index must be a positive integer `1`, `2`, `3`, …​"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*favorite* 1` +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Adds a Favorite tag to the first bookmark in the bookmark manager."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*fav* 2` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Adds a Favorite tag to the second bookmark in the bookmark manager."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Clearing all entries: *`clear`*"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Clears all entries from the bookmark manager."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*clear*`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Undoing previous commands: *`undo`*"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Restores the list to the state before the given number of previous undoable commands were"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "openorclose"
        },
        "content": "executed."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*undo* [STEP\u003d1]`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "//TODO:Check whether reminder supports undo/redo, include other"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "//undoable commands as well"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* Undoable commands include commands that modify the bookmark list or"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "reminders, which includes `add`, `edit`, `delete`, `clear`, `reminder`,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "`reminder edit`, `reminder delete`, etc)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* The step must be a positive integer `1`, `2`, `3`, …​"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*undo*` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Restores the list to the state before the previous undoable command was executed."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Redoing previously undone commands: *`redo`*"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Reverses the given number of `*undo*` commands."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*redo* [STEP\u003d1]`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* The step must be a positive integer `1`, `2`, `3`, …​"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*redo*` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Reverses the most recent `*undo*` command."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Exiting the program: *`exit`*"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*exit*`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark data are saved in the hard disk automatically after any command"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "that changes the data."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "There is no need to save data manually. It is also possible to save"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "specific bookmarks with a different file name using the command `*export*`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "openorclose"
        },
        "content": "(see \u003c\u003cexporting-bookmarks\u003e\u003e)."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[[exporting-bookmarks]]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Exporting bookmarks: *`export`*"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Exports the currently displayed list of bookmarks to the hard disk."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*export* [FILENAME]`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* {blank}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "openorclose"
        },
        "content": "+"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`FILENAME` should not include the file extension. E.g. `myBookmarks` and not"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`myBookmarks.json`"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* If no file name is specified, the default file name is the name of the"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "first bookmark followed by “AndOtherBookmarks”. E.g."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`CS2103TWebsiteAndOtherBookmarks.json`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* The file `FILENAME` is overwritten if it already exists."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* Bookmarks are exported to the folder `[applicationHome]/data/bookmarks/`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*list*` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "`*export* myBookmarks` +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Exports all bookmarks in the bookmark manager to a file named"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`myBookmarks.json`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*find* luminus` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "`*export*` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Exports all bookmarks found using `*find*` (e.g. `cs2101Luminus`,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`cs2103TLuminus`, `cs2105Luminus`) to a file named"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`cs2101LuminusAndOtherBookmarks.json`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*find* t/favorite` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " `*export* favorites` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Exports all bookmarks tagged with `favorite` to a file named"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`favorites.json`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Importing bookmarks: *`import`*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Imports bookmarks from files on the hard disk. A bookmark is, by default, imported"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "into a folder with the same name as its original folder (even if the folder"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "structure is different). If no such folder is found, the bookmark will be imported"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "into the folder `ImportedBookmarks`."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Format: `*import* FILENAME`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `FILENAME` is case sensitive and should not include the file extension. E.g."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`myBookmarks` and not `myBookmarks.json`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `FILENAME.json` should be a file stored in the folder"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`[applicationHome]/data/bookmarks/`."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* The file corresponding to `FILENAME` should have a valid format, identical"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "to the JSON files produced by `*export*`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*import* myBookmarks` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Assuming `mark.jar` is stored in the folder `mark`, imports bookmarks from the"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "file `mark/data/bookmarks/myBookmarks.json`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Creating an automatic tag: *`autotag`*"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Creates a tag that will be automatically applied to bookmarks which match"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "openorclose"
        },
        "content": "the given conditions."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Format: `*autotag* TAG_NAME [n/NAME_KEYWORD]... [nn/NOT_NAME_KEYWORD]..."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[u/URL_KEYWORD]... [nu/NOT_URL_KEYWORD]... [f/FOLDER]... [nf/NOT_FOLDER]..."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[t/TAG]... [nt/NOT_TAG]...`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* At least one condition (`n/`, `nn/`, `u/`,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "`nu/`, `f/`, `nf/`, `t/`, or `nt/`) must be specified."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* If an autotag with name `TAG_NAME` already exists, the user is asked"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "whether conditions for `TAG_NAME` should be overwritten."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* An autotag is applied when a bookmark matches all of its conditions."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Hence, if conditions are contradictory, no bookmarks will be tagged by"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "this autotag. E.g. no bookmarks will match the conditions `u/github.com/mark"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "nu/github.com/mark`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `NAME_KEYWORD` and `URL_KEYWORD` are used to match bookmarks in the same way"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "as the keywords in `*find*` (see \u003c\u003clocating-bookmarks\u003e\u003e). E.g. `.nus.edu.sg`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* `NOT_NAME_KEYWORD`, `NOT_URL_KEYWORD`, `NOT_FOLDER`, and `NOT_TAG` are name keywords,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "URL keywords, folders, or tags that bookmarks to be tagged should *not* match."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* The tag `TAG_NAME` is still a normal tag. E.g. if an autotag `YouTube` matches"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "bookmarks with URLs containing `youtube.com`, other bookmarks can still be"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "tagged with the tag `YouTube`."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*autotag* Miscellaneous f/NUS nt/academic nt/admin` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " Creates an autotag that adds the tag `Miscellaneous` to all bookmarks that are"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "in the folder `NUS` but are not tagged with `academic` or `admin`."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*autotag* Luminus u/luminus` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " Creates an autotag that adds the tag `Luminus` to all bookmarks with URLs"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "containing `luminus`."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Saving an offline copy: *`cache`*"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Saves the bookmarked website locally for offline viewing."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*cache* INDEX [s/SAVE_NOW] [u/AUTO_UPDATE] [d/VERSION]`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* `INDEX` is the bookmark that you want to save a local copy of"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* `SHOULD_AUTOUPDATE` (default false) if true, it will check daily for any"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "openorclose"
        },
        "content": "updates. Any old versions will be archived and users will be able to see"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "openorclose"
        },
        "content": "the different versions and delete them / name them"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* If `AUTO_UPDATE` is missing, will not auto update."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "openorclose"
        },
        "content": "* `VERSION` is the version number to be deleted."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "openorclose"
        },
        "content": "****"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*cache* 1 s/true u/true` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Saves the bookmark at index 1 locally, and updates it daily."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*cache* 1` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Show the list of cached copies."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*cache* 1 d/2` +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Deletes the cached version at the second index."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*cache* 1 u/true` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Manually save a new copy of the site."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Making annotations on an offline copy: *`annotate`*"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Adds new annotations on locally saved, offline version of the bookmarked"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "website. When this command is given, the UI will switch to the offline tab showing the results of your command."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "With this command, you can highlight a paragraph on the offline document and optionally attach a supplementary"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "note to said paragraph. (Notes can be added to justify the highlight or as"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "openorclose"
        },
        "content": "content-relevant notes for future reference to bookmark)."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Overwriting an existing note is possible with this command."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*annotate* INDEX p/P_NUM [n/NOTES] [h/HIGHLIGHT_COLOUR\u003dyellow]`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `INDEX` is the bookmark that you want to annotate offline version of."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `INDEX` is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `P_NUM` is the number of the paragraph to be marked."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `P_NUM` is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `NOTES` is the content of notes to add."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `HIGHLIGHT_COLOUR` is either `orange`, `pink`, `green` or `yellow`. This selects"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "openorclose"
        },
        "content": "the highlight colour to mark out paragraphs. If no colour is specified,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "yellow is the default colour."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "If colour provided is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate* 1 p/2 n/summary of paragraph h/yellow` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In offline copy of bookmark 1, highlights paragraph 2 yellow and"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "attaches note with content “summary of paragraph” to the paragraph."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate* 1 p/2 h/pink` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In offline copy of bookmark 1, overwrites any existing highlight and"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "highlights paragraph 2 with pink. Any notes attached remain attached."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate* 1 p/2 n/change or add note content` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In offline copy of bookmark 1, if paragraph 2 had pre-existing note,"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "changes note attached to paragraph 2 to note with content “change or add note content”. Highlight"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "colour remains the same. Otherwise, paragraph 2 will be highlighted yellow and"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "a new note with content \"change or add note content\" will be added to the paragraph."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Deleting annotations on an offline copy: *`annotate delete`*"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Deletes selected highlights or notes from the offline copy of the given bookmarked website."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "When this command is given, the UI will switch to the offline tab showing the results of your command."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "You can choose to remove just the notes and/or highlight of a paragraph, or clear all annotations"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "on an offline copy to revert it to clean slate. You can also choose to remove a note from the"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c\u003cstray-notes,_Stray Notes Section_\u003e\u003e. If given paragraph does not have any notes to remove, nothing is performed."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*annotate delete* INDEX [p/P_NUM] [n/KEEP_NOTES\u003dfalse] [h/KEEP_HIGHLIGHT\u003dfalse]`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `INDEX` is the bookmark that you want to remove annotations of."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `INDEX` is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `P_NUM` is the paragraph number or identifier of stray notes to remove. If `P_NUM` is not provided, all annotations"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "will be cleared, reverting the offline document to a clean slate."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " In the event that an identifier to a stray note is given, the remaining optional fields will be ignored,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " i.e. that stray note will be deleted."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `P_NUM` is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `KEEP_NOTES` is either `true` or `false`. If `true`, the notes of the paragraph will not be deleted (but"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "if the paragraph\u0027s highlight is removed, the notes will be moved to the \u003c\u003cstray-notes,_Stray Notes Section_\u003e\u003e). Otherwise,"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "the notes will be removed. `KEEP_NOTES` is `false` by default."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `KEEP_NOTES` is invalid, `KEEP_NOTES` will be set to `true`."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `KEEP_HIGHLIGHT` is either `true` or `false`. If `true`, the highlight of the paragraph will not be deleted"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "(if the paragraph\u0027s note is not removed, the notes will be moved to the \u003c\u003cstray-notes,_Stray Notes Section_\u003e\u003e). Otherwise,"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "the highlight will be removed. `KEEP_HIGHLIGHT` is `false` by default."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `KEEP_HIGHLIGHT`` is invalid, `KEEP_HIGHLIGHT` will be set to `true`."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate delete* 1 p/2` +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, removes both the note and highlight from paragraph 2."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate delete* 1 p/2 n/true` +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, removes the highlight of paragraph 2 and moves the note to _Stray Note Section_."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate delete* 1 p/2 h/true` +"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, removes the note of paragraph 2, leaving the highlight untouched."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate delete* 1 p/2 n/true h/true` +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Nothing happens as both the note and highlight are left alone."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate delete* 2 p/S1` +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Deletes stray note S1 from the offline copy of bookmark 2."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate delete* 1` +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Removes all annotations of the offline copy of bookmark 1."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Modifying annotations on an offline copy: *`annotate edit`*"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Modifies existing annotations on the offline version of the bookmarked"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "website. When this command is given, the UI will switch to the offline tab showing the results of your command."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "With this command, you can choose to overwrite the existing notes to a particular paragraph with another note, or"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "choose to move notes from a paragraph to another paragraph. This command also supports moving"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "a stray note (see Glossary) back to the main text by specifying which paragraph to move it to."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*annotate edit* INDEX p/P_NUM [to/NEW_P_NUM] [n/NOTES] [h/HIGHLIGHT_COLOUR]`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `INDEX` is the bookmark that you want to annotate offline version of."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `INDEX` is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `P_NUM` is the number of the paragraph or stray note identifier whose annotation is to be edited."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `P_NUM` is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `NEW_P_NUM` is the number of the paragraph to move any annotation to."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " If `NEW_P_NUM` is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `NOTES` is the content of notes to change to. Whenever notes is given, it"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " replaces any pre-existing note to paragraph `P_NUM`, if applicable."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `HIGHLIGHT_COLOUR` is either `orange`, `pink`, `green` or `yellow`. This selects"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "the highlight colour to mark out paragraphs. When no colour is specified, if source paragraph is"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "already highlighted, the highlight stays the same colour; otherwise the default colour yellow will be used."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "If colour provided is invalid, a warning message will be displayed."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "If `HIGHLIGHT_COLOUR` is specified with a stray note identifier, nothing happens."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate edit* 1 p/2 to/3` +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, moves both highlight and notes from paragraph 2 to paragraph 3. Highlight of paragraph 2"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "will be removed."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate edit* 1 p/2 to/3 h/orange` +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, moves note from paragraph 2 to paragraph 3. Highlight of paragraph 2"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "will be removed and paragraph 3 will be highlighted with orange."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate edit* 1 p/1 n/new notes` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, replaces the content of the note for paragraph 1 with \"new notes\"."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate edit* 1 p/1 h/yellow` +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, changes the highlight colour to yellow for paragraph 1."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate edit* 1 S2 p/1` +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, moves stray notes S2 to paragraph 1. If paragraph 1 had a highlight, highlight"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "remains and overwrite any existing note with S2 note content. If not default highlight colour yellow is used."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*annotate edit* 1 p/2 to/3 n/changing and moving notes` +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "In the offline copy of bookmark 1, paragraph 3 is annotated with the highlight of paragraph 2 and"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "note with content \"changing and moving notes\". Annotation on paragraph 2 is removed."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Viewing an annotated offline copy: *`offline`*"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Switches to offline tab and shows offline copy of a selected bookmark. The offline view tab will"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "openorclose"
        },
        "content": "show the latest offline copy with annotations by default."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*offline* INDEX [v/VERSION \u003d current]`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `INDEX` is the bookmark that you want to view notes of"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * `VERSION` is the version of the cached version to show. Default is the"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "openorclose"
        },
        "content": "current version"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "****"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*offline* 1` +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Shows annotated offline copy of bookmark 1."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*offline* 1 v/2` +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Shows the 2nd version of offline copy of bookmark 1. If it is annotated,"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "openorclose"
        },
        "content": "then annotations are shown as well."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Adding a reminder: *`reminder`*"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Adds a reminder of a specified bookmark. You can set the time for the reminder."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*reminder* INDEX t/TIME_DATE [n/NOTE\u003dOpen]`"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "****"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `INDEX` is the index of the bookmark that you want to add with a reminder."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * `TIME_DATE` follows `_dd/mm/yyyy HHMM_` format."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `NOTE` is the description of the reminder, the default value is Open."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "****"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* `*reminder* 1 t/02/07/2019 2359` +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Adds a reminder for bookmark 1, and sets the time of the reminder as 23:59 of 02/07/2019."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "It reminds you to open the bookmark."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* `*reminder* 1 t/02/07/2019 2359 n/Read announcements` +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Adds a reminder for bookmark 1, and sets the time of the reminder as 23:59 of 02/07/2019."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "The reminder reminds you to read announcements."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Editing a reminder: *`reminder edit`*"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Edits the reminder at the specified index. You can edit either the time or the note of the reminder."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*reminder edit* INDEX [t/TIME_DATE] [n/NOTE]`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "****"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `INDEX` is the index of the reminder you want to edit on the dashboard."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* `TIME_DATE` is the time you want to edit. The time follows `_dd/mm/yyyy HHMM_` format."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `NOTE` is the description of the reminder that you want to edit."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "****"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* `*reminder edit* 1 t/02/07/2019 2359` +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Edits the reminder of index 1. Reset the time of the reminder to 23:59 of 02/07/2019."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "* `*reminder edit* 1 t/02/07/2019 2359 n/Check daily news` +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Edits the reminder of index 1. Reset the time of the reminder to 23:59 of 02/07/2019."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Reset the note to Check daily news."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Deleting a reminder: *`reminder delete`*"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Deletes the the reminder at the specified index."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*reminder delete* INDEX`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "****"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `INDEX` is the index of the reminder you want to delete on the dashboard."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "****"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*reminder delete* 1` +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Delete the reminder of index 1."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Expanding the folder hierarchy: *`expand`*"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Expands the folder hierarchy by the specified number of levels."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*expand* [LEVEL]`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `LEVEL` should be an integer. If it is more than zero, folder hierarchy"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "will expand by `LEVEL` number of levels. If `LEVEL` is less than zero,"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "folder hierarchy will collapse by the given number of levels. If `LEVEL`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "openorclose"
        },
        "content": "is zero, nothing happens."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* Current level of display + `LEVEL` must be positive and less than or equal"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "to the maximum number of levels."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* If `LEVEL` is not specified, expand to the maximum number of levels."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*expand* 3` +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Expands the folder hierarchy by 3 levels."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d\u003d Collapsing the folder hierarchy: *`collapse`*"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Collapses the folder hierarchy by the specified number of levels."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*collapse* [LEVEL]`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `LEVEL` should be an integer. If it is more than zero, folder hierarchy"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "will collapse by `LEVEL` number of levels. If `LEVEL` is less than zero,"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "folder hierarchy will expand by the given number of levels. If `LEVEL` is"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "openorclose"
        },
        "content": "zero, nothing happens."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* Current level of display + `LEVEL` must be positive and less than or equal"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "to the maximum number of levels of the folder hierarchy."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* If `LEVEL` is not specified, collapse to show only one level of folders."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*collapse* 1` +"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Collapses the folder hierarchy by 1 level."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003d\u003d\u003d Switching \u003c\u003cTabs,tabs\u003e\u003e: *`tab`*"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Switches the current app view to the tab that corresponds to the given"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "index. For your convenience, you can use keywords `dash`, `on` or `off` instead of an index."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Format: `*tab* INDEX` or `*tab* KEYWORD`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `INDEX` is `1`, `2` or `3`, which correspond to the"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003c\u003cDashboard,Dashboard\u003e\u003e, Online, and Offline tabs respectively."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `KEYWORD` is `dash`, `on` or `off`, which correspond to the"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c\u003cDashboard,Dashboard\u003e\u003e, Online, and Offline tabs respectively."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*tab* 1` +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Goes to the \u003c\u003cDashboard,Dashboard\u003e\u003e tab."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*tab* on` +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Goes to the Online tab which is a web view."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* `*tab* 3` +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Goes to the Offline tab which shows the offline copy of bookmarks."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "\u003d\u003d\u003d Sorting bookmarks: `[coming in v2.0]`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Sorts the displayed bookmarks according to different criterion (name,"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "order added) and displays them as a list."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Format: `*sort* [CRITERION]`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `CRITERION` is the field you use to sort. Acceptable values of `CRITERION`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "are: *name* and *default*. *default* is sorting at the order when the bookmark is added."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `CRITERION` is case insensitive, e.g. both URL and url are acceptable"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "criterion."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "****"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*sort* name` +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Lists all the bookmarks based on name/alphabetical order."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* `*sort* default` +"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Sort all the bookmarks based on the order they were added."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Automatically completing partially typed commands `[coming in v2.0]`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Automatically fills in partially typed commands if the command is unique."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "\u003d\u003d\u003d Sharing bookmarks and notes via Email/ Telegram `[coming in v2.0]`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Shares your bookmarks and notes with your friends via Email or Telegram."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*How do I transfer my data to another Computer?*"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "the data of your previous Mark folder."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "*What are [[Tabs]] Tabs?*"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Different user displays. There are three tabs: dashboard, online view"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "openorclose"
        },
        "content": "(web browser), and offline view (caches and notes)."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[#imgId-dashboard]"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ".Mark\u0027s Dashboard Tab View"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "image::ui-screenshots/uimockup1_dashboard.png[@Dashboard Tab View, 600, 400]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[#imgId-online]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ".Mark\u0027s Online Tab View"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "image::ui-screenshots/uimockup1_online.png[@Online Tab View, 600, 400]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[#imgId-offline]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ".Mark\u0027s Offline Tab View"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "image::ui-screenshots/uimockup1_offline.png[@Offline Tab View, 600, 400]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "****"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "_{ more coming soon }_"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "This glossary aims to provide a definition for the special vocabulary used in this user guide."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[[annotation]] Annotation::"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "A note or highlight that is made on an \u003c\u003coffline-copy, offline copy\u003e\u003e of a bookmark."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[[bookmark]] Bookmark::"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "A saved shortcut to a website. In Mark, a bookmark can contain other information besides the website URL,"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "such as reminders, \u003c\u003coffline-copy, offline copies\u003e\u003e and \u003c\u003cannotation, annotations\u003e\u003e."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[[dashboard]] Dashboard::"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "openorclose"
        },
        "content": "The default tab in view when the application starts. The dashboard"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "openorclose"
        },
        "content": "contains a help section (command summary), favorite tags, current"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "openorclose"
        },
        "content": "reminders, and a view of the folder hierarchy for bookmarks."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[[folder-hierarchy]] Folder Hierarchy::"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "The structure of folders in Mark. This is displayed in the dashboard tab when the application starts."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[[offline-copy]] Offline copy::"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "An copy of a bookmarked website that is used for offline viewing. It is stored as a HTML file on the computer."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "[[stray-notes]] Stray notes::"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Annotated notes that are not attached to an existing paragraph are described as stray."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Stray notes are found in the _Stray Notes Section_ at the bottom of the _Notes_ column on the offline, annotated copy."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "//TODO: Check"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Help*: `*help*`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *Add*: `*add* u/URL n/NAME [r/REMARK] [f/FOLDER] [t/TAG]…​`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *List*: `*list*`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *Edit*: `*edit* INDEX [u/URL] [n/NAME] [r/REMARK] [f/FOLDER] [t/TAG]...​`"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *Find*: `*find* [KEYWORD]... [t/TAG]... [f/FOLDER]...`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Delete*: `*delete* INDEX`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *Goto*: `*goto* INDEX`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Goto*: `*goto reminder* INDEX`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *Favorite*: `*favorite|fav* INDEX`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Clear*: `*clear*`"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *Undo*: `*undo* [STEP\u003d1]`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "* *Redo*: `*redo* [STEP\u003d1]`"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Exit*: `*exit*`"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Export*: `*export* [FILENAME]`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Import*: `*import* FILENAME [MORE_FILENAMES]...`"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "* *Autotag*: `*autotag* TAG_NAME [n/NAME_KEYWORD]... [nn/NOT_NAME_KEYWORD]... [u/URL_KEYWORD]..."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[nu/NOT_URL_KEYWORD]... [f/FOLDER]... [nf/NOT_FOLDER]... [t/TAG]... [nt/NOT_TAG]...`"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Cache*: `*cache* INDEX [s/SAVE_NOW] [u/AUTO_UPDATE] [d/VERSION]`"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Annotate (add)*: `*annotate* INDEX p/P_NUM [n/NOTES] [h/HIGHLIGHT_COLOUR\u003dyellow]`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Annotate (delete)*: `*annotate delete* INDEX [p/P_NUM] [n/KEEP_NOTES\u003dfalse] [h/KEEP_HIGHLIGHT\u003dfalse]`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Annotate (edit)*: `*annotate edit* INDEX p/P_NUM [to/NEW_P_NUM] [n/NOTES] [h/HIGHLIGHT_COLOUR]`"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Offline*: `*offline* INDEX [v/VERSION\u003dcurrent]`"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Reminder*: `*reminder* INDEX t/TIME_DATE [n/NOTE\u003dOpen]`"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Reminder*: `*reminder edit* INDEX [t/TIME_DATE] [n/NOTE]`"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Reminder*: `*reminder delete* INDEX`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Sort*: `*sort* [CRITERION]`"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Expand*: `*expand* [LEVEL]`"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Collapse*: `*collapse* [LEVEL]`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "* *Tab*: `*tab* INDEX`"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 103,
      "openorclose": 215,
      "TSAI-HSIAO-HAN": 37,
      "Na-Nazhou": 159,
      "kxyoke": 251,
      "-": 105
    }
  },
  {
    "path": "docs/diagrams/AddAnnotationSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \":MarkParser\" as MarkParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \":AddAnnotationCommandParser\" as AddAnnotationCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \"a:AddAnnotationCommand\" as AddAnnotationCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \":OfflineCommandResult\" as OfflineCommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \"b:Bookmark\" as Bookmark MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \"doc:OfflineDocument\" as OfflineDocument MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \"an:Annotation\" as Annotation MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "participant \":TrueParagraph\" as TrueParagraph MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[-\u003e LogicManager : execute(\"annotate 1 p/p1 n/some remark\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "LogicManager -\u003e MarkParser : parseCommand(\"annotate \\n1 p/p1 n/some remark\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate MarkParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "create AddAnnotationCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MarkParser -\u003e AddAnnotationCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate AddAnnotationCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommandParser --\u003e MarkParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate AddAnnotationCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MarkParser -\u003e AddAnnotationCommandParser : parse(\"1 p/p1 n/a remark\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate AddAnnotationCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "create AddAnnotationCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommandParser -\u003e AddAnnotationCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate AddAnnotationCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommand --\u003e AddAnnotationCommandParser : a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate AddAnnotationCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommandParser --\u003e MarkParser : a"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate AddAnnotationCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommandParser -[hidden]-\u003e MarkParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "destroy AddAnnotationCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MarkParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate MarkParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "LogicManager -\u003e AddAnnotationCommand : execute()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate AddAnnotationCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommand -\u003e Model : getFilteredBookmarkList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Model --\u003e AddAnnotationCommand : b"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommand -\u003e Bookmark : getCachedCopyOfflineDoc(index, cacheVersion)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate Bookmark"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Bookmark --\u003e AddAnnotationCommand : doc"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate Bookmark"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "create Annotation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommand -\u003e Annotation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate Annotation"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Annotation --\u003e AddAnnotationCommand : an"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate Annotation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommand -\u003e OfflineDocument : addAnnotation(pid, an)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate OfflineDocument"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "OfflineDocument -\u003e TrueParagraph : addAnnotation(an)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate TrueParagraph"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "TrueParagraph --\u003e OfflineDocument"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate TrueParagraph"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "OfflineDocument --\u003e AddAnnotationCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate OfflineDocument"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "create OfflineCommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommand -\u003e OfflineCommandResult"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "activate OfflineCommandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "OfflineCommandResult --\u003e AddAnnotationCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate OfflineCommandResult"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AddAnnotationCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate AddAnnotationCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "destroy AddAnnotationCommand"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 100
    }
  },
  {
    "path": "docs/diagrams/AnnotationActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ":User executes annotate command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ":Mark retrieves bookmark in query;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ":Mark retrieves cache copy in query;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ":Mark retrieves offline document of cache copy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ":Retrieve paragraph(s) in query;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "if () then ([command adds annotation])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    :Add annotation to paragraph;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    if () then ([command deletes annotation])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if () then ([delete only highlight])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            :Make annotation of paragraph stray;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if () then ([delete only annotation note])"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                :Remove note from annotation of paragraph;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                :Remove annotation from paragraph;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    else ([command edits annotation])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if () then ([edit highlight or note content])"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            :Modify annotation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        else ([else])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if () then ([is stray note])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                :Move stray note to other paragraph;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                :Destroy (phantom) paragraph;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                :Move note to other paragraph;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "endif"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "stop"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 39
    }
  },
  {
    "path": "docs/diagrams/AnnotationPackageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Package Annotation {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Interface Paragraph \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class AnnotationNote"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Highlight"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class OfflineDocument"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Paragraph"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class ParagraphContent"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class ParagraphIdentifier"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class PhantomParagraph"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class TrueParagraph"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "HiddenOutside ..\u003e OfflineDocument"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "OfflineDocument *--\u003e \"*\" Paragraph"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "TrueParagraph .up.|\u003e Paragraph"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "PhantomParagraph .up.|\u003e Paragraph"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "PhantomParagraph *--\u003e \"1\" ParagraphIdentifier"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "PhantomParagraph *--\u003e \"0..1\" AnnotationNote"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "TrueParagraph *--\u003e \"1\" ParagraphIdentifier"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "TrueParagraph *--\u003e \"1\" ParagraphContent"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "TrueParagraph *--\u003e \"0..1\" AnnotationNote"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "TrueParagraph *--\u003e \"0..1\" Highlight"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 34
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteBookmark(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveMark(Mark)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/AutotagSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "participant \":MarkParser\" as MarkParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "participant \"a:AutotagCommand\" as AutotagCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "participant \":VersionedMark\" as VersionedMark MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "box Autotag MODEL_COLOR_T2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "participant \":AutotagController\" as AutotagController MODEL_COLOR"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "participant \":SelectiveBookmarkTagger\" as SelectiveBookmarkTagger MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[-\u003e LogicManager : execute(autotag)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "LogicManager -\u003e MarkParser : parseCommand(autotag)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate MarkParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "MarkParser -\u003e AutotagCommand : new AutotagCommand(tagger)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate AutotagCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagCommand --\u003e MarkParser : a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate AutotagCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "MarkParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate MarkParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "LogicManager -\u003e AutotagCommand : execute()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate AutotagCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagCommand -\u003e Model : hasTagger()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Model --\u003e AutotagCommand : false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagCommand -\u003e Model : addTagger(tagger)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Model -\u003e VersionedMark : addTagger(tagger)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate VersionedMark"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark -\u003e AutotagController : addTagger(tagger)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate AutotagController"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagController --\u003e VersionedMark"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate AutotagController"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark --\u003e Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate VersionedMark"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Model --\u003e AutotagCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagCommand -\u003e Model : applyAllTaggers()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Model -\u003e VersionedMark : applyAllTaggers()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate VersionedMark"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark -\u003e VersionedMark : getBookmarkList()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate VersionedMark"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark --\u003e VersionedMark : list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate VersionedMark"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark -\u003e AutotagController : applyTaggersToList(list)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate AutotagController"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "loop bookmarks b in list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    AutotagController -\u003e AutotagController : applyTaggers(b)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    activate AutotagController"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    loop taggers in AutotagController"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController -\u003e SelectiveBookmarkTagger : applyTagSelectively(currentB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        activate SelectiveBookmarkTagger"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger --\u003e AutotagController : taggedB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        deactivate SelectiveBookmarkTagger"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    end"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    AutotagController --\u003e AutotagController : taggedB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    deactivate AutotagController"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "end"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagController --\u003e VersionedMark : taggedList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate AutotagController"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark -\u003e VersionedMark : setBookmarks(taggedList)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate VersionedMark"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark --\u003e VersionedMark"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate VersionedMark"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark --\u003e Model"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate VersionedMark"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Model --\u003e AutotagCommand"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagCommand -\u003e Model : saveMark()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Model -\u003e VersionedMark : save()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "activate VersionedMark"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark --\u003e Model"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate VersionedMark"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Model --\u003e AutotagCommand"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate AutotagCommand"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "destroy AutotagCommand"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 112
    }
  },
  {
    "path": "docs/diagrams/AutotagState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "title Initial State"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "show object fields"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package Bookmarks \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003eb1:Bookmark\" as Bookmark1 {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name : CS2103T Website"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url : https://nus-cs2103-ay1920s1.github.io/website/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags : School"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003eb2:Bookmark\" as Bookmark2 {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name : PlantUML mix different elements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url : https://stackoverflow.com/questions/54020731"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags :"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package AutotagController {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmarks -[hidden]right\u003e AutotagController"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark1 -[hidden]down-\u003e Bookmark2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 29
    }
  },
  {
    "path": "docs/diagrams/AutotagState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "title After command \"autotag Help u/stackoverflow.com/questions\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "show object fields"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package Bookmarks \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003eb1:Bookmark\" as Bookmark1 {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name : CS2103T Website"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url : https://nus-cs2103-ay1920s1.github.io/website/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags : School"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003eb3:Bookmark\" as Bookmark2 {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name : PlantUML mix different elements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url : https://stackoverflow.com/questions/54020731"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags : Help"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package AutotagController {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003et1:SelectiveBookmarkTagger\" as Tagger1 {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         predicate : url contains \"stackoverflow.com/questions\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         tag : Help"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmarks -[hidden]right\u003e AutotagController"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark1 -[hidden]down-\u003e Bookmark2"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 33
    }
  },
  {
    "path": "docs/diagrams/AutotagState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "title After command \\n \"add n/JavaFX new scene u/https://stackoverflow.com/questions/29080759/\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "show object fields"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package Bookmarks \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003eb1:Bookmark\" as Bookmark1 {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name : CS2103T Website"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url : https://nus-cs2103-ay1920s1.github.io/website/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags : School"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003eb3:Bookmark\" as Bookmark2 {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name : PlantUML mix different elements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url : https://stackoverflow.com/questions/54020731"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags : Help"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003eb4:Bookmark\" as Bookmark3 {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name : JavaFX new scene"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url : https://stackoverflow.com/questions/29080759/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags : Help"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package AutotagController {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    object \"\u003cu\u003et1:SelectiveBookmarkTagger\" as Tagger1 {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         predicate : url contains \"stackoverflow.com/questions\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         tag : Help"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmarks -[hidden]right\u003e AutotagController"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark1 -[hidden]down-\u003e Bookmark2"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark2 -[hidden]down-\u003e Bookmark3"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 39
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "participant \":MarkParser\" as MarkParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "LogicManager -\u003e MarkParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "activate MarkParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "MarkParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "DeleteCommandParser --\u003e MarkParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "MarkParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "DeleteCommandParser --\u003e MarkParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e MarkParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "MarkParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "deactivate MarkParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "DeleteCommand -\u003e Model : deleteBookmark(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/FolderSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \":MarkParser\" as MarkParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \"a:AddFolderCommand\" as AddFolderCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \":VersionedMark\" as VersionedMark MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[-\u003e LogicManager : execute\\n(folder GER p/Work)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "LogicManager -\u003e MarkParser : parseCommand\\n(folder GER p/Work)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate MarkParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "create AddFolderCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "MarkParser -\u003e AddFolderCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate AddFolderCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "AddFolderCommand --\u003e MarkParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate AddFolderCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "MarkParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate MarkParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "LogicManager -\u003e AddFolderCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate AddFolderCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "AddFolderCommand -\u003e Model : addFolder\\n(GER, Work)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Model -\u003e VersionedMark : addFolder\\n(GER, Work)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate VersionedMark"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "box FolderStructure MODEL_COLOR_T3"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \"root:FolderStructure\" as Root MODEL_COLOR_T1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \"work:FolderStructure\" as Work MODEL_COLOR_T1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \"ger:FolderStructure\" as Ger MODEL_COLOR_T1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \"ol:ObservableList\u003cFolderStructure\u003e\" as Ol MODEL_COLOR_T1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "VersionedMark -\u003e Root :addFolder\\n(GER, Work)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate Root"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Root -\u003e Work :addFolder\\n(GER, Work)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate Work"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "create Ger"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Work -\u003e Ger :new\\nFolderStructure\\n(GER)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate Ger"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Ger -\u003e Work :ger"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate Ger"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Work -\u003e Ol :add(ger)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate Ol"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "end box"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "box FolderStructure UI_COLOR"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "participant \"tv:FolderStructureTreeView\" as TreeView UI_COLOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "end box"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Ol -\u003e TreeView :changeListener()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "note right: adds folder\\nto the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "activate TreeView"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "TreeView -\u003e Ol"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate TreeView"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Ol -\u003e Work"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate Ol"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Work -\u003e Root"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate Work"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Root -\u003e VersionedMark"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate Root"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "VersionedMark --\u003e Model :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate VersionedMark"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Model --\u003e AddFolderCommand"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "AddFolderCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate AddFolderCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "AddFolderCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "destroy AddFolderCommand"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "openorclose": 94
    }
  },
  {
    "path": "docs/diagrams/FolderStructureClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "FolderStructure -down-\u003e \"1\" Folder"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "FolderStructure -\u003e \"*\" FolderStructure"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "openorclose": 9
    }
  },
  {
    "path": "docs/diagrams/FolderStructureState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "title Initial FolderStructure Hierarchy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class Root as \"__root:FolderStructure__\" #FFFFFF"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class Work as \"__work:FolderStructure__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class Fun as \"__fun:FolderStructure__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class CS2101 as \"__cs2101:FolderStructure__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class CS2103T as \"__cs2103t:FolderStructure__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Fun -up-\u003e Root"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Work -up-\u003e Root"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "CS2101 -up-\u003e Work"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "CS2103T -up-\u003e Work"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "openorclose": 18
    }
  },
  {
    "path": "docs/diagrams/FolderStructureState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "title Final FolderStructure Hierarchy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class Root as \"__root:FolderStructure__\" #FFFFFF"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class Work as \"__work:FolderStructure__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class Fun as \"__fun:FolderStructure__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class CS2101 as \"__cs2101:FolderStructure__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class CS2103T as \"__cs2103t:FolderStructure__\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class GER1000 as \"__ger1000:FolderStructure__\" #lightgreen"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Fun -up-\u003e Root"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Work -up-\u003e Root"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "CS2101 -up-\u003e Work"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "CS2103T -up-\u003e Work"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "GER1000 -up-\u003e Work"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "openorclose": 20
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Class MarkParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package Result {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Class JKLCommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package Storage{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Class HiddenStorage #FFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "LogicManager --\u003e\"1\" MarkParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "MarkParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "XYZCommandParser .left.|\u003e Parser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "ArgumentTokenizer .right.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "ParserUtil ..\u003e Prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "ArgumentTokenizer ..\u003e Prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "LogicManager -up-\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "LogicManager -\u003e Storage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Command ..\u003e Storage"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "note bottom of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "JKLCommandResult --|\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "LogicManager ..\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "note bottom of JKLCommandResult: JKLCommandResult \u003d HelpCommandResult, \\nExitCommandResult, TabCommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 23,
      "-": 51
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Interface ReadOnlyMark \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Mark"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class ReadOnlyMark"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class VersionedMark"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Package FolderStructure {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class FolderStructure"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Package Reminder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Reminder"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class ReminderAssociation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Package Autotag {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class AutotagController"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class BookmarkTagger"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class SelectiveBookmarkTagger"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Package Bookmark {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Bookmark"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Url"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Remark"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class Folder"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class UniqueBookmarkList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Package Annotation {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Class OfflineDocument"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "ModelManager o--\u003e \"1\" VersionedMark"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "ModelManager --\u003e \"*\" Bookmark : filtered list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "ModelManager -up-\u003e \"1\" OfflineDocument"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "ModelManager --\u003e \"1\" Url : \u003c current URL of"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark .up.|\u003e ReadOnlyMark"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark -|\u003e Mark"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "VersionedMark *-up-\u003e \"*\" ReadOnlyMark : contains \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark *--\u003e \"1\" UniqueBookmarkList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark *-left-\u003e \"1\" FolderStructure"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark *--\u003e \"1\" ReminderAssociation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Mark *-left-\u003e \"1\" AutotagController"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "UniqueBookmarkList o--\u003e \"*\" Bookmark"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark *--\u003e Name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark *--\u003e Url"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark *--\u003e Remark"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark *--\u003e Folder"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Bookmark *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Name -[hidden]right-\u003e Url"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Url -[hidden]right-\u003e Remark"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Remark -[hidden]right-\u003e Folder"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "ReminderAssociation o--\u003e \"*\" Bookmark"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "ReminderAssociation o--\u003e \"*\" Reminder"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Reminder --\u003e Bookmark"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "Reminder --\u003e Note"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "AutotagController o--\u003e \"*\" SelectiveBookmarkTagger"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "SelectiveBookmarkTagger -down-|\u003e BookmarkTagger"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "BookmarkTagger --\u003e Tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 62,
      "-": 33
    }
  },
  {
    "path": "docs/diagrams/ReminderAssociationDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Package Reminder \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class ReminderAssociation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class Reminder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class Note"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Package Bookmark {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class Bookmark"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class Url"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class Remark"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class Folder"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Class UniqueBookmarkList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "ReminderAssociation --\u003e \"*\" Reminder"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "ReminderAssociation --\u003e \"*\" Bookmark"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Reminder --\u003e \"1\" Note"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Reminder --\u003e \"1\" Url"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "UniqueBookmarkList o--\u003e \"*\" Bookmark"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Bookmark *--\u003e Name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Bookmark *--\u003e Url"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Bookmark *--\u003e Remark"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Bookmark *--\u003e Folder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "Bookmark *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 34
    }
  },
  {
    "path": "docs/diagrams/SaveMarkActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "if () then ([command saves Mark])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    :Purge redundant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    :Save Mark and the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    corresponding record to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    markStateRecords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 5,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Interface MarkStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "Class JsonMarkStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "StorageManager o--\u003e MarkStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "JsonMarkStorage .left.|\u003e MarkStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "JsonMarkStorage .down.\u003e JsonSerializableMarkStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "JsonSerializableMarkStorage .right.\u003e JsonSerializableBookmark"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "JsonSerializableBookmark .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "openorclose": 7,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class BookmarkListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class BookmarkCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package TabView \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class OfflinePanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class BrowserPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class DashboardPanel"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow *-down-\u003e BookmarkListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow *-down-\u003e BrowserPanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow *-down-\u003e DashboardPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow *-down-\u003e OfflinePanel"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "BookmarkListPanel -down-\u003e BookmarkCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "BookmarkListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "BookmarkCard --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "OfflinePanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "BrowserPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "DashboardPanel -down-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "BookmarkCard ..\u003e Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "TabView ..\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "BookmarkListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 21,
      "-": 51
    }
  },
  {
    "path": "docs/diagrams/UiTabViewClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package TabView \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class OfflinePanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class BrowserPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class DashboardPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class FolderStructureTreeView"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class AnnotationListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class AnnotationParagraphCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow *-down-\u003e DashboardPanel"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow *-down-\u003e BrowserPanel"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow *-down-\u003e OfflinePanel"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "DashboardPanel *-down-\u003e FolderStructureTreeView"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "OfflinePanel *-down-\u003e AnnotationListPanel"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AnnotationListPanel -down-\u003e AnnotationParagraphCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "FolderStructureTreeView --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AnnotationListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AnnotationParagraphCard --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "DashboardPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "OfflinePanel --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "BrowserPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "AnnotationParagraphCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 53
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package MarkStateRecords \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State1 as \"__sr0:MarkStateRecord__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State2 as \"__sr1:MarkStateRecord__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State3 as \"__sr2:MarkStateRecord__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "class Pointer as \"Current Pointer\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 5,
      "-": 15
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package MarkStateRecords \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State1 as \"__sr0:MarkStateRecord__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State2 as \"__sr1:MarkStateRecord__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State3 as \"__sr2:MarkStateRecord__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "class Pointer as \"Current Pointer\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 5,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "title After command \"add u/www.google.com n/Google\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package MarkStateRecords \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State1 as \"__sr0:MarkStateRecord__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State2 as \"__sr1:MarkStateRecord__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State3 as \"__sr2:MarkStateRecord__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "class Pointer as \"Current Pointer\" #FFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 6,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package MarkStateRecords \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State1 as \"__sr0:MarkStateRecord__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State2 as \"__sr1:MarkStateRecord__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State3 as \"__sr2:MarkStateRecord__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "class Pointer as \"Current Pointer\" #FFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 5,
      "-": 13
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package MarkStateRecords \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State1 as \"__sr0:MarkStateRecord__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State2 as \"__sr1:MarkStateRecord__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State3 as \"__sr2:MarkStateRecord__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "class Pointer as \"Current Pointer\" #FFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 5,
      "-": 13
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package MarkStateRecords \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State1 as \"__sr0:MarkStateRecord__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State2 as \"__sr1:MarkStateRecord__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    class State3 as \"__sr2:MarkStateRecord__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "class Pointer as \"Current Pointer\" #FFFFF"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "note right on link: MarkStateRecord sr2 deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 6,
      "-": 13
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "participant \":MarkParser\" as MarkParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "participant \":VersionedMark\" as VersionedMark MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "LogicManager -\u003e MarkParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "activate MarkParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "MarkParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "UndoCommand --\u003e MarkParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "MarkParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "deactivate MarkParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "UndoCommand -\u003e Model : undoMark()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Model -\u003e VersionedMark : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "activate VersionedMark"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "VersionedMark -\u003e VersionedMark :resetData(ReadOnlyMark)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "VersionedMark --\u003e Model : record"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "deactivate VersionedMark"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "Model --\u003e UndoCommand : record"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 15,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/mark/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Path.of(configPathParameter) : null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "Na-Nazhou": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/mark/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/mark/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.JsonMarkStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.MarkStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Mark ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        MarkStorage markStorage \u003d new JsonMarkStorage(userPrefs.getMarkFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        storage \u003d new StorageManager(markStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s mark and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * The data from the sample mark will be used instead if {@code storage}\u0027s mark is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * or an empty mark will be used instead if errors occur when reading {@code storage}\u0027s mark."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Optional\u003cReadOnlyMark\u003e markOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ReadOnlyMark initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            markOptional \u003d storage.readMark();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (markOptional.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Mark\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            initialData \u003d markOptional.orElseGet(SampleDataUtil::getSampleMark);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Mark\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            initialData \u003d new Mark();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Mark\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            initialData \u003d new Mark();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Mark\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        logger.info(\"Starting Mark \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Mark ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 36,
      "Na-Nazhou": 8,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Path.of(\"config.json\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Path userPrefsFilePath \u003d Path.of(\"preferences.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "Na-Nazhou": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String LOG_FILE \u003d \"mark.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX \u003d \"The bookmark index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_BOOKMARKS_LISTED_OVERVIEW \u003d \"%1$d bookmarks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_FOLDER_NOT_FOUND \u003d \"Folder %1$s does not exist\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "openorclose": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Path#of(String)},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            Path.of(path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "Na-Nazhou": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/mark/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String preppedSentence \u003d sentence.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if any part of the {@code sentence} contains the {@code phrase}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   Ignores case."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *       containsPhraseIgnoreCase(\"ABc def\", \"Ab\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *       containsPhraseIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *       containsPhraseIgnoreCase(\"ABc def\", \"c DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *       containsPhraseIgnoreCase(\"ABc def\", \"abcdef\") \u003d\u003d false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param phrase cannot be null, cannot be empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static boolean containsPhraseIgnoreCase(String sentence, String phrase) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(phrase);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String preppedPhrase \u003d phrase.trim().toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        checkArgument(!preppedPhrase.isEmpty(), \"Phrase parameter cannot be empty\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase(); // ignore case"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return preppedSentence.contains(preppedPhrase);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 27,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the Mark instance."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @see seedu.mark.model.Model#getMark()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    ReadOnlyMark getMark();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of bookmarks */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    ObservableList\u003cBookmark\u003e getFilteredBookmarkList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /** Returns an unmodifiable view of the folder structure */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    FolderStructure getFolderStructure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the user prefs\u0027 mark file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Path getMarkFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Wrapper for current url."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * null if not present."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @see seedu.mark.model.Model#getCurrentUrlProperty()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    SimpleObjectProperty\u003cUrl\u003e getCurrentUrlProperty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Sets the current url."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @see seedu.mark.model.Model#setCurrentUrl(Url)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    void setCurrentUrl(Url url);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Returns a view of the annotated document."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @see Model#getObservableDocument()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    ObservableList\u003cParagraph\u003e getObservableDocument();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Updates the view of document to the document given."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param doc Document to update view and be shown."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @see seedu.mark.model.Model#updateDocument(OfflineDocument)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    void updateDocument(OfflineDocument doc);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    SimpleObjectProperty\u003cBookmark\u003e getBookmarkDisplayingCacheProperty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 13,
      "openorclose": 6,
      "Na-Nazhou": 18,
      "kxyoke": 19,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.MarkParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final MarkParser markParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        markParser \u003d new MarkParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Command command \u003d markParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        commandResult \u003d command.execute(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            storage.saveMark(model.getMark());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ReadOnlyMark getMark() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return model.getMark();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ObservableList\u003cBookmark\u003e getFilteredBookmarkList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public FolderStructure getFolderStructure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return model.getMark().getFolderStructure();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return model.getMarkFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public SimpleObjectProperty\u003cUrl\u003e getCurrentUrlProperty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return model.getCurrentUrlProperty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void setCurrentUrl(Url url) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.setCurrentUrl(url);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ObservableList\u003cParagraph\u003e getObservableDocument() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return model.getObservableDocument();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void updateDocument(OfflineDocument doc) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        model.updateDocument(doc);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public SimpleObjectProperty\u003cBookmark\u003e getBookmarkDisplayingCacheProperty() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return model.getBookmarkDisplayingCacheProperty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 22,
      "openorclose": 11,
      "Na-Nazhou": 13,
      "kxyoke": 12,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_FOLDER_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Adds a bookmark to Mark."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a bookmark to Mark.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + PREFIX_URL + \"URL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + PREFIX_NAME + \"NUSMods \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + PREFIX_URL + \"https://nusmods.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + PREFIX_REMARK + \"Module planner \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + PREFIX_TAG + \"school \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + PREFIX_TAG + \"timetable\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New bookmark added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKMARK \u003d \"This bookmark already exists in Mark\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_MISSING_URL \u003d \"Failed to obtain the URL of the current page.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Bookmark toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private boolean hasNoUrl;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Bookmark}, the Url"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * of the bookmark must be present."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public AddCommand(Bookmark bookmark) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this(bookmark, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Bookmark}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public AddCommand(Bookmark bookmark, boolean hasNoUrl) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(bookmark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.toAdd \u003d bookmark;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.hasNoUrl \u003d hasNoUrl;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (hasNoUrl) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            Url urlToAdd \u003d model.getCurrentUrl();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // Throw exception when there is no internet connection"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (urlToAdd \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                throw new CommandException(MESSAGE_MISSING_URL);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            toAdd \u003d new BookmarkBuilder(toAdd).withUrl(urlToAdd.value).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (model.hasBookmark(toAdd)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOKMARK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!model.hasFolder(toAdd.getFolder())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FOLDER_NOT_FOUND, toAdd.getFolder()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.addBookmark(toAdd);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.applyAllTaggers();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 hasNoUrl \u003d\u003d ((AddCommand) other).hasNoUrl;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 22,
      "openorclose": 5,
      "Na-Nazhou": 34,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/AddFolderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_PARENT_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Creates a new folder in Mark."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class AddFolderCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"folder\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \": Creates a new folder with the specified name.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"Parameters: NAME (must not be an existing folder name) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + PREFIX_PARENT_FOLDER + \"[PARENT_FOLDER]\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" school \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New folder added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOLDER \u003d \"This folder already exists in Mark\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_PARENT_FOLDER_NOT_FOUND \u003d \"The parent folder %s doesn\u0027t exist in Mark\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_READDING_ROOT_FOLDER \u003d \"The \" + Folder.DEFAULT_FOLDER_NAME"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \" folder is the root folder for all folders, choose another name\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final Folder folder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final Folder parentFolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Creates an AddFolderCommand to add the specified {@code Folder}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param folder the folder to add"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param parentFolder the parent folder to add it under"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public AddFolderCommand(Folder folder, Folder parentFolder) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(folder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folder \u003d folder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.parentFolder \u003d parentFolder \u003d\u003d null ? Folder.ROOT_FOLDER : parentFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // special case of duplicate folder, provide better error message for user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (folder.equals(Folder.ROOT_FOLDER)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(MESSAGE_READDING_ROOT_FOLDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (model.hasFolder(folder)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOLDER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!model.hasFolder(parentFolder)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    String.format(MESSAGE_PARENT_FOLDER_NOT_FOUND, parentFolder));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        model.addFolder(folder, parentFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(MESSAGE_SUCCESS, folder));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, folder));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!(other instanceof AddFolderCommand)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand otherAddFolderCommand \u003d (AddFolderCommand) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return folder.equals(otherAddFolderCommand.folder)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 parentFolder.equals(otherAddFolderCommand.parentFolder);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "openorclose": 74,
      "Na-Nazhou": 11
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/AddReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Adds a reminder to Mark."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class AddReminderCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a reminder to Mark.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            + PREFIX_TIME + \"TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            + PREFIX_TIME + \"07/01/2020 1300 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            + PREFIX_NOTE + \"Check the schedule \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New reminder added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REMINDER \u003d \"This bookmark already has a reminder.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final Note note;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Creates an AddReminderCommand to add the specified {@code Reminder} that opens bookmark at {@code Index}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param index the index of bookmark opened by the reminder."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param note the note of the reminder to be added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param time the time of the reminder to be added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public AddReminderCommand(Index index, Note note, LocalDateTime time) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireAllNonNull(index, note, time);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Bookmark bookmarkToOpen \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder reminderToAdd \u003d new Reminder(bookmarkToOpen, time, note);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (model.isBookmarkHasReminder(bookmarkToOpen)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REMINDER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        model.addReminder(bookmarkToOpen, reminderToAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(MESSAGE_SUCCESS, reminderToAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, reminderToAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                || (other instanceof AddReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 note.equals(((AddReminderCommand) other).note)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 time.equals(((AddReminderCommand) other).time)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 index.equals(((AddReminderCommand) other).index));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 84,
      "Na-Nazhou": 3
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/AutotagCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Adds an automatic tagger to Mark that tags bookmarks according to specific"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * conditions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class AutotagCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"autotag\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \": Creates an automatic tagger that tags bookmarks which match the given conditions. At least one \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"condition must be specified.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"Parameters: TAG_NAME [n/NAME_KEYWORD]... [u/URL_KEYWORD]... \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"[nn/NOT_NAME_KEYWORD]... [nu/NOT_URL_KEYWORD]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Quiz u/luminus.nus.edu.sg u/quiz nu/attempt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_AUTOTAG_ADDED \u003d \"An autotag was added successfully: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_AUTOTAG_EXISTS \u003d \"An autotag with this name already exists: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_NO_CONDITION_SPECIFIED \u003d \"At least one name or URL condition must be specified\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final SelectiveBookmarkTagger tagger;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public AutotagCommand(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(tagger);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.tagger \u003d tagger;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (model.hasTagger(tagger)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_AUTOTAG_EXISTS, tagger));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.addTagger(tagger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.applyAllTaggers();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // TODO: Don\u0027t save Mark if no taggers were actually applied"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(MESSAGE_AUTOTAG_ADDED, tagger));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_AUTOTAG_ADDED, tagger));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof AutotagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 tagger.equals(((AutotagCommand) other).tagger)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 58,
      "Na-Nazhou": 2
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/CacheCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import net.dankito.readability4j.Readability4J;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Caches a bookmark for offline viewing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class CacheCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cache\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Caches a bookmark\u0027s contents.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"Parameters: INDEX\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bookmark\u0027s contents successfully cached!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_OVERWRITTEN \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            \"Previous cache successfully overwritten! Use the undo command to get it back.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            \"Unable to cache bookmark\u0027s content. Check the URL and your internet connection and try again!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Instantiates a new Cache Command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param index the index to cache"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public CacheCommand(Index index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark bookmarkToCache \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String urlString \u003d bookmarkToCache.getUrl().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            URL url \u003d new URL(urlString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(url.openStream()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            String inputLine;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            while ((inputLine \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                output.append(inputLine);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            content \u003d new Readability4J(urlString, output.toString()).parse().getArticleContent().html();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new CommandResult(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        boolean hasPreviousCachedCopies \u003d !bookmarkToCache.getCachedCopies().isEmpty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CachedCopy cached \u003d new CachedCopy(content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark cachedBookmark \u003d new Bookmark(bookmarkToCache.getName(), bookmarkToCache.getUrl(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                bookmarkToCache.getRemark(), bookmarkToCache.getFolder(), bookmarkToCache.getTags(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                List.of(cached));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        model.setBookmark(bookmarkToCache, cachedBookmark);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        model.updateCurrentDisplayedCache(cachedBookmark);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String message \u003d hasPreviousCachedCopies ? MESSAGE_OVERWRITTEN : MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        model.saveMark(message);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                || (other instanceof CacheCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 index.equals(((CacheCommand) other).index));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 93
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Clears Mark."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mark has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.setMark(new Mark());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 8,
      "Na-Nazhou": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage {@code Storage} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public abstract CommandResult execute(Model model, Storage storage) throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 6,
      "Na-Nazhou": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/DeleteCacheCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Deletes an offline copy of a bookmark."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DeleteCacheCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cache-delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the offline copy of a bookmark.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"Parameters: INDEX\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Bookmark\u0027s offline copy successfully deleted!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            \"No offline copy is available to delete!!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Instantiates a new DeleteCache Command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param index the index of the bookmark whose offline copy should be deleted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public DeleteCacheCommand(Index index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark bookmarkToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (bookmarkToDelete.getCachedCopies().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark updatedBookmark \u003d new Bookmark(bookmarkToDelete.getName(), bookmarkToDelete.getUrl(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                bookmarkToDelete.getRemark(), bookmarkToDelete.getFolder(), bookmarkToDelete.getTags(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        model.setBookmark(bookmarkToDelete, updatedBookmark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        model.saveMark(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                || (other instanceof DeleteCacheCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteCacheCommand) other).index));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 69
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Deletes a bookmark identified using its displayed index from Mark."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \": Deletes the bookmark identified by the index number used in the displayed bookmark list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOKMARK_SUCCESS \u003d \"Deleted Bookmark: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmarkToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.deleteBookmark(bookmarkToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(MESSAGE_DELETE_BOOKMARK_SUCCESS, bookmarkToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOKMARK_SUCCESS, bookmarkToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 16,
      "Na-Nazhou": 5,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_FOLDER_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_FOLDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.model.Model.PREDICATE_SHOW_ALL_BOOKMARKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Edits the details of an existing bookmark in Mark."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the bookmark identified \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"by the index number used in the displayed bookmark list. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"[\" + PREFIX_URL + \"URL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"[\" + PREFIX_REMARK + \"REMARK] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"[\" + PREFIX_FOLDER + \"FOLDER] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + PREFIX_URL + \"https://luminus.nus.edu.sg\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOKMARK_SUCCESS \u003d \"Edited Bookmark: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKMARK \u003d \"This bookmark already exists in Mark.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final EditBookmarkDescriptor editBookmarkDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param index of the bookmark in the filtered bookmark list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param editBookmarkDescriptor details to edit the bookmark with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditCommand(Index index, EditBookmarkDescriptor editBookmarkDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(editBookmarkDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.editBookmarkDescriptor \u003d new EditBookmarkDescriptor(editBookmarkDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmarkToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedBookmark \u003d createEditedBookmark(bookmarkToEdit, editBookmarkDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!bookmarkToEdit.isSameBookmark(editedBookmark) \u0026\u0026 model.hasBookmark(editedBookmark)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOKMARK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!model.hasFolder(editedBookmark.getFolder())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FOLDER_NOT_FOUND, editedBookmark.getFolder()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.setBookmark(bookmarkToEdit, editedBookmark);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.applyAllTaggers();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(MESSAGE_EDIT_BOOKMARK_SUCCESS, editedBookmark));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.updateFilteredBookmarkList(PREDICATE_SHOW_ALL_BOOKMARKS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOKMARK_SUCCESS, editedBookmark));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates and returns a {@code Bookmark} with the details of {@code bookmarkToEdit}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * edited with {@code editBookmarkDescriptor}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static Bookmark createEditedBookmark(Bookmark bookmarkToEdit,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                                                 EditBookmarkDescriptor editBookmarkDescriptor) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assert bookmarkToEdit !\u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Name updatedName \u003d editBookmarkDescriptor.getName().orElse(bookmarkToEdit.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Url updatedUrl \u003d editBookmarkDescriptor.getUrl().orElse(bookmarkToEdit.getUrl());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Remark updatedRemark \u003d editBookmarkDescriptor.getRemark().orElse(bookmarkToEdit.getRemark());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editBookmarkDescriptor.getTags().orElse(bookmarkToEdit.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder updatedFolder \u003d editBookmarkDescriptor.getFolder().orElse(bookmarkToEdit.getFolder());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        List\u003cCachedCopy\u003e unchangedCachedCopies \u003d bookmarkToEdit.getCachedCopies();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new Bookmark(updatedName, updatedUrl, updatedRemark, updatedFolder, updatedTags, unchangedCachedCopies);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 editBookmarkDescriptor.equals(e.editBookmarkDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Stores the details to edit the bookmark with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * corresponding field value of the bookmark."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static class EditBookmarkDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private Url url;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private Remark remark;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        private Folder folder;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public EditBookmarkDescriptor() {}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public EditBookmarkDescriptor(EditBookmarkDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            setUrl(toCopy.url);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            setRemark(toCopy.remark);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            setFolder(toCopy.folder);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, url, remark, folder, tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void setUrl(Url url) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            this.url \u003d url;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cUrl\u003e getUrl() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Optional.ofNullable(url);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            this.remark \u003d remark;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Optional.ofNullable(remark);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void setFolder(Folder folder) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            this.folder \u003d folder;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public Optional\u003cFolder\u003e getFolder() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return Optional.ofNullable(folder);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (!(other instanceof EditBookmarkDescriptor)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            EditBookmarkDescriptor e \u003d (EditBookmarkDescriptor) other;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    \u0026\u0026 getUrl().equals(e.getUrl())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    \u0026\u0026 getFolder().equals(e.getFolder())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 72,
      "openorclose": 24,
      "Na-Nazhou": 6,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.ExitCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Mark as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new ExitCommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 5,
      "openorclose": 1,
      "Na-Nazhou": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.JsonMarkStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Exports Mark\u0027s {@code Bookmark} data into a specific file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports all of Mark\u0027s data to the specified file.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"Parameters: FILENAME\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" savedBookmarks\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_EXPORT_SUCCESS \u003d \"Bookmarks successfully exported to %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_EXPORT_FAILURE \u003d \"Bookmarks could not be exported\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMarkStorage.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ExportCommand(Path filePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            storage.saveMark(model.getMark(), filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.info(\"Bookmarks not exported: Error while writing to file \" + filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(MESSAGE_EXPORT_FAILURE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        logger.info(\"Bookmarks exported to file \" + filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EXPORT_SUCCESS, filePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 filePath.equals(((ExportCommand) other).filePath)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 59
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/FavoriteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Favorites a bookmark identified using its displayed index from Mark."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class FavoriteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favorite\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"fav\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \": Adds a \u0027Favorite\u0027 tag to the bookmark identified by the index number used in the displayed \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"bookmark list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_FAVORITE_BOOKMARK_SUCCESS \u003d \"Bookmark added to Favorites: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_FAVORITE_BOOKMARK_DUPLICATE \u003d \"This bookmark already exists in Favorites\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final Tag favTag \u003d new Tag(\"Favorite\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public FavoriteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark bookmarkToFavorite \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (bookmarkToFavorite.getTags().contains(favTag)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new CommandException(MESSAGE_FAVORITE_BOOKMARK_DUPLICATE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.favoriteBookmark(bookmarkToFavorite);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(MESSAGE_FAVORITE_BOOKMARK_SUCCESS, bookmarkToFavorite));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FAVORITE_BOOKMARK_SUCCESS, bookmarkToFavorite));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                || (other instanceof FavoriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((FavoriteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 67
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.predicates.BookmarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Finds and lists all bookmarks in Mark whose identifiers contain any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all bookmarks whose names or URLs contain any \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" stack-overflow github programming\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final BookmarkContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public FindCommand(BookmarkContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.updateFilteredBookmarkList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKMARKS_LISTED_OVERVIEW, model.getFilteredBookmarkList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 10,
      "Na-Nazhou": 8,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/GotoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Opens a bookmark."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class GotoCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \": Opens the bookmark identified by the index used in the displayed bookmark list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_GOTO_BOOKMARK_ACKNOWLEDGEMENT \u003d \"Opening Bookmark: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public GotoCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark bookmarkToOpen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.setCurrentUrl(bookmarkToOpen.getUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_GOTO_BOOKMARK_ACKNOWLEDGEMENT, bookmarkToOpen));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                || (other instanceof GotoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((GotoCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "Na-Nazhou": 56
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new HelpCommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 4,
      "openorclose": 1,
      "Na-Nazhou": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.JsonMarkStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Imports Mark\u0027s {@code Bookmark} data from a specific file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports all of Mark\u0027s data from the specified file.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"Parameters: FILENAME\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" savedBookmarks\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS \u003d \"Bookmarks successfully imported from %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_IMPORT_SUCCESS_WITH_DUPLICATES \u003d MESSAGE_IMPORT_SUCCESS + \"\\n\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"The following bookmarks were not imported as they already exist: %2$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_NO_BOOKMARKS_TO_IMPORT \u003d \"There are no new bookmarks to import. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"The following bookmarks already exist: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_IMPORT_FAILURE \u003d \"There was a problem while trying to import bookmarks \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"from this file\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_FILE_FORMAT_INCORRECT \u003d \"The format of data in the file %1$s is incorrect\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"The file %1$s does not exist\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMarkStorage.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new {@code ImportCommand} instance with the given file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param filePath of the file to be imported from."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ImportCommand(Path filePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Attempts to read Mark from a given file in storage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static ReadOnlyMark readMarkFromStorage(Storage storage, Path filePath) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(storage, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Optional\u003cReadOnlyMark\u003e newMark;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            newMark \u003d storage.readMark(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.info(\"Bookmarks not imported: Problem while reading from the file \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(MESSAGE_IMPORT_FAILURE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.info(\"Bookmarks not imported: Data file \" + filePath + \" has wrong format\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FILE_FORMAT_INCORRECT, filePath));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (newMark.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FILE_NOT_FOUND, filePath));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return newMark.get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Executes the import command on the given {@code model} and {@code storage}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage {@code Storage} which the command should operate on."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return A CommandResult indicating a successful import, and (if applicable)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *         shows bookmarks that were skipped during import."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws CommandException if an error occurs while reading bookmarks from Storage"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ReadOnlyMark newMark \u003d readMarkFromStorage(storage, filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        MarkImporter importer \u003d new MarkImporter(model, newMark);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!importer.hasBookmarksToImport()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NO_BOOKMARKS_TO_IMPORT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    importer.getExistingBookmarksAsString()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        importer.importBookmarks();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String message \u003d importer.hasExistingBookmarks()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ? String.format(MESSAGE_IMPORT_SUCCESS_WITH_DUPLICATES, filePath,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    importer.getExistingBookmarksAsString())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                : String.format(MESSAGE_IMPORT_SUCCESS, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(message);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether an object is equal to this {@code ImportCommand}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param other Object to compare."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return true if the object is an ImportCommand with the same {@code filePath}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * as the current {@code ImportCommand}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 filePath.equals(((ImportCommand) other).filePath)); // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Stores data from a {@code Mark} to import them into a {@code Model}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static class MarkImporter {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private Model model;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private List\u003cBookmark\u003e existingBookmarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private List\u003cBookmark\u003e bookmarksToImport \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        MarkImporter(Model model, ReadOnlyMark markToImport) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            this.model \u003d model;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            processBookmarks(markToImport.getBookmarkList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Returns copy of the given {@code Bookmark} with its folder set to"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * {@code Folder.IMPORT_FOLDER}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public static Bookmark setFolderAsImportFolder(Bookmark bookmark) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new Bookmark(bookmark.getName(), bookmark.getUrl(), bookmark.getRemark(),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    Folder.IMPORT_FOLDER, bookmark.getTags(), bookmark.getCachedCopies());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Classifies bookmarks from the given list based on whether they and/or"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * their folders exist in the model."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private void processBookmarks(ObservableList\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            for (Bookmark bookmark : bookmarks) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                if (model.hasBookmark(bookmark)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    this.existingBookmarks.add(bookmark);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else if (!model.hasFolder(bookmark.getFolder())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                        || bookmark.getFolder().equals(Folder.ROOT_FOLDER)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    this.bookmarksToImport.add(setFolderAsImportFolder(bookmark));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    this.bookmarksToImport.add(bookmark);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private Model getModel() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return this.model;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Checks whether the {@code MarkImporter} contains bookmarks that"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * already exist in the {@code model}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * @return true if some bookmarks already exist in the model, and"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         *         false otherwise"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public boolean hasExistingBookmarks() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return !existingBookmarks.isEmpty();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Returns a list of bookmarks that already exist in the {@code model}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public List\u003cBookmark\u003e getExistingBookmarks() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return existingBookmarks;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Returns the list of existing bookmarks as a multi-line {@code String}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * with 4 spaces of indentation per line."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * @return String representation of existing bookmarks with indentation."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public String getExistingBookmarksAsString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String newlineAndIndent \u003d \"\\n    \";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return existingBookmarks.stream().map(Bookmark::toString)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    .map(newlineAndIndent::concat)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    .reduce(\"\", String::concat);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Checks whether the {code MarkImporter} has new bookmarks to"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * import."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * @return true if some bookmarks do not already exist in the model, and"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         *         false otherwise"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public boolean hasBookmarksToImport() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return !bookmarksToImport.isEmpty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Returns the bookmarks in the given list that do not already exist in"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * the {@code model}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public List\u003cBookmark\u003e getBookmarksToImport() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return bookmarksToImport;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * Imports new bookmarks to the {@code model}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void importBookmarks() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            model.addBookmarks(bookmarksToImport);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (!(other instanceof MarkImporter)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            MarkImporter markImporter \u003d (MarkImporter) other;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return getModel().equals(markImporter.getModel())"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    \u0026\u0026 getExistingBookmarks().equals(markImporter.getExistingBookmarks())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    \u0026\u0026 getBookmarksToImport().equals(markImporter.getBookmarksToImport());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 247,
      "Na-Nazhou": 2
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.model.Model.PREDICATE_SHOW_ALL_BOOKMARKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Lists all bookmarks in Mark to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all bookmarks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.updateFilteredBookmarkList(PREDICATE_SHOW_ALL_BOOKMARKS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 8,
      "Na-Nazhou": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/OfflineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.results.OfflineCommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Opens a cached version of a bookmark."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class OfflineCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"offline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \": Opens the cached copy of the bookmark identified by the index used in the displayed bookmark list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Opening cached Bookmark: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_INVALID_VERSION \u003d \"Could not find cached bookmark version %1$d\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_NO_CACHED_COPIES \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            \"There are no cached copies yet. Use the cache command to do so first.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Instantiates a new Offline command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param targetIndex the target index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public OfflineCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        List\u003cBookmark\u003e lastShownList \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark bookmarkToOpen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        List\u003cCachedCopy\u003e cachedCopies \u003d bookmarkToOpen.getCachedCopies();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        int version \u003d cachedCopies.size() - 1; // TODO: implement choosing version"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (version \u003c 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(MESSAGE_NO_CACHED_COPIES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (version \u003e\u003d cachedCopies.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_VERSION, version));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        model.updateDocument(new OfflineDocument(bookmarkToOpen.getCachedCopies().get(version).html));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new OfflineCommandResult(String.format(MESSAGE_SUCCESS, bookmarkToOpen));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!(other instanceof OfflineCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        OfflineCommand otherOfflineCommand \u003d (OfflineCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return targetIndex.equals(otherOfflineCommand.targetIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return Objects.hash(targetIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 90
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.model.Model.PREDICATE_SHOW_ALL_BOOKMARKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Reverts the {@code model}\u0027s Mark to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \": Redoes a given number of previous undo commands. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"If not specified, the default number of commands to redo is 1. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Parameters: [STEP] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Action(s) successfully redone: \\n%1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Not enough commands to redo! \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Only %1$s remaining commands to redo.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final int steps;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public RedoCommand(int steps) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.steps \u003d steps;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (!model.canRedoMark(steps)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, model.getMaxStepsToRedo()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String record \u003d model.redoMark(steps);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.updateFilteredBookmarkList(PREDICATE_SHOW_ALL_BOOKMARKS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, record));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                || (other instanceof RedoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 steps \u003d\u003d ((RedoCommand) other).steps); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "Na-Nazhou": 51
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/TabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.results.TabCommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Switches the main viewing tab to either the Dashboard, Online or Offline tab."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class TabCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tab\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \": Switches to the tab specified by the given index or keyword. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            + \"Dashboard - \u00271\u0027 or \u0027dash\u0027. Online - \u00272\u0027 or \u0027on\u0027. Offline - \u00273\u0027 or \u0027off\u0027.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            + \"Parameter: INDEX or KEYWORD\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_SWITCH_ACKNOWLEDGEMENT \u003d \"Switching view to tab: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Tab index should be 1, 2, or 3.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_INVALID_KEYWORD \u003d \"Tab keyword should be dash, on, or off.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private final Tab tab;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public TabCommand(Tab tab) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(tab);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.tab \u003d tab;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return new TabCommandResult(String.format(MESSAGE_SWITCH_ACKNOWLEDGEMENT, tab.toString()), tab);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                || (other instanceof TabCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 ((TabCommand) other).tab \u003d\u003d this.tab);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Represents the tabs available."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static enum Tab {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        DASHBOARD,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ONLINE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        OFFLINE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "Na-Nazhou": 8,
      "kxyoke": 50
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.model.Model.PREDICATE_SHOW_ALL_BOOKMARKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Reverts the {@code model}\u0027s Mark to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \": Undoes a given number of previous undoable commands. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"If not specified, the default number of commands to undo is 1. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Parameters: [STEP] (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Action(s) successfully undone: \\n%1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Not enough commands to undo! \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Only %1$s remaining commands to undo.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final int steps;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public UndoCommand(int steps) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.steps \u003d steps;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public CommandResult execute(Model model, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (!model.canUndoMark(steps)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_FAILURE, model.getMaxStepsToUndo()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String record \u003d model.undoMark(steps);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.updateFilteredBookmarkList(PREDICATE_SHOW_ALL_BOOKMARKS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, record));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                || (other instanceof UndoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 steps \u003d\u003d ((UndoCommand) other).steps); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "Na-Nazhou": 51
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/results/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Constructs a {@code CommandResult} with the feedback."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public TabCommand.Tab getTab() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 isShowHelp() \u003d\u003d otherCommandResult.isShowHelp()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 isExit() \u003d\u003d otherCommandResult.isExit()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 getTab() \u003d\u003d otherCommandResult.getTab();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return Objects.hash(feedbackToUser,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                isShowHelp(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                isExit(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                getTab());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 5,
      "Na-Nazhou": 2,
      "kxyoke": 12,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/results/ExitCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Represents the result of an exit command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ExitCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Constructs an {@code ExitCommandResult} with the feedback."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param feedbackToUser feedback"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public ExitCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 20,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/results/HelpCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Represents the result of a help command execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class HelpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Constructs a {@code HelpCommandResult} with the feedback."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param feedbackToUser feedback"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public HelpCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 21,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/results/OfflineCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.TabCommand.Tab;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Represents the result of an offline command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class OfflineCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Constructs a {@code OfflineCommandResult} with the feedback."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param feedbackToUser the feedback to the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public OfflineCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return Tab.OFFLINE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 23
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/commands/results/TabCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.TabCommand.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents the result of a tab command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class TabCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Tab tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public TabCommandResult(String feedbackToUser, Tab tab) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(tab);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.tab \u003d tab;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return tab;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 25
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_FOLDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_URL, PREFIX_REMARK, PREFIX_TAG, PREFIX_FOLDER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_URL)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        boolean hasNoUrl \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String urlString \u003d argMultimap.getValue(PREFIX_URL).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Url url;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (!\"this\".equals(urlString)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            url \u003d ParserUtil.parseUrl(urlString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            hasNoUrl \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            url \u003d new Url(BookmarkBuilder.DEFAULT_URL);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // optional fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).orElse(Remark.DEFAULT_VALUE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder folder \u003d ParserUtil.parseFolder(argMultimap.getValue(PREFIX_FOLDER).orElse(Folder.DEFAULT_FOLDER_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark bookmark \u003d new Bookmark(name, url, remark, folder, tagList, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new AddCommand(bookmark, hasNoUrl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 18,
      "openorclose": 6,
      "Na-Nazhou": 11,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/AddFolderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_PARENT_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.AddFolderCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Parses input arguments and creates a new {@code AddFolderCommand} object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class AddFolderCommandParser implements Parser\u003cAddFolderCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddFolderCommand}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * and returns a {@code AddFolderCommand} object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public AddFolderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PARENT_FOLDER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder folder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            folder \u003d ParserUtil.parseFolder(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFolderCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String parentFolder \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                argMultimap.getValue(PREFIX_PARENT_FOLDER).orElse(Folder.DEFAULT_FOLDER_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new AddFolderCommand(folder, new Folder(parentFolder));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 35,
      "Na-Nazhou": 3
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/AddReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.commands.AddReminderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Parses input arguments and creates a new AddReminderCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class AddReminderCommandParser implements Parser\u003cAddReminderCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public AddReminderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TIME, PREFIX_NOTE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            System.out.println(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            System.out.println(\"no index\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                    AddReminderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TIME)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            System.out.println(\"no time\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        LocalDateTime time \u003d ParserUtil.parseTime(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // optional fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Note note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).orElse(Note.DEFAULT_VALUE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return new AddReminderCommand(index, note, time);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 62
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/AutotagCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NOT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NOT_URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AutotagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.UrlContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Parses input arguments and creates a new AutotagCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class AutotagCommandParser implements Parser\u003cAutotagCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Predicate\u003cBookmark\u003e DEFAULT_PREDICATE \u003d bookmark -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AutotagCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and returns an AutotagCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public AutotagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_URL, PREFIX_NOT_NAME, PREFIX_NOT_URL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AutotagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Tag tagToApply \u003d ParserUtil.parseTag(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        boolean hasConditions \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Predicate\u003cBookmark\u003e predicate \u003d DEFAULT_PREDICATE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            hasConditions \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            predicate \u003d predicate.and(new NameContainsKeywordsPredicate(argMultimap.getAllValues(PREFIX_NAME)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_URL).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            hasConditions \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            predicate \u003d predicate.and(new UrlContainsKeywordsPredicate(argMultimap.getAllValues(PREFIX_URL)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOT_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            hasConditions \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            predicate \u003d predicate.and("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    new NameContainsKeywordsPredicate(argMultimap.getAllValues(PREFIX_NOT_NAME)).negate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOT_URL).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            hasConditions \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            predicate \u003d predicate.and("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    new UrlContainsKeywordsPredicate(argMultimap.getAllValues(PREFIX_NOT_URL)).negate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!hasConditions) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new ParseException(AutotagCommand.MESSAGE_NO_CONDITION_SPECIFIED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        SelectiveBookmarkTagger tagger \u003d new SelectiveBookmarkTagger(tagToApply, predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new AutotagCommand(tagger);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 63,
      "openorclose": 11
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/CacheCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.CacheCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Parses input arguments and creates a new CacheCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class CacheCommandParser implements Parser\u003cCacheCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public CacheCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new CacheCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CacheCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 26
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/CacheToOfflineParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Parses readability4j html outputs into document."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * TODO: if not needed, destroy this class"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class CacheToOfflineParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 8
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Prefix PREFIX_FOLDER \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Prefix PREFIX_NOT_NAME \u003d new Prefix(\"nn/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Prefix PREFIX_NOT_URL \u003d new Prefix(\"nu/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Prefix PREFIX_PARENT_FOLDER \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Prefix PREFIX_URL \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 8,
      "TSAI-HSIAO-HAN": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/DeleteCacheCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.DeleteCacheCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Parses input arguments and creates a new DeleteCacheCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DeleteCacheCommandParser implements Parser\u003cDeleteCacheCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public DeleteCacheCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new DeleteCacheCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCacheCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 26
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand.EditBookmarkDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_URL, PREFIX_REMARK, PREFIX_FOLDER, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditBookmarkDescriptor editBookmarkDescriptor \u003d new EditCommand.EditBookmarkDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            editBookmarkDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_URL).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            editBookmarkDescriptor.setUrl(ParserUtil.parseUrl(argMultimap.getValue(PREFIX_URL).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            editBookmarkDescriptor.setRemark(ParserUtil.parseRemark(argMultimap.getValue(PREFIX_REMARK).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FOLDER).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            editBookmarkDescriptor.setFolder(ParserUtil.parseFolder(argMultimap.getValue(PREFIX_FOLDER).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editBookmarkDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!editBookmarkDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new EditCommand(index, editBookmarkDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 20,
      "openorclose": 4,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Parses input arguments and creates a new {@code ExportCommand} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // args must contain exactly one word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (trimmedArgs.isEmpty() || trimmedArgs.split(\" \").length !\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path destinationFile \u003d Path.of(\"data\", \"bookmarks\", trimmedArgs + \".json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new ExportCommand(destinationFile);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 33
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/FavoriteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.FavoriteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Parses input arguments and creates a new FavoriteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class FavoriteCommandParser implements Parser\u003cFavoriteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavoriteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * and returns a FavoriteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public FavoriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new FavoriteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 28
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_FOLDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.predicates.BookmarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e identifierKeywords \u003d new LinkedList\u003c\u003e(Arrays.asList(preamble.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d argMultimap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e folderKeywords \u003d argMultimap.getAllValues(PREFIX_FOLDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Remove keyword empty string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        identifierKeywords.removeIf(String::isEmpty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        tagKeywords.removeIf(String::isEmpty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        folderKeywords.removeIf(String::isEmpty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate(identifierKeywords,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                tagKeywords, folderKeywords);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (!predicate.isAnyKeywordPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 4,
      "Na-Nazhou": 24,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/GotoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Parses input arguments and creates a new GotoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class GotoCommandParser implements Parser\u003cGotoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GotoCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * and returns a GotoCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public GotoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new GotoCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GotoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 29
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Parses input arguments and creates a new {@code ImportCommand} object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // args must contain exactly one word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (trimmedArgs.isEmpty() || trimmedArgs.split(\" \").length !\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path sourceFile \u003d Path.of(\"data\", \"bookmarks\", trimmedArgs + \".json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new ImportCommand(sourceFile);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 33
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/MarkParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.AddFolderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.commands.AddReminderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AutotagCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.CacheCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.DeleteCacheCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.FavoriteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.OfflineCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class MarkParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        case FavoriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        case FavoriteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new FavoriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        case GotoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new GotoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return new TabCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new UndoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new RedoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        case AddFolderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new AddFolderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        case AddReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return new AddReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        case AutotagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new AutotagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        case CacheCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new CacheCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        case DeleteCacheCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new DeleteCacheCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        case OfflineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new OfflineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 26,
      "openorclose": 16,
      "TSAI-HSIAO-HAN": 4,
      "Na-Nazhou": 17,
      "kxyoke": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/OfflineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.OfflineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Parses input arguments and creates a new OfflineCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class OfflineCommandParser implements Parser\u003cOfflineCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public OfflineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new OfflineCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, OfflineCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static final String DATE_FORMATTER \u003d \"dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Parses a {@code String folder} into a {@code Folder}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @throws ParseException if the given {@code folder} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static Folder parseFolder(String folder) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(folder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String trimmedFolder \u003d folder.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!Folder.isValidFolder(trimmedFolder)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new ParseException(Folder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new Folder(trimmedFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Empty remarks will be replaced by the default {@code Remark}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws ParseException if the given {@code remark} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (Remark.isEmptyRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Remark.getDefaultRemark();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses a {@code String url} into a {@code Url}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws ParseException if the given {@code url} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Url parseUrl(String url) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!Url.isValidUrl(trimmedUrl)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new ParseException(Url.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new Url(trimmedUrl);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Parses a {@code String note} into a {@code Note}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @throws ParseException if the given {@code note} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static Note parseNote(String note) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        String trimmedNote \u003d note.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (!Note.isValidNote(note)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return new Note(trimmedNote);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Parses a {@code String time} into a {@code LocalDateTime}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static LocalDateTime parseTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        LocalDateTime getTime;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            getTime \u003d LocalDateTime.parse(trimmedTime, formatter);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new ParseException(\"Invalid time format! Please use the following format: \" + DATE_FORMATTER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return getTime;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Parses to get the formatted time from {@code time}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param time the time to parse."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return the formatted time."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static String getFormattedTime(LocalDateTime time) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        String formatTime \u003d time.format(formatter);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return formatTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 29,
      "TSAI-HSIAO-HAN": 55,
      "openorclose": 16,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add leetcode u/ https://leetcode.com t/ coding\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "Na-Nazhou": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/RedoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Parses input arguments and creates a new RedoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class RedoCommandParser implements Parser\u003cRedoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RedoCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * and returns a RedoCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public RedoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return new RedoCommand(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(trimmedArgs)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                throw new ParseException(\"Step is not a non-zero unsigned integer.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            int step \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new RedoCommand(step);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RedoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 35
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/TabCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.TabCommand.Tab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Parses input arguments and creates a new TabCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class TabCommandParser implements Parser\u003cTabCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TabCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * and returns a TabCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public TabCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return new TabCommand(parseTab(args));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Parses a {@code String args} into a {@code Tab}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * {@code args} is valid if it is either 1, 2 or 3, or the keywords of tab."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param args A valid argument of Tab"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return The corresponding tab"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @throws ParseException if the given {@code arg} is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static Tab parseTab(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        TabCommand.Tab tab;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            tab \u003d parseTabIndex(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } catch (ParseException pe_index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                tab \u003d parseTabKeyword(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            } catch (ParseException pe_kw) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                throw pe_index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return tab;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Parses a {@code String arg} into a {@code Tab}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Parsing will be successful only if {@code arg} is either \"1\", \"2\" or \"3\"."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param arg The argument of a tab command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return The corresponding tab"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @throws ParseException if the given {@code arg} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static Tab parseTabIndex(String arg) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            index \u003d Integer.parseInt(arg.strip());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return convertIndexToTabType(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Converts an {@code Index} into a {@code Tab}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param index A one-based index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return The corresponding tab"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @throws ParseException if index does not represent 1, 2 or 3."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private static Tab convertIndexToTabType(int index) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        Tab type \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            type \u003d Tab.DASHBOARD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            type \u003d Tab.ONLINE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            type \u003d Tab.OFFLINE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            throw new ParseException(TabCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Parses a {@code String arg} into a {@code Tab}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Parsing will be successful only if {@code arg} is either \"dash\", \"on\" or \"off\"."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param arg The argument of a tab command"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return The corresponding tab"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @throws ParseException if the given {@code arg} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static Tab parseTabKeyword(String arg) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        Tab type \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        switch (arg.toLowerCase().strip()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case \"dash\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            type \u003d Tab.DASHBOARD;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case \"on\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            type \u003d Tab.ONLINE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case \"off\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            type \u003d Tab.OFFLINE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            throw new ParseException(TabCommand.MESSAGE_INVALID_KEYWORD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 126
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/UndoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Parses input arguments and creates a new UndoCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class UndoCommandParser implements Parser\u003cUndoCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UndoCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * and returns a UndoCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public UndoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return new UndoCommand(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(trimmedArgs)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                throw new ParseException(\"The number of steps \" + trimmedArgs + \" is not a non-zero unsigned integer.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            int step \u003d Integer.parseInt(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return new UndoCommand(step);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 35
    }
  },
  {
    "path": "src/main/java/seedu/mark/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/Mark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.AutotagController;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.autotag.BookmarkTagger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.UniqueBookmarkList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.ReminderAssociation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Wraps all data at the bookmark-manager level"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Duplicates are not allowed (by .isSameBookmark comparison)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Mark implements ReadOnlyMark {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final UniqueBookmarkList bookmarks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final FolderStructure folderStructure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final ReminderAssociation reminderAssociation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final AutotagController autotagController;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Mark() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmarks \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        folderStructure \u003d new FolderStructure(Folder.ROOT_FOLDER, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        reminderAssociation \u003d new ReminderAssociation();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        autotagController \u003d new AutotagController(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates an instance of Mark using the Bookmarks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Mark(ReadOnlyMark toBeCopied) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Replaces the contents of the bookmark list with {@code bookmarks}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code bookmarks} must not contain duplicate bookmarks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks(List\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.bookmarks.setBookmarks(bookmarks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Resets the existing data of this {@code Mark} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void resetData(ReadOnlyMark newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        setBookmarks(newData.getBookmarkList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        setFolderStructure(newData.getFolderStructure().clone());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        setAutotagController(newData.getAutotagController());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    //// bookmark-level operations"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if a bookmark with the same identity as {@code bookmark} exists in Mark."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean hasBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(bookmark);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return bookmarks.contains(bookmark);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds a bookmark to Mark."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The bookmark must not already exist in Mark."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addBookmark(Bookmark p) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmarks.add(p);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Replaces the given bookmark {@code target} in the list with {@code editedBookmark}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code target} must exist in Mark."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The bookmark identity of {@code editedBookmark} must not be the same as another"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * existing bookmark in Mark."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark(Bookmark target, Bookmark editedBookmark) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(editedBookmark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmarks.setBookmark(target, editedBookmark);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Removes {@code key} from this {@code Mark} instance."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code key} must exist in Mark."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void removeBookmark(Bookmark key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmarks.remove(key);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    //// folder operations"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Replaces the folder structure with the specified {@code folderStructure}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void setFolderStructure(FolderStructure folderStructure) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folderStructure.getSubfolders().clear();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folderStructure.getSubfolders().addAll(folderStructure.getSubfolders());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Creates a new folder with name {@code folder} under {@code parentFolder}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * {@code folder} must not exist."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * {@code parentFolder} must exist."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void addFolder(Folder folder, Folder parentFolder) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folderStructure.addFolder(folder, parentFolder);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //// reminder operations"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Replaces the association of reminder association with the specified {@code association}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param association the specified association that is used."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void setReminderAssociation(ObservableMap\u003cBookmark, Reminder\u003e association) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.reminderAssociation.setAssociation(association);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Gets a list of all reminders in time ascending order."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return a list of reminder in time ascending order."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return this.reminderAssociation.getReminderList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Adds a reminder that opens a specific bookmark."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark the bookmark that is opened by the reminder."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param reminder the reminder to be added."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void addReminder(Bookmark bookmark, Reminder reminder) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.reminderAssociation.addReminder(bookmark, reminder);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Removes a specific reminder."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param reminder the reminder to be removed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void removeReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.reminderAssociation.deleteReminder(reminder);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Edits a specific reminder."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param targetReminder the reminder to be edited."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param replaceReminder the edited reminder."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void editReminder(Reminder targetReminder, Reminder replaceReminder) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.reminderAssociation.setReminder(targetReminder, replaceReminder);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    //// autotag controller operations"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Replaces the taggers in the current {@code AutotagController} with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * taggers from {@code autotagController}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setAutotagController(AutotagController autotagController) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(autotagController);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.autotagController.removeAllTaggers();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        autotagController.getTaggers().forEach(this.autotagController::addTagger);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean hasTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return autotagController.hasTagger(tagger);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        autotagController.addTagger(tagger);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyAllTaggers() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        setBookmarks(autotagController.applyTaggersToList(getBookmarkList()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    //// favorite operations"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Tags the specified bookmark as a favorite bookmark."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param bookmark the bookmark to be added to the favorites"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void favoriteBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkTagger favoriteTagger \u003d new BookmarkTagger(new Tag(\"Favorite\"));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        setBookmark(bookmark, favoriteTagger.applyTag(bookmark));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return bookmarks.asUnmodifiableObservableList().size() + \" bookmarks\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ObservableList\u003cBookmark\u003e getBookmarkList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return bookmarks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public FolderStructure getFolderStructure() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return folderStructure;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ReminderAssociation getReminderAssociation() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return reminderAssociation;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public AutotagController getAutotagController() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return autotagController;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return getFolderStructure().hasFolder(folder);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof Mark // instanceof handles nulls"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 bookmarks.equals(((Mark) other).bookmarks)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 folderStructure.equals(((Mark) other).folderStructure));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Checks if the bookmark already has reminder."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark the bookmark to check."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return whether the bookmark already has a reminder."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean isBookmarkHasReminder(Bookmark bookmark) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return reminderAssociation.isBookmarkHasReminder(bookmark);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return Objects.hash(bookmarks, folderStructure);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 144,
      "openorclose": 42,
      "TSAI-HSIAO-HAN": 70,
      "Na-Nazhou": 15
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * {@code Predicate} that always evaluates to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Predicate\u003cBookmark\u003e PREDICATE_SHOW_ALL_BOOKMARKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /** {@code Predicate} that always evaluate to false */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    Predicate\u003cBookmark\u003e PREDICATE_SHOW_NO_BOOKMARKS \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the user prefs\u0027 Mark file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Path getMarkFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the user prefs\u0027 Mark file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void setMarkFilePath(Path markFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Replaces Mark data with the data in {@code mark}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void setMark(ReadOnlyMark mark);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns the Mark"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    ReadOnlyMark getMark();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if a bookmark with the same identity as {@code bookmark} exists in Mark."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    boolean hasBookmark(Bookmark bookmark);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Deletes the given bookmark."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The bookmark must exist in Mark."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void deleteBookmark(Bookmark target);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Tags the given bookmark as a favorite bookmark."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * The bookmark must exist in Mark."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    void favoriteBookmark(Bookmark target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds the given bookmark."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code bookmark} must not already exist in Mark."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void addBookmark(Bookmark bookmark);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Replaces the given bookmark {@code target} with {@code editedBookmark}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code target} must exist in Mark."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The bookmark identity of {@code editedBookmark} must not be the same as another existing bookmark in Mark."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void setBookmark(Bookmark target, Bookmark editedBookmark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Attempts to add bookmarks from the given list to Mark. Bookmarks that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * already exist are ignored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void addBookmarks(List\u003cBookmark\u003e bookmarksToAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns an unmodifiable view of the filtered bookmark list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    ObservableList\u003cBookmark\u003e getFilteredBookmarkList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Updates the filter of the filtered bookmark list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void updateFilteredBookmarkList(Predicate\u003cBookmark\u003e predicate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    void addFolder(Folder folder, Folder parentFolder);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    boolean hasFolder(Folder folder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether Mark contains this {@code tagger}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    boolean hasTagger(SelectiveBookmarkTagger tagger);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds a {@code tagger} to Mark."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void addTagger(SelectiveBookmarkTagger tagger);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Activates all taggers in Mark to apply tags to Mark\u0027s bookmarks based"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * on their respective conditions."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void applyAllTaggers();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Wrapper for current url."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * null if not present."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    SimpleObjectProperty\u003cUrl\u003e getCurrentUrlProperty();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns the current url."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * null if not present."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    Url getCurrentUrl();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Sets the current url."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    void setCurrentUrl(Url url);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns true if the model has previous Mark states to restore."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps The number of previous Mark states to check"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    boolean canUndoMark(int steps);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    int getMaxStepsToUndo();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns true if the model has undone Mark states to restore."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps The number of undone Mark states to check"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    boolean canRedoMark(int steps);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    int getMaxStepsToRedo();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Restores the model\u0027s Mark to its previous state."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps The number of steps to undo"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @return The record"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    String undoMark(int steps);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Restores the model\u0027s Mark to its previously undone state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps The number of steps to redo"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @return The record"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    String redoMark(int steps);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Saves the current Mark state for undo/redo."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param record The record for the state"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    void saveMark(String record);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Adds a reminder that opens a specific bookmark."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    void addReminder(Bookmark bookmark, Reminder reminder);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Removes a specific reminder."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    void removeReminder(Reminder reminder);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Edits a specific reminder."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    void editReminder(Reminder targetReminder, Reminder editedReminder);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Checks if the bookmark already has reminder."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark the bookmark to check."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return whether the bookmark already has a reminder."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    boolean isBookmarkHasReminder(Bookmark bookmark);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Gets all reminders in ascending time order."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminders();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Returns a view of the annotated document."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    ObservableList\u003cParagraph\u003e getObservableDocument();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Updates the view of document to the document given."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param doc Document to update view and be shown."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    void updateDocument(OfflineDocument doc);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Updates the specified bookmark to be the one to display its cache"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    void updateCurrentDisplayedCache(Bookmark bookmarkToDisplayCache);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Returns the observable of the bookmark with its cache currently displayed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @return the observable bookmark property"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    SimpleObjectProperty\u003cBookmark\u003e getBookmarkDisplayingCacheProperty();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 50,
      "openorclose": 15,
      "TSAI-HSIAO-HAN": 29,
      "Na-Nazhou": 81,
      "kxyoke": 14,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.ParagraphIdentifier;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Represents the in-memory model of the Mark data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final VersionedMark versionedMark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final FilteredList\u003cBookmark\u003e filteredBookmarks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final SimpleObjectProperty\u003cUrl\u003e currentUrl \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private final ObservableList\u003cParagraph\u003e annotatedDocument;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final SimpleObjectProperty\u003cBookmark\u003e bookmarkToDisplayCache \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Initializes a ModelManager with the given mark and userPrefs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ModelManager(ReadOnlyMark mark, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(mark, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        logger.fine(\"Initializing with Mark: \" + mark + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark \u003d new VersionedMark(mark);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        filteredBookmarks \u003d new FilteredList\u003c\u003e(versionedMark.getBookmarkList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        annotatedDocument \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(new Mark(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return userPrefs.getMarkFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setMarkFilePath(Path markFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(markFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userPrefs.setMarkFilePath(markFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mark \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setMark(ReadOnlyMark mark) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark.resetData(mark);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ReadOnlyMark getMark() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean hasBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(bookmark);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.hasBookmark(bookmark);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void deleteBookmark(Bookmark target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark.removeBookmark(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void favoriteBookmark(Bookmark target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark.favoriteBookmark(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark.addBookmark(bookmark);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        updateFilteredBookmarkList(PREDICATE_SHOW_ALL_BOOKMARKS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark(Bookmark target, Bookmark editedBookmark) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(target, editedBookmark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark.setBookmark(target, editedBookmark);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addBookmarks(List\u003cBookmark\u003e bookmarksToAdd) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(bookmarksToAdd);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (Bookmark bookmark : bookmarksToAdd) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (hasBookmark(bookmark)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                logger.fine(\"Duplicate bookmark was not added: \" + bookmark);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.fine(\"Bookmark added: \" + bookmark);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            addBookmark(bookmark);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void addFolder(Folder folder, Folder parentFolder) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireAllNonNull(folder, parentFolder);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark.addFolder(folder, parentFolder);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.hasFolder(folder);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean hasTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(tagger);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return versionedMark.hasTagger(tagger);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(tagger);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        versionedMark.addTagger(tagger);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyAllTaggers() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        versionedMark.applyAllTaggers();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Bookmark List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Bookmark} backed by the internal list of"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code versionedMark}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ObservableList\u003cBookmark\u003e getFilteredBookmarkList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return filteredBookmarks;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void updateFilteredBookmarkList(Predicate\u003cBookmark\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        filteredBookmarks.setPredicate(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean canUndoMark(int steps) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.canUndo(steps);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public int getMaxStepsToUndo() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.getMaxStepsToUndo();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean canRedoMark(int steps) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.canRedo(steps);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public int getMaxStepsToRedo() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.getMaxStepsToRedo();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String undoMark(int steps) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.undo(steps);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String redoMark(int steps) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.redo(steps);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void saveMark(String record) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        versionedMark.save(record);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Current bookmark \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public SimpleObjectProperty\u003cUrl\u003e getCurrentUrlProperty() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return currentUrl;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public Url getCurrentUrl() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return currentUrl.getValue();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void setCurrentUrl(Url url) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentUrl.setValue(url);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Current offline \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ObservableList\u003cParagraph\u003e getObservableDocument() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return annotatedDocument;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void updateDocument(OfflineDocument doc) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        annotatedDocument.setAll(new SortedList\u003c\u003e("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                //TODO: change this to link to proper offline document"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                FXCollections.observableArrayList(doc.getCollection()), ("
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                Paragraph p1, Paragraph p2) -\u003e {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            ParagraphIdentifier pid1 \u003d p1.getId();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            ParagraphIdentifier pid2 \u003d p2.getId();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return pid1.compareTo(pid2);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return versionedMark.equals(other.versionedMark)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 filteredBookmarks.equals(other.filteredBookmarks)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 (currentUrl.getValue() \u003d\u003d null"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                ? other.currentUrl.getValue() \u003d\u003d null"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                : currentUrl.getValue().equals(other.currentUrl.getValue()));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminder \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Adds a reminder that opens a specific bookmark."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark the bookmark to be opened."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param reminder the reminder that is added."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void addReminder(Bookmark bookmark, Reminder reminder) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        versionedMark.addReminder(bookmark, reminder);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Removes a specific reminder."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param reminder the reminder to be removed."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void removeReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        versionedMark.removeReminder(reminder);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Edits a specific reminder."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param targetReminder the reminder to be edited."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param editedReminder the edited reminder."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void editReminder(Reminder targetReminder, Reminder editedReminder) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        versionedMark.editReminder(targetReminder, editedReminder);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Checks if the bookmark already has reminder."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark the bookmark to check."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return whether the bookmark already has a reminder."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean isBookmarkHasReminder(Bookmark bookmark) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return versionedMark.isBookmarkHasReminder(bookmark);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Gets all reminders in ascending time order."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return a list of all reminders in ascending time order."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return versionedMark.getReminders();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cache \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void updateCurrentDisplayedCache(Bookmark bookmarkToDisplayCache) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.bookmarkToDisplayCache.set(bookmarkToDisplayCache);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public SimpleObjectProperty\u003cBookmark\u003e getBookmarkDisplayingCacheProperty() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return bookmarkToDisplayCache;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 69,
      "openorclose": 34,
      "TSAI-HSIAO-HAN": 51,
      "Na-Nazhou": 78,
      "kxyoke": 17,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/ReadOnlyMark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.AutotagController;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.ReminderAssociation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Unmodifiable view of a Mark."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public interface ReadOnlyMark {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns an unmodifiable view of the bookmarks list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * This list will not contain any duplicate bookmarks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    ObservableList\u003cBookmark\u003e getBookmarkList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    FolderStructure getFolderStructure();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    ReminderAssociation getReminderAssociation();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    AutotagController getAutotagController();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 21,
      "openorclose": 2,
      "TSAI-HSIAO-HAN": 2
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Path getMarkFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Path markFilePath \u003d Path.of(\"data\" , \"mark.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        setMarkFilePath(newUserPrefs.getMarkFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return markFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setMarkFilePath(Path markFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(markFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.markFilePath \u003d markFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 markFilePath.equals(o.markFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return Objects.hash(guiSettings, markFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + markFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 11,
      "Na-Nazhou": 1,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/VersionedMark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * {@code Mark} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class VersionedMark extends Mark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final List\u003cMarkStateRecord\u003e markStateRecords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private int currentPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public VersionedMark(ReadOnlyMark initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        markStateRecords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        markStateRecords.add(new MarkStateRecord(\"\", new Mark(initialState)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentPointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Appends a copy of the current {@code Mark} state to the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Undone states after the current state pointer are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param record The record for the state"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void save(String record) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        markStateRecords.add(new MarkStateRecord(record, new Mark(this)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentPointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        markStateRecords.subList(currentPointer + 1, markStateRecords.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String getUndoRecords(int start, int end) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        StringBuilder records \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        for (int i \u003d end; i \u003e\u003d start; i--) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            records.append(markStateRecords.get(i).getRecord())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return records.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String getRedoRecords(int start, int end) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        StringBuilder records \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        for (int i \u003d start; i \u003c\u003d end; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            records.append(markStateRecords.get(i).getRecord())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    .append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return records.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Restores the Mark to its previous state."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String undo(int steps) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (!canUndo(steps)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new CannotUndoMarkException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String records \u003d getUndoRecords(currentPointer - steps + 1, currentPointer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentPointer \u003d currentPointer - steps;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        resetData(markStateRecords.get(currentPointer).getState());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return records;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Restores the Mark to its previously undone state."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String redo(int steps) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (!canRedo(steps)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            throw new CannotRedoMarkException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String records \u003d getRedoRecords(currentPointer + 1, currentPointer + steps);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentPointer \u003d currentPointer + steps;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        resetData(markStateRecords.get(currentPointer).getState());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return records;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns true if {@code undo()} has Mark states to undo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean canUndo(int steps) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return currentPointer \u003e (steps - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public int getMaxStepsToUndo() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return currentPointer;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns true if {@code redo()} has Mark states to redo."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param steps"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean canRedo(int steps) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return currentPointer + steps \u003c markStateRecords.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public int getMaxStepsToRedo() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return markStateRecords.size() - currentPointer - 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (!(other instanceof VersionedMark)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        VersionedMark otherVersionedMark \u003d (VersionedMark) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return super.equals(otherVersionedMark)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 markStateRecords.equals(otherVersionedMark.markStateRecords)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 currentPointer \u003d\u003d otherVersionedMark.currentPointer;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static class CannotUndoMarkException extends RuntimeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        private CannotUndoMarkException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            super(\"Current state pointer at start of markState list, unable to undo.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static class CannotRedoMarkException extends RuntimeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        private CannotRedoMarkException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            super(\"Current state pointer at end of markState list, unable to redo.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Represents a state record for Mark."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public class MarkStateRecord {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        /** Record about which action leads to the state **/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        private String record;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        private ReadOnlyMark state;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        public MarkStateRecord(String record, ReadOnlyMark state) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            this.record \u003d record;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            this.state \u003d state;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        public ReadOnlyMark getState() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return state;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        public String getRecord() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return record;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    || (other instanceof MarkStateRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    \u0026\u0026 record.equals(((MarkStateRecord) other).record)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    \u0026\u0026 state.equals(((MarkStateRecord) other).state)); // state check"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 174
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/AnnotationNote.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents a note that is part of an annotation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class AnnotationNote {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static final String MESSAGE_BLANK_NOTE \u003d \"Annotation note content should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Note content.*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public AnnotationNote(String content) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Creates a note for annotating a paragraph."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * //TODO: need to specify null pointer exception?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param content Plaintext content of note"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return the note"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @throws IllegalValueException if content is blank."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static AnnotationNote makeNote(String content) throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (content.isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            throw new IllegalValueException(MESSAGE_BLANK_NOTE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return new AnnotationNote(content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                || (other instanceof AnnotationNote"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 ((AnnotationNote) other).content.equals(this.content));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 49
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/Highlight.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents the highlight colour of an annotation to a paragraph."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class Highlight {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 7
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/OfflineDocument.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.jsoup.Jsoup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.jsoup.nodes.Document;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.jsoup.nodes.Element;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.jsoup.select.Elements;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents the offline document (with annotations). An offline document contains content from a cache,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * whose paragraphs are numbered to support CLI selection of paragraphs to annotate."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class OfflineDocument {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static final String OFFLINE_HTML_EXAMPLE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \"\u003cdiv id\u003d\\\"readability-page-1\\\" class\u003d\\\"page\\\"\u003e\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \" \u003cdiv id\u003d\\\"storytext\\\"\u003e \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cdiv id\u003d\\\"js-ie-storytop\\\"\u003e    \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"   \u003cdiv id\u003d\\\"cnnplayer_cvp_story_0\\\"\u003e \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"    \u003cdiv\u003e \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"     \u003cdiv id\u003d\\\"vid0\\\" href\u003d\\\"/video/news/2015/11/30/homeboy-industries-priest.cnnmoney\\\" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"onclick\u003d\\\"javascript:VideoPlayerManager.playVideos(\u0027cvp_story_0\u0027); return false;\\\"\u003e \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"      \u003cvideo id\u003d\\\"cvp_story_0\\\" preload\u003d\\\"metadata\\\" poster\u003d\\\"\\\" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"src\u003d\\\"http://ht3.cdn.turner.com/money/big/news/2015/11/30/\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"homeboy-industries-priest.cnnmoney_1024x576.mp4\\\" controls\u003d\\\"controls\\\" width\u003d\\\"300\\\" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"height\u003d\\\"169\\\"\u003e\u003c/video\u003e \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"      \u003cdiv id\u003d\\\"cvp_story_0_endSlate\\\"\u003e \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"       \u003cdiv\u003e \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"        \u003cdiv\u003e  \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"         \u003cimg src\u003d\\\"\\\" alt\u003d\\\"\\\" width\u003d\\\"620\\\" height\u003d\\\"348\\\"\u003e \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"        \u003c/div\u003e  \\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"       \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"      \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"     \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"    \u003c/div\u003e  \\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"   \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003c/div\u003e  \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003ch2\u003eThe U.S. has long been heralded as a land of opportunity -- a place where anyone can \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"succeed regardless of the economic class they were born into.\u003c/h2\u003e \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e But a new report released on Monday by \u003ca href\u003d\\\"http://web.stanford.edu/group/scspi-dev/\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"cgi-bin/\\\" target\u003d\\\"_blank\\\"\u003eStanford University\u0027s Center on Poverty and Inequality\u003c/a\u003e calls \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"that into question. \u003c/p\u003e  \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e The report assessed poverty levels, income and wealth inequality, economic mobility and \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"unemployment levels among 10 wealthy countries with social welfare programs. \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cdiv id\u003d\\\"smartassetcontainer\\\"\u003e \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"   \u003cdiv\u003e \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"    \u003cdiv\u003e \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"     \u003cdiv id\u003d\\\"smartasset-article\\\"\u003e \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"      \u003cdiv\u003e \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"       \u003cp\u003e Powered by SmartAsset.com \u003c/p\u003e   \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"       \u003cimg src\u003d\\\"https://smrt.as/ck\\\"\u003e \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"      \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"     \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"    \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"   \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003c/div\u003e \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e Among its key findings: the class you\u0027re born into matters much more in the U.S. \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"than many of the other countries. \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e As the \u003ca href\u003d\\\"http://web.stanford.edu/group/scspi-dev/cgi-bin/publications/\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"state-union-report\\\" target\u003d\\\"_blank\\\"\u003ereport states\u003c/a\u003e: \\\"[T]he birth lottery matters more \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"in the U.S. than in most well-off countries.\\\" \u003c/p\u003e  \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e But this wasn\u0027t the only finding that suggests the U.S. isn\u0027t quite living up to its \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"reputation as a country where everyone has an equal chance to get ahead through sheer will and \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"hard work. \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e \u003ca href\u003d\\\"http://money.cnn.com/2016/01/11/news/economy/rich-taxes/index.html?iid\u003dEL\\\"\u003e\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"\u003cspan\u003eRelated: Rich are paying more in taxes but not as much as they used to\u003c/span\u003e\u003c/a\u003e \u003c/p\u003e  \\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e The report also suggested the U.S. might not be the \\\"jobs machine\\\" it thinks it is, \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"when compared to other countries. \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e It ranked near the bottom of the pack based on the levels of unemployment among men and \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"women of prime working age. The study determined this by taking the ratio of employed men and \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"women between the ages of 25 and 54 compared to the total population of each country. \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e The overall rankings of the countries were as follows:\u003cspan\u003e \u003cbr\u003e1. Finland \u003cspan\u003e \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"\u003cbr\u003e2. Norway\u003cspan\u003e \u003cbr\u003e3. Australia \u003cspan\u003e \u003cbr\u003e4. Canada\u003cspan\u003e \u003cbr\u003e5. Germany\u003cspan\u003e \u003cbr\u003e6. \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"France\u003cspan\u003e \u003cbr\u003e7. United Kingdom \u003cspan\u003e \u003cbr\u003e8. Italy\u003cspan\u003e \u003cbr\u003e9. Spain\u003cspan\u003e \u003cbr\u003e10. United \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"States \u003c/span\u003e\u003c/span\u003e \u003c/span\u003e \u003c/span\u003e \u003c/span\u003e \u003c/span\u003e \u003c/span\u003e \u003c/span\u003e \u003c/span\u003e \u003c/span\u003e \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e The low ranking the U.S. received was due to its extreme levels of wealth and income \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"inequality and the ineffectiveness of its \\\"safety net\\\" -- social programs aimed at reducing \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"poverty. \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e \u003ca href\u003d\\\"http://money.cnn.com/2016/01/05/news/economy/chicago-segregated/\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"index.html?iid\u003dEL\\\"\u003e\u003cspan\u003eRelated: Chicago is America\u0027s most segregated city\u003c/span\u003e\u003c/a\u003e \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e The report concluded that the American safety net was ineffective because it provides \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"only half the financial help people need. Additionally, the levels of assistance in the U.S. \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"are generally lower than in other countries. \u003c/p\u003e   \\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"  \u003cp\u003e \u003cspan\u003e CNNMoney (New York) \u003c/span\u003e \u003cspan\u003eFirst published February 1, 2016: 1:28 AM ET\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"\u003c/span\u003e \u003c/p\u003e \\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \" \u003c/div\u003e\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    + \"\u003c/div\u003e\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static final Document OFFLINE_DOC_EXAMPLE \u003d Jsoup.parse(OFFLINE_HTML_EXAMPLE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Paragraphs with notes. */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private HashMap\u003cParagraphIdentifier, Paragraph\u003e paragraphs;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public OfflineDocument(Document doc) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(doc);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.paragraphs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        loadDocumentIntoParagraphs(doc);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public OfflineDocument(String doc) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this(Jsoup.parse(doc));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Loads Readability4J-parsed html document into their respective paragraphs."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Document is fresh from saved cache; no annotations are present."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param doc JSoup document parsed from Readability4J html output"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private void loadDocumentIntoParagraphs(Document doc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        Elements paragraphs \u003d doc.select(\"p\"); //select every element use *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        int idx \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        for (Element p : paragraphs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            //System.out.println(p.text());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            idx++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            Paragraph para \u003d new TrueParagraph(Index.fromOneBased(idx), new ParagraphContent(p.text()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            //TODO: transfrom ROUGH TESTING into tests:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                para.addAnnotation(new Highlight(), AnnotationNote.makeNote(\"this is a note\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                //TODO: what to do if fails; change exception class too"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            this.paragraphs.put(para.getId(), para);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Loads stored annotations to offline document."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void loadAnnotations() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO: idk ;-;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Loads highlight onto specified paragraph."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param pid The id of the paragrapb to highlight"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param hl The highlight"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void loadAnnotation(ParagraphIdentifier pid, Highlight hl) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        paragraphs.get(pid).addAnnotation(hl);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Loads both the highlight and note onto specified paragraph."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Note must not be null or blank."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param pid The id of the paragraph to annotate"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param hl The highlight"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param note The non-empty note"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void loadAnnotation(ParagraphIdentifier pid, Highlight hl, AnnotationNote note) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        paragraphs.get(pid).addAnnotation(hl, note);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Returns a list of annotated paragraphs of offline document."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return the list of paragraphs"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public List\u003cParagraph\u003e getCollection() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return new ArrayList\u003c\u003e(paragraphs.values());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Temporary test driver as proof of concept."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        URL rsrc \u003d OfflineDocument.class.getClassLoader().getResource(\"view/sample_cache.html\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            System.out.println(Paths.get(rsrc.toURI()).toString());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            String html \u003d Files.readString(Paths.get(rsrc.toURI()), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            Document doc \u003d Jsoup.parse(html);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            new OfflineDocument(doc);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 5,
      "kxyoke": 182
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/Paragraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * An interface for Paragraphs of offline documents."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Paragraphs are to support annotations: highlights and notes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public interface Paragraph {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphIdentifier getId();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphContent getParagraphContent();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean hasHighlight();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public Highlight getHighlight();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean hasNote();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public AnnotationNote getNote();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void addAnnotation(Highlight colour);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void addAnnotation(Highlight colour, AnnotationNote note);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 22
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/ParagraphContent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents the contents of an offline document paragraph."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Content supports only {@code String} at status quo."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class ParagraphContent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphContent(String content) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(content); //but can be blank, as in phantom paragraph"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 27
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/ParagraphIdentifier.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents the identifier for a paragraph. Each identifier includes a {@code type} and an {@code index}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class ParagraphIdentifier implements Comparable\u003cParagraphIdentifier\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private ParagraphType type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphIdentifier(Index idx, ParagraphType type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(idx);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.index \u003d idx;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                || (other instanceof ParagraphIdentifier"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 ((ParagraphIdentifier) other).index \u003d\u003d this.index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 ((ParagraphIdentifier) other).type \u003d\u003d this.type);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return Objects.hash(index, type);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public int compareTo(ParagraphIdentifier other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (this.type \u003d\u003d ParagraphType.EXIST) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if (other.type \u003d\u003d ParagraphType.EXIST) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                return this.index.getOneBased() - other.index.getOneBased();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if (other.type \u003d\u003d ParagraphType.EXIST) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                return this.index.getOneBased() - other.index.getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return String.format(\"%s%d\", type.convert(), index.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Type of paragraph. Paragraphs that {@code EXIST} have content; those that are {@code STRAY} are previously"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * detached from their original paragraphs and currently attached to phantom paragraphs (no content)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static enum ParagraphType {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        EXIST, STRAY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "         * Converts the paragraph type into a single character for easy reference."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "         * @return \"p\" if is true paragraph, else \"s\" if is phantom"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        public String convert() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if (this \u003d\u003d EXIST) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                return \"P\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return \"S\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 78
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/PhantomParagraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents a paragraph that does not exist in the original website."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * This paragraph adopts stray notes for the time that they remain stray."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class PhantomParagraph implements Paragraph {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Paragraph identifier.*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private ParagraphIdentifier id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Paragraph notes, if any.*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private AnnotationNote note;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public PhantomParagraph(Index id) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ParagraphIdentifier pi \u003d new ParagraphIdentifier(id, ParagraphIdentifier.ParagraphType.STRAY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.id \u003d pi;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void addAnnotation(Highlight colour) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO: phantom paragraph implmentation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void addAnnotation(Highlight colour, AnnotationNote note) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphIdentifier getId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphContent getParagraphContent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return new ParagraphContent(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Vacuously true; phantom paragraph has empty string as content so highlight does not matter."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * TODO: rethink bout this"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean hasHighlight() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public Highlight getHighlight() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean hasNote() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return note !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public AnnotationNote getNote() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 66
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/annotation/TrueParagraph.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Represents a paragraph that exists in the cache."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * TODO: make paragraphs immutable (so observable list does not break)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class TrueParagraph implements Paragraph {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Paragraph identifier.*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private ParagraphIdentifier id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Paragraph content. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private ParagraphContent content;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Paragraph highlight. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Highlight colour;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /** Paragraph notes, if any.*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private AnnotationNote note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public TrueParagraph(Index id, ParagraphContent content) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ParagraphIdentifier pi \u003d new ParagraphIdentifier(id, ParagraphIdentifier.ParagraphType.EXIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.id \u003d pi;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        colour \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        note \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Adds an annotation with only the highlight."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param colour The higlight to colour the paragraph"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void addAnnotation(Highlight colour) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(colour);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.colour \u003d colour;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Adds an annotation with both highlight and note."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param colour The highlight to colour the paragraph"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param note The note to annotate the paragraph with"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void addAnnotation(Highlight colour, AnnotationNote note) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        addAnnotation(colour);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphIdentifier getId() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ParagraphContent getParagraphContent() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return this.content;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean hasHighlight() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return colour !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public Highlight getHighlight() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return this.colour;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean hasNote() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return note !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public AnnotationNote getNote() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 83
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/autotag/AutotagController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.autotag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Manages {@code SelectiveBookmarkTagger}s in Mark."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class AutotagController {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final List\u003cSelectiveBookmarkTagger\u003e taggers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new {@code AutotagController} with an empty list of taggers."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public AutotagController() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.taggers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new {@code AutotagController} with the given list of taggers."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param taggers List of {@code SelectiveBookmarkTagger}s to manage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public AutotagController(List\u003cSelectiveBookmarkTagger\u003e taggers) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.taggers \u003d taggers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a shallow copy of the {@code SelectiveBookmarkTagger} list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * used by this {@code AutotagController}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public List\u003cSelectiveBookmarkTagger\u003e getTaggers() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new ArrayList\u003c\u003e(this.taggers);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Checks whether the given {@code SelectiveBookmarkTagger} exists in this"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code AutotagController}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tagger SelectiveBookmarkTagger to be checked."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return true if the {@code tagger} exists, and false otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean hasTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(tagger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return taggers.stream().anyMatch(tagger::equals);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds a {@code SelectiveBookmarkTagger} to the existing list of taggers"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * to apply."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tagger A new SelectiveBookmarkTagger to add."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(tagger);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        taggers.add(tagger);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Removes all taggers from this {@code AutotagController}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void removeAllTaggers() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        taggers.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a {@code Bookmark} that results from selectively applying all"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * of the current controller\u0027s {@code taggers} to the given"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code Bookmark}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param bookmark Bookmark to be tagged"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return A tagged Bookmark"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Bookmark applyTaggers(Bookmark bookmark) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(bookmark);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark taggedBookmark \u003d bookmark;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (SelectiveBookmarkTagger tagger : taggers) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taggedBookmark \u003d tagger.applyTagSelectively(taggedBookmark);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return taggedBookmark;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Applies each of the {@code SelectiveBookmarkTagger}s in {@code taggers}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * to all of the bookmarks in the given list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param bookmarks List of Bookmarks that each tagger should be applied to."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return List of Bookmarks containing the tagged bookmarks."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public List\u003cBookmark\u003e applyTaggersToList(List\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return bookmarks.stream().map(this::applyTaggers).collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof AutotagController // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 getTaggers().equals(((AutotagController) other).getTaggers())); // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 107
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/autotag/BookmarkTagger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.autotag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Defines a class that applies {@code Tag}s to {@code Bookmark}s."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class BookmarkTagger {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Tag tagToApply;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkTagger(Tag tag) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.tagToApply \u003d tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Tag getTagToApply() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return this.tagToApply;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Bookmark that is tagged with {@code tagToApply}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param bookmark Bookmark to be tagged."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return A new Bookmark containing {@code tagToApply}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Bookmark applyTag(Bookmark bookmark) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(bookmark);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d new HashSet\u003c\u003e(bookmark.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        updatedTags.add(new Tag(tagToApply)); // does not allow duplicate tags"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new Bookmark(bookmark.getName(), bookmark.getUrl(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                bookmark.getRemark(), bookmark.getFolder(), updatedTags, bookmark.getCachedCopies());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            || (other instanceof BookmarkTagger // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 getTagToApply().equals(((BookmarkTagger) other).getTagToApply())); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 47,
      "openorclose": 1
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/autotag/SelectiveBookmarkTagger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.autotag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A type of BookmarkTagger that tags specific Bookmarks only, based on"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * whether they match a given {@code Predicate}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class SelectiveBookmarkTagger extends BookmarkTagger {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Predicate\u003cBookmark\u003e predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public SelectiveBookmarkTagger(Tag tag, Predicate\u003cBookmark\u003e predicate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(tag);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Tests the given {@code Bookmark} and tags it only if it matches this"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code SelectiveBookmarkTagger}\u0027s {@code predicate}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param bookmark A bookmark to test and possibly tag."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return A new tagged Bookmark if the bookmark matches the predicate, and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *         the original Bookmark otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Bookmark applyTagSelectively(Bookmark bookmark) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return predicate.test(bookmark) ? super.applyTag(bookmark) : bookmark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"Tagger: Applies the tag \" + getTagToApply().toString() + \" to bookmarks\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Make a better toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 37
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/Bookmark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Represents a Bookmark in Mark."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Bookmark {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    // Identity fields (each field must be unique)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Url url;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final Folder folder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final List\u003cCachedCopy\u003e cachedCopies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public Bookmark(Name name, Url url, Remark remark, Folder folder, Set\u003cTag\u003e tags, List\u003cCachedCopy\u003e cachedCopies) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireAllNonNull(name, url, remark, folder, tags, cachedCopies);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folder \u003d folder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.cachedCopies.addAll(cachedCopies);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Url getUrl() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public Folder getFolder() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return folder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public List\u003cCachedCopy\u003e getCachedCopies() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return Collections.unmodifiableList(cachedCopies);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns true if both bookmarks have the same name or the same url."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * This defines a weaker notion of equality between two bookmarks."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean isSameBookmark(Bookmark otherBookmark) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (otherBookmark \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return otherBookmark !\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 (otherBookmark.getName().equals(getName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    || otherBookmark.getUrl().equals(getUrl()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if both bookmarks have the same identity and data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * This defines a stronger notion of equality between two bookmarks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!(other instanceof Bookmark)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark otherBookmark \u003d (Bookmark) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return otherBookmark.getName().equals(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 otherBookmark.getUrl().equals(getUrl())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 otherBookmark.getRemark().equals(getRemark())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 otherBookmark.getTags().equals(getTags())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 otherBookmark.getFolder().equals(getFolder())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 otherBookmark.getCachedCopies().equals(getCachedCopies());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return Objects.hash(name, url, remark, tags, folder, cachedCopies);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .append(\" URL: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .append(getUrl())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .append(\" Folder: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .append(getFolder())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 30,
      "openorclose": 22,
      "Na-Nazhou": 2,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/CachedCopy.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Represents a cached copy of the contents of a Bookmark."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class CachedCopy {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * The raw HTML string of the website."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public final String html;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Instantiates a new CachedCopy."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param html the html of the website"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public CachedCopy(String html) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.html \u003d html;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return Objects.hash(html);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!(other instanceof CachedCopy)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CachedCopy otherCachedCopy \u003d (CachedCopy) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return otherCachedCopy.html.equals(html);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return html;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 48
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/Folder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Represents a Folder in Mark."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidFolder(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class Folder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Folder names should be alphanumeric\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final String ROOT_FOLDER_NAME \u003d \"ROOT\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String IMPORT_FOLDER_NAME \u003d \"ImportedBookmarks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String DEFAULT_FOLDER_NAME \u003d ROOT_FOLDER_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final Folder ROOT_FOLDER \u003d new Folder(ROOT_FOLDER_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Folder IMPORT_FOLDER \u003d new Folder(IMPORT_FOLDER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public final String folderName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Constructs a {@code Folder}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param folderName A valid folder name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public Folder(String folderName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireNonNull(folderName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        checkArgument(isValidFolder(folderName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folderName \u003d folderName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Returns true if a given string is a valid folder name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static boolean isValidFolder(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            || (other instanceof Folder // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            \u0026\u0026 folderName.equals(((Folder) other).folderName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return folderName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Formats state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return folderName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "openorclose": 57
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Represents a Bookmark\u0027s name in the Mark."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.value \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "Na-Nazhou": 7,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/Remark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Represents a Bookmark\u0027s remark in Mark."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String INVALID_CHARACTER \u003d \"/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remarks can contain any characters except \" + INVALID_CHARACTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The first character of the remark must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The rest of the remark can contain any character except the invalid character."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s][^\" + INVALID_CHARACTER + \"]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"-\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if a given string is an empty remark."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static boolean isEmptyRemark(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return test.trim().equals(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a {@code Remark} with the default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Remark getDefaultRemark() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new Remark(DEFAULT_VALUE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 76
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/UniqueBookmarkList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.BookmarkNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.DuplicateBookmarkException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A list of bookmarks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A bookmark is considered unique by comparing using {@code Bookmark#isSameBookmark(Bookmark)}. As such, adding and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * updating of bookmarks uses Bookmark#isSameBookmark(Bookmark) for equality so as to ensure that the bookmark being"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * added or updated is unique in terms of identity in the UniqueBookmarkList. However, the removal of a bookmark uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Bookmark#equals(Object) so as to ensure that the bookmark with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * @see Bookmark#isSameBookmark(Bookmark)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class UniqueBookmarkList implements Iterable\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final ObservableList\u003cBookmark\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final ObservableList\u003cBookmark\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if the list contains an equivalent bookmark as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean contains(Bookmark toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBookmark);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds a bookmark to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The bookmark must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void add(Bookmark toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DuplicateBookmarkException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Replaces the bookmark {@code target} in the list with {@code editedBookmark}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The bookmark identity of {@code editedBookmark} must not be the same as another existing bookmark in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark(Bookmark target, Bookmark editedBookmark) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(target, editedBookmark);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new BookmarkNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!target.isSameBookmark(editedBookmark) \u0026\u0026 contains(editedBookmark)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DuplicateBookmarkException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        internalList.set(index, editedBookmark);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Removes the equivalent bookmark from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The bookmark must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void remove(Bookmark toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new BookmarkNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks(UniqueBookmarkList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Replaces the contents of this list with {@code bookmarks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code bookmarks} must not contain duplicate bookmarks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks(List\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireAllNonNull(bookmarks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!bookmarksAreUnique(bookmarks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DuplicateBookmarkException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        internalList.setAll(bookmarks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ObservableList\u003cBookmark\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Iterator\u003cBookmark\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof UniqueBookmarkList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookmarkList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns true if {@code bookmarks} contains only unique bookmarks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private boolean bookmarksAreUnique(List\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (int i \u003d 0; i \u003c bookmarks.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c bookmarks.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                if (bookmarks.get(i).isSameBookmark(bookmarks.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 49,
      "-": 88
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/Url.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Represents a Bookmark\u0027s URL in Mark."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUrl(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Url {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"\\\\(\\\\.\\\\-_~!\\\\$\u0026\u0027\\\\*\\\\+,;\u003d:@\\\\)\"; // (.-_~!$\u0026\u0027*+,;\u003d:@)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String NON_PERIOD_SPECIAL_CHARACTERS \u003d \"\\\\(\\\\-_~!\\\\$\u0026\u0027\\\\*\\\\+,;\u003d:@\\\\)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"URLs should be of the format \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"scheme://authority[/path][?query][#fragment][/] \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"1. The scheme should be either \u0027http\u0027, \u0027https\u0027, \u0027ftp\u0027, or \u0027file\u0027, followed by \u0027://\u0027.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"2. The authority should only contain alphanumeric characters and these special characters, including \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"the parentheses, \" + SPECIAL_CHARACTERS + \" . \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"In addition, the authority must:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"    - not start or end with a period\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"3. This can be followed by zero or more path segments. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            + \"Each path segment begins with a \u0027/\u0027 followed by zero or more alphanumeric or special characters.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"4. Next, a URL may contain a query string, which begins with a \u0027?\u0027.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"5. It may also contain a fragment after the query string (if present), which begins with a \u0027#\u0027.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"6. Finally, a URL can end with an optional slash \u0027/\u0027.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // encoded ASCII character %FF, where FF are two hexadecimal digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String ENCODED_ASCII_CHARACTER \u003d \"(%[0-9a-fA-F]{2})\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // alphanumeric, special, or encoded characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String URL_CHARACTERS \u003d \"([\\\\w\" + SPECIAL_CHARACTERS + \"]|\" + ENCODED_ASCII_CHARACTER + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // alphanumeric and special characters excluding period \u0027.\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String NON_PERIOD_URL_CHARACTERS \u003d \"([\\\\w\" + NON_PERIOD_SPECIAL_CHARACTERS + \"]|\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + ENCODED_ASCII_CHARACTER + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // URL characters and \u0027/\u0027 and \u0027?\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String QUERY_AND_FRAGMENT_CHARACTERS \u003d \"([\\\\w\" + SPECIAL_CHARACTERS + \"/?]|\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + ENCODED_ASCII_CHARACTER + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String REGEX_URL_SCHEME \u003d \"^((http(s?))|(ftp)|(file))://\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String REGEX_URL_AUTHORITY \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            NON_PERIOD_URL_CHARACTERS + URL_CHARACTERS + \"*\" + NON_PERIOD_URL_CHARACTERS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final String REGEX_URL_PATH_SEGMENT \u003d \"/\" + URL_CHARACTERS + \"*\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String REGEX_URL_PATH \u003d \"(\" + REGEX_URL_PATH_SEGMENT + \")*\"; // zero or more path segments"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String REGEX_URL_QUERY \u003d \"(\\\\?\" + QUERY_AND_FRAGMENT_CHARACTERS + \"+)?\"; // optional query"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String REGEX_URL_FRAGMENT \u003d \"(#\" + QUERY_AND_FRAGMENT_CHARACTERS + \"+)?\"; // optional fragment"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d REGEX_URL_SCHEME + REGEX_URL_AUTHORITY"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + REGEX_URL_PATH + REGEX_URL_QUERY + REGEX_URL_FRAGMENT + \"/?$\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a {@code Url}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param url A valid URL."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Url(String url) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        checkArgument(isValidUrl(url), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        value \u003d url;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns if a given string is a URL."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static boolean isValidUrl(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof Url // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 value.equals(((Url) other).value)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 50,
      "Na-Nazhou": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/exceptions/BookmarkContainNoReminderException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.bookmark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Signals that the operation is unable to find the reminder in the specified bookmark."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class BookmarkContainNoReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public BookmarkContainNoReminderException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        super(\"This bookmark has no reminder.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 10
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/exceptions/BookmarkNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Signals that the operation is unable to find the specified bookmark."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class BookmarkNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/exceptions/DuplicateBookmarkException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Signals that the operation will result in duplicate Bookmarks (Bookmarks are considered duplicates if they"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DuplicateBookmarkException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DuplicateBookmarkException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(\"Operation would result in duplicate bookmarks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 11
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/exceptions/ExistReminderException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.bookmark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Signals that the specified bookmark already has a reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class ExistReminderException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ExistReminderException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        super(\"This bookmark already has a reminder. Cannot have more than one reminder in a bookmark.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 10
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/exceptions/ReminderNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.bookmark.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Signals that the operation is unable to find the specified reminder."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class ReminderNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ReminderNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        super(\"This reminder does not exist.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 11
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/bookmark/util/BookmarkBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model.bookmark.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A utility class to help with building Bookmark objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class BookmarkBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Example Website\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String DEFAULT_URL \u003d \"https://www.example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"This is an example bookmark\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String DEFAULT_FOLDER \u003d Folder.DEFAULT_FOLDER_NAME;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Url url;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private Folder folder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private List\u003cCachedCopy\u003e cachedCopies;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url \u003d new Url(DEFAULT_URL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        folder \u003d new Folder(DEFAULT_FOLDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        cachedCopies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Initializes the BookmarkBuilder with the data of {@code bookmarkToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkBuilder(Bookmark bookmarkToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        name \u003d bookmarkToCopy.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url \u003d bookmarkToCopy.getUrl();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        remark \u003d bookmarkToCopy.getRemark();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bookmarkToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        folder \u003d bookmarkToCopy.getFolder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        cachedCopies \u003d new ArrayList\u003c\u003e(bookmarkToCopy.getCachedCopies());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the {@code Name} of the {@code Bookmark} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkBuilder withName(String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Bookmark} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the {@code Remark} of the {@code Bookmark} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Sets the {@code Folder} of the {@code Bookmark} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public BookmarkBuilder withFolder(String folder) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folder \u003d new Folder(folder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the {@code Url} of the {@code Bookmark} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkBuilder withUrl(String url) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.url \u003d new Url(url);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Adds a {@code CachedCopy} to the {@code Bookmark} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public BookmarkBuilder withCachedCopy(CachedCopy cachedCopy) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.cachedCopies.add(cachedCopy);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Bookmark build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new Bookmark(name, url, remark, folder, tags, cachedCopies);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 30,
      "openorclose": 28,
      "Na-Nazhou": 4,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/folderstructure/FolderStructure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.model.folderstructure;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Represents a folder structure in Mark."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Guarantees: details are present and not null, field values"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class FolderStructure {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final Folder folder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final ObservableList\u003cFolderStructure\u003e subfolders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Instantiates a new Folder structure."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param folder     the folder"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param subfolders the subfolders"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public FolderStructure(Folder folder, List\u003cFolderStructure\u003e subfolders) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        requireAllNonNull(folder, subfolders);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folder \u003d folder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.subfolders.addAll(subfolders);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Gets the folder."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @return the folder"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public Folder getFolder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return folder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Gets subfolders."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @return the subfolders"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public ObservableList\u003cFolderStructure\u003e getSubfolders() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return subfolders;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Finds the FolderStructure that the specified folder belongs to, return null if not found."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param folder the folder"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @return the folder structure that the folder belongs to, null if no folder structure contains the folder"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public FolderStructure find(Folder folder) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (this.folder.equals(folder)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        for (FolderStructure subfolder: subfolders) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            FolderStructure found \u003d subfolder.find(folder);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            if (found !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                return found;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Checks if this folder structure contains the specified folder."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param folder the folder"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @return true if this folder structure contains the specified folder, otherwise false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return find(folder) !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Adds the specified folder under the parent folder."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param folder the folder to be added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param parentFolder the parent folder"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void addFolder(Folder folder, Folder parentFolder) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        find(parentFolder).getSubfolders().add(new FolderStructure(folder, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!(other instanceof FolderStructure)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure otherFolderStructure \u003d (FolderStructure) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return otherFolderStructure.getFolder().equals(getFolder())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                \u0026\u0026 new HashSet\u003c\u003e(otherFolderStructure.getSubfolders()).equals("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                        new HashSet\u003c\u003e(getSubfolders()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Helper function for isValidFolderStructure"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static boolean isValidFolderStructure(FolderStructure test, Set\u003cFolder\u003e seenSoFar) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (seenSoFar.contains(test.getFolder())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        seenSoFar.add(test.getFolder());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        for (FolderStructure folderStructure: test.getSubfolders()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            if (!FolderStructure.isValidFolderStructure(folderStructure, seenSoFar)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Checks if folder structure has no duplicates."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param test the structure to test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @return true if the folder structure has no duplicates, otherwise false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static boolean isValidFolderStructure(FolderStructure test) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return FolderStructure.isValidFolderStructure(test, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Clones a folder structure."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public FolderStructure clone() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new FolderStructure("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                folder, subfolders.stream().map(FolderStructure::clone).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return Objects.hash(folder, subfolders);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 150
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/predicates/BookmarkContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.model.Model.PREDICATE_SHOW_NO_BOOKMARKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Tests that part of a {@code Bookmark}\u0027s data fields (except remark) matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class BookmarkContainsKeywordsPredicate implements Predicate\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final Predicate\u003cBookmark\u003e DEFAULT_PREDICATE \u003d PREDICATE_SHOW_NO_BOOKMARKS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private List\u003cString\u003e identifierKeywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private List\u003cString\u003e tagKeywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private List\u003cString\u003e folderKeywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public BookmarkContainsKeywordsPredicate(List\u003cString\u003e identifierKeywords, List\u003cString\u003e tagKeywords,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                                             List\u003cString\u003e folderKeywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireAllNonNull(identifierKeywords, tagKeywords, folderKeywords);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.identifierKeywords \u003d identifierKeywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.tagKeywords \u003d tagKeywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.folderKeywords \u003d folderKeywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Prepares the predicate for test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public Predicate\u003cBookmark\u003e getPredicate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return DEFAULT_PREDICATE.or(new IdentifiersContainKeywordsPredicate(identifierKeywords))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .or(new TagContainsKeywordsPredicate(tagKeywords))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .or(new FolderContainsKeywordsPredicate(folderKeywords));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Returns true if at least one keyword is present."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean isAnyKeywordPresent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return !(identifierKeywords.isEmpty() \u0026\u0026 tagKeywords.isEmpty() \u0026\u0026 folderKeywords.isEmpty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean test(Bookmark bookmark) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return getPredicate().test(bookmark);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                || (other instanceof BookmarkContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 identifierKeywords.equals(((BookmarkContainsKeywordsPredicate) other).identifierKeywords)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 tagKeywords.equals(((BookmarkContainsKeywordsPredicate) other).tagKeywords)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 folderKeywords.equals(((BookmarkContainsKeywordsPredicate) other).folderKeywords));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 58
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/predicates/FolderContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Tests that part of a {@code Bookmark}\u0027s {@code Folder} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class FolderContainsKeywordsPredicate implements Predicate\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public FolderContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean test(Bookmark bookmark) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .anyMatch(keyword -\u003e bookmark.getFolder().folderName.equalsIgnoreCase(keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                || (other instanceof FolderContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 keywords.equals(((FolderContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 31
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/predicates/IdentifiersContainKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Tests that a {@code Bookmark}\u0027s {@code Name} or {@code Url} matches any"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class IdentifiersContainKeywordsPredicate implements Predicate\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final List\u003cPredicate\u003cBookmark\u003e\u003e predicates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public IdentifiersContainKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.keywords \u003d keywords; // keywords needed for equals(Object) comparison"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicates.add(new NameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicates.add(new UrlContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean test(Bookmark bookmark) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .anyMatch(predicate -\u003e predicate.test(bookmark));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof IdentifiersContainKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 keywords.equals(((IdentifiersContainKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 38
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Tests that part of a {@code Bookmark}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean test(Bookmark bookmark) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(bookmark.getName().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 6,
      "Na-Nazhou": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/predicates/TagContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Tests that part of a {@code Bookmark}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean test(Bookmark bookmark) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .anyMatch(keyword -\u003e bookmark.getTags()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                        .stream().anyMatch(tag -\u003e tag.tagName.equalsIgnoreCase(keyword)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 32
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/predicates/UrlContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Tests that a {@code Bookmark}\u0027s {@code Url} matches any part of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class UrlContainsKeywordsPredicate implements Predicate\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public UrlContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean test(Bookmark bookmark) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsPhraseIgnoreCase(bookmark.getUrl().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                || (other instanceof UrlContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 keywords.equals(((UrlContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 32
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/reminder/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Represents a note in reminder."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String INVALID_CHARACTER \u003d \"/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Notes can contain any characters except \" + INVALID_CHARACTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * The first character of the note must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * The rest of the note can contain any character except the invalid character."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s][^\" + INVALID_CHARACTER + \"]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"Open\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private String noteContent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public Note(String noteContent) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireNonNull(noteContent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        checkArgument(isValidNote(noteContent), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.noteContent \u003d noteContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Returns true if a given string is a valid note."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Returns true if a given string is an empty note."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static boolean isEmptyNote(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return test.trim().equals(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return noteContent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Returns a {@code Note} with the default value."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static Note getDefaultNote() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return new Note(DEFAULT_VALUE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 noteContent.equals(((Note) other).noteContent)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return noteContent.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 70
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/reminder/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Represents a reminder in Mark."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //TODO: temporarily; to change when confirmed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static final String DATE_FORMATTER \u003d \"dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private Bookmark bookmark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private LocalDateTime remindTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //identity field"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark the bookmark the reminder should open."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param time the reminding time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param note the note for reminder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public Reminder(Bookmark bookmark, LocalDateTime time, Note note) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireAllNonNull(bookmark, time, note);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.remindTime \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public Bookmark getBookmark() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return bookmark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public LocalDateTime getRemindTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return remindTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Returns true if both reminders have the same note, the same bookmark and the same time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * TODO: change implementation based on how to distinguish reminders (which field to use)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean isSameReminder(Reminder otherReminder) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (otherReminder \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return otherReminder !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 otherReminder.getNote().equals(getNote())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 otherReminder.getFormattedTime().equals(getFormattedTime())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 otherReminder.getBookmark().equals(getBookmark());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Returns true if both reminders have the same identity and data fields."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return otherReminder.getNote().equals(getNote())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 otherReminder.getFormattedTime().equals(getFormattedTime())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 otherReminder.getBookmark().equals(getBookmark());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return Objects.hash(bookmark, remindTime, note);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        builder.append(getNote())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .append(\" Bookmark: \")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .append(getBookmark().getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .append(getFormattedTime());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Converts reminding time to the formatted string."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return formatted time string."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public String getFormattedTime() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        String formatTime \u003d remindTime.format(formatter);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return formatTime;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 115
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/reminder/ReminderAssociation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import javafx.collections.ObservableMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.BookmarkContainNoReminderException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.ExistReminderException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * Represents the association between bookmarks and reminders."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class ReminderAssociation {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static final Comparator\u003cReminder\u003e comparator \u003d (Reminder a, Reminder b) -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return a.getRemindTime().isBefore(b.getRemindTime()) ? -1 : 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //TODO: One bookmark may has multiple reminder in next version."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private ObservableMap\u003cBookmark, Reminder\u003e association \u003d FXCollections.observableHashMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Sets the reminder association with the given association."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param association the given association."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void setAssociation(ObservableMap\u003cBookmark, Reminder\u003e association) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.association \u003d association;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Adds a reminder that opens the bookmark."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark The bookmark that the reminder opens."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param reminder The reminder that opens the bookmark."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void addReminder(Bookmark bookmark, Reminder reminder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireAllNonNull(bookmark, reminder);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (association.containsKey(bookmark)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new ExistReminderException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.put(bookmark, reminder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Deletes a specific reminder."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param reminder the reminder to delete."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireAllNonNull(reminder);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Bookmark bookmark \u003d reminder.getBookmark();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (!association.containsKey(bookmark)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new BookmarkContainNoReminderException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (!association.remove(bookmark, reminder)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Replaces the bookmark\u0027s reminder {@code targetReminder} in the map with {@code editedReminder}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * {@code targetReminder} must exist in the map."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void setReminder(Reminder targetReminder, Reminder editedReminder) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        requireAllNonNull(targetReminder, editedReminder);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Bookmark bookmark \u003d targetReminder.getBookmark();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (!association.containsKey(bookmark)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new BookmarkContainNoReminderException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        if (!association.replace(bookmark, targetReminder, editedReminder)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            throw new ReminderNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Gets a list of reminders in ascending time order."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return a list of reminder sorted in time ascending order."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        ObservableList\u003cReminder\u003e reminderList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        reminderList.addAll(association.values());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        reminderList.sort(comparator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return reminderList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Checks if the bookmark already has reminder."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @param bookmark the bookmark to check."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * @return whether the bookmark already has a reminder."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean isBookmarkHasReminder(Bookmark bookmark) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return association.containsKey(bookmark);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return association.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                || (other instanceof ReminderAssociation // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                \u0026\u0026 association.equals(((ReminderAssociation) other).association));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 119
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Represents a Tag in Mark."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a copy of the given {@code Tag}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Tag(Tag tagToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(tagToCopy.tagName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 10,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/mark/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Contains utility methods for populating {@code Mark} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final String SCHOOL \u003d \"School\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final String ENTERTAINMENT \u003d \"Entertainment\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final String GENERAL \u003d \"General\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Bookmark[] getSampleBookmarks() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new Bookmark[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            new Bookmark(new Name(\"Luminus\"), new Url(\"https://luminus.nus.edu.sg/\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Remark(\"Announcements, course materials\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Folder(GENERAL),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    getTagSet(\"NUS\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            new Bookmark(new Name(\"NUSMods\"), new Url(\"https://nusmods.com/\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Remark(\"Timetable planning\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Folder(GENERAL),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    getTagSet(\"NUS\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            new Bookmark(new Name(\"CS2103T Website\"), new Url(\"https://nus-cs2103-ay1920s1.github.io/website/\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Remark(\"Learning materials for Software Engineering\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Folder(SCHOOL),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    getTagSet(\"NUS\", \"CS2103T\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            new Bookmark(new Name(\"Facebook\"), new Url(\"https://www.facebook.com/\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Remark(\"-\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Folder(ENTERTAINMENT),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    getTagSet(\"SocialMedia\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            new Bookmark(new Name(\"Reddit\"), new Url(\"https://www.reddit.com/\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new Remark(Remark.DEFAULT_VALUE),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Folder(ENTERTAINMENT),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    getTagSet(\"SocialMedia\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            new Bookmark(new Name(\"McDelivery\"), new Url(\"https://www.mcdelivery.com.sg/sg/\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Remark(Remark.DEFAULT_VALUE),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    new Folder(Folder.DEFAULT_FOLDER_NAME),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    getTagSet(\"Food\"), new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static FolderStructure getSampleFolderStructure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderStructure general \u003d new FolderStructure(new Folder(GENERAL), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderStructure school \u003d new FolderStructure(new Folder(SCHOOL), List.of(general));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderStructure entertainment \u003d new FolderStructure(new Folder(ENTERTAINMENT), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderStructure root \u003d new FolderStructure(Folder.ROOT_FOLDER, List.of(school, entertainment));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static ReadOnlyMark getSampleMark() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark sampleMark \u003d new Mark();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (Bookmark sampleBookmark : getSampleBookmarks()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            sampleMark.addBookmark(sampleBookmark);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        sampleMark.setFolderStructure(getSampleFolderStructure());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return sampleMark;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 16,
      "openorclose": 17,
      "Na-Nazhou": 25,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/JsonAdaptedBookmark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Jackson-friendly version of {@link Bookmark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class JsonAdaptedBookmark {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Bookmark\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final String folder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final List\u003cString\u003e cachedCopies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a {@code JsonAdaptedBookmark} with the given bookmark details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public JsonAdaptedBookmark(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @JsonProperty(\"url\") String url, @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @JsonProperty(\"folder\") String folder, @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @JsonProperty(\"cachedCopies\") List\u003cString\u003e cachedCopies) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folder \u003d folder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (cachedCopies !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            this.cachedCopies.addAll(cachedCopies);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Converts a given {@code Bookmark} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public JsonAdaptedBookmark(Bookmark source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        name \u003d source.getName().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url \u003d source.getUrl().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        folder \u003d source.getFolder().folderName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        cachedCopies.addAll(source.getCachedCopies().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .map(copy -\u003e copy.html)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Converts this Jackson-friendly adapted bookmark object into the model\u0027s {@code Bookmark} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted bookmark."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Bookmark toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        final List\u003cTag\u003e bookmarkTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            bookmarkTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (url \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Url.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!Url.isValidUrl(url)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new IllegalValueException(Url.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        final Url modelUrl \u003d new Url(url);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(bookmarkTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (folder \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Folder.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!Folder.isValidFolder(folder)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new IllegalValueException(Folder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        final Folder modelFolder \u003d new Folder(folder);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        final List\u003cCachedCopy\u003e modelCachedCopies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        for (String cachedCopy: cachedCopies) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            modelCachedCopies.add(new CachedCopy(cachedCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new Bookmark(modelName, modelUrl, modelRemark, modelFolder, modelTags, modelCachedCopies);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 37,
      "openorclose": 29,
      "Na-Nazhou": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/JsonAdaptedFolderStructure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Jackson-friendly version of {@link FolderStructure}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class JsonAdaptedFolderStructure {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private List\u003cJsonAdaptedFolderStructure\u003e subfolders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Constructs a {@code JsonAdaptedFolderStructure} with the given folder structure."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param name       the name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param subfolders the subfolders"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public JsonAdaptedFolderStructure(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            @JsonProperty(\"subfolders\") List\u003cJsonAdaptedFolderStructure\u003e subfolders) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (subfolders !\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            this.subfolders.addAll(subfolders);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Instantiates a new Json adapted folder structure."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param source the source"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public JsonAdaptedFolderStructure(FolderStructure source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.name \u003d source.getFolder().folderName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.subfolders \u003d source.getSubfolders().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .map(JsonAdaptedFolderStructure::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Converts this Jackson-friendly adapted bookmark object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * into the model\u0027s {@code FolderStrucutre} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public FolderStructure toModelType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new FolderStructure(new Folder(name), subfolders.stream().map("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                JsonAdaptedFolderStructure::toModelType).collect("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return name + \"\\n\" + subfolders.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 61
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/JsonAdaptedReminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * JSON friendly version of {@link Reminder}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class JsonAdaptedReminder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Reminder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final String bookmark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Constructs a {@code JsonAdaptedReminder} with the given reminder details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public JsonAdaptedReminder(@JsonProperty(\"note\") String note,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                               @JsonProperty(\"time\") String time, @JsonProperty(\"bookmark\") String bookmark) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Converts a given {@code Reminder} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public JsonAdaptedReminder(Reminder source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        note \u003d source.getNote().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        time \u003d source.getFormattedTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        bookmark \u003d source.getBookmark().getName().value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 39
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/JsonMarkStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A class to access Mark data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class JsonMarkStorage implements MarkStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMarkStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public JsonMarkStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Optional\u003cReadOnlyMark\u003e readMark() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return readMark(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Similar to {@link #readMark()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Optional\u003cReadOnlyMark\u003e readMark(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Optional\u003cJsonSerializableMark\u003e jsonMark \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                filePath, JsonSerializableMark.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!jsonMark.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return Optional.of(jsonMark.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark(ReadOnlyMark mark) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        saveMark(mark, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Similar to {@link #saveMark(ReadOnlyMark)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark(ReadOnlyMark mark, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(mark);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMark(mark), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 80
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/JsonSerializableMark.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * An Immutable Mark that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "@JsonRootName(value \u003d \"mark\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class JsonSerializableMark {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKMARK \u003d \"Bookmark list contains duplicate bookmark(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOLDER \u003d \"There are duplicate folder(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String MESSAGE_NO_ROOT_FOLDER \u003d \"The root folder is missing.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final List\u003cJsonAdaptedBookmark\u003e bookmarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final JsonAdaptedFolderStructure folderStructure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Constructs a {@code JsonSerializableMark} with the given bookmarks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public JsonSerializableMark(@JsonProperty(\"bookmarks\") List\u003cJsonAdaptedBookmark\u003e bookmarks,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @JsonProperty(\"folderStructure\") JsonAdaptedFolderStructure folderStructure) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.bookmarks.addAll(bookmarks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.folderStructure \u003d folderStructure;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Converts a given {@code ReadOnlyMark} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *               JsonSerializableMark}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public JsonSerializableMark(ReadOnlyMark source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        bookmarks.addAll(source.getBookmarkList().stream().map(JsonAdaptedBookmark::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        folderStructure \u003d new JsonAdaptedFolderStructure(source.getFolderStructure());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Converts this Mark into the model\u0027s {@code Mark} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Mark toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark mark \u003d new Mark();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (JsonAdaptedBookmark jsonAdaptedBookmark : bookmarks) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Bookmark bookmark \u003d jsonAdaptedBookmark.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (mark.hasBookmark(bookmark)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOKMARK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            mark.addBookmark(bookmark);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure modelFolderStructure \u003d folderStructure.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!modelFolderStructure.getFolder().equals(Folder.ROOT_FOLDER)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new IllegalValueException(MESSAGE_NO_ROOT_FOLDER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (!FolderStructure.isValidFolderStructure(modelFolderStructure)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DUPLICATE_FOLDER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        mark.setFolderStructure(modelFolderStructure);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return mark;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23,
      "openorclose": 21,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/MarkStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Represents a storage for {@link Mark}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public interface MarkStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Path getMarkFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns Mark data as a {@link ReadOnlyMark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Optional\u003cReadOnlyMark\u003e readMark() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @see #getMarkFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Optional\u003cReadOnlyMark\u003e readMark(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Saves the given {@link ReadOnlyMark} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param mark cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void saveMark(ReadOnlyMark mark) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @see #saveMark(ReadOnlyMark)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void saveMark(ReadOnlyMark mark, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 46
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public interface Storage extends MarkStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Path getMarkFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Optional\u003cReadOnlyMark\u003e readMark() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void saveMark(ReadOnlyMark mark) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 9,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Manages storage of Mark data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private MarkStorage markStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public StorageManager(MarkStorage markStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.markStorage \u003d markStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Mark methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return markStorage.getMarkFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Optional\u003cReadOnlyMark\u003e readMark() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return readMark(markStorage.getMarkFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Optional\u003cReadOnlyMark\u003e readMark(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return markStorage.readMark(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark(ReadOnlyMark mark) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        saveMark(mark, markStorage.getMarkFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark(ReadOnlyMark mark, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        markStorage.saveMark(mark, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 21,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/mark/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Represents a storage for {@link seedu.mark.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Saves the given {@link seedu.mark.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/AnnotationListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * Manages Ui showing annotations of offline documents."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class AnnotationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private static final String FXML \u003d \"AnnotationListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private ListView\u003cParagraph\u003e annotationListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public AnnotationListPanel(ObservableList\u003cParagraph\u003e paragraphList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        annotationListView.setItems(paragraphList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        annotationListView.setCellFactory(listView -\u003e new AnnotationListViewCell());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * A list view cell for showing the annotations of the currently showing document."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    class AnnotationListViewCell extends ListCell\u003cParagraph\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        protected void updateItem(Paragraph paragraph, boolean empty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            super.updateItem(paragraph, empty);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if (empty || paragraph \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                setGraphic(new AnnotationParagraphCard(paragraph).getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 41
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/AnnotationParagraphCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * An UI component that displays information of a {@code Paragraph}, which includes its annotations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class AnnotationParagraphCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private static final String FXML \u003d \"AnnotationParagraphCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public final Paragraph paragraph;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Label para;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public AnnotationParagraphCard(Paragraph paragraph) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        this.paragraph \u003d paragraph;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        id.setText(paragraph.getId().toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        para.setText(paragraph.getParagraphContent().toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (paragraph.hasNote()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            note.setText(paragraph.getNote().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO: set para background colour"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } else if (!(other instanceof AnnotationParagraphCard)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        AnnotationParagraphCard card \u003d (AnnotationParagraphCard) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 para.getText().equals(card.para.getText())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                //TODO: check highlight colour same"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u0026\u0026 note.getText().equals(card.note.getText());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 53
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/BookmarkCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * An UI component that displays information of a {@code Bookmark}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class BookmarkCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String FXML \u003d \"BookmarkListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public final Bookmark bookmark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Label url;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private Label folder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private Label cache;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkCard(Bookmark bookmark, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        name.setText(bookmark.getName().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        url.setText(bookmark.getUrl().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        remark.setText(bookmark.getRemark().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        folder.setText(bookmark.getFolder().folderName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        cache.setVisible(!bookmark.getCachedCopies().isEmpty());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmark.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    tagLabel.getStyleClass().add(getTagColor(tag));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private String getTagColor(Tag tag) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        if (\"Favorite\".equals(tag.tagName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!(other instanceof BookmarkCard)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        BookmarkCard card \u003d (BookmarkCard) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                \u0026\u0026 bookmark.equals(card.bookmark);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 17,
      "openorclose": 7,
      "Na-Nazhou": 19,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/BookmarkListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Panel containing the list of bookmarks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class BookmarkListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String FXML \u003d \"BookmarkListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @org.jetbrains.annotations.NotNull"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private final ObservableValue\u003cBookmark\u003e bookmarkToDisplayCache;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private ListView\u003cBookmark\u003e bookmarkListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public BookmarkListPanel(ObservableList\u003cBookmark\u003e bookmarkList, ObservableValue\u003cUrl\u003e currentBookmarkUrl,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                             ObservableValue\u003cBookmark\u003e bookmarkToDisplayCache,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                             Consumer\u003cUrl\u003e currentUrlChangeHandler) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.bookmarkToDisplayCache \u003d bookmarkToDisplayCache;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmarkListView.setItems(bookmarkList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmarkListView.setCellFactory(listView -\u003e new BookmarkListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Whenever selection changes, update the current bookmark url"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        bookmarkListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // Do nothing when selection is cleared"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            logger.info(\"Selection in bookmark list panel changed to: \" + newValue);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            currentUrlChangeHandler.accept(newValue.getUrl());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Whenever current bookmark url changes, update the selection"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentBookmarkUrl.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            Bookmark selectedBookmark \u003d bookmarkListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // Early return if the url change is due to change of selection"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (selectedBookmark !\u003d null \u0026\u0026 selectedBookmark.getUrl().equals(newValue)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // Clear the selection when current bookmark url is set to null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                bookmarkListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            } else { // Update the selection to the corresponding bookmark"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                int index \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                ObservableList\u003cBookmark\u003e currentBookmarkList \u003d bookmarkListView.getItems();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                for (Bookmark bookmark : currentBookmarkList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    if (bookmark.getUrl().equals(newValue)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                // If the current url does not correspond to any bookmark, clear the selection and return"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                if (index \u003d\u003d currentBookmarkList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    bookmarkListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                bookmarkListView.scrollTo(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                bookmarkListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        bookmarkToDisplayCache.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            System.out.println(\"listener\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            bookmarkListView.refresh();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            bookmarkListView.scrollTo(newValue);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Bookmark} using a {@code BookmarkCard}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    class BookmarkListViewCell extends ListCell\u003cBookmark\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        protected void updateItem(Bookmark bookmark, boolean empty) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            super.updateItem(bookmark, empty);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (empty || bookmark \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                BookmarkCard card \u003d new BookmarkCard(bookmark, getIndex() + 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                setGraphic(card.getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 13,
      "openorclose": 15,
      "Na-Nazhou": 46,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/BrowserPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.value.ObservableStringValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.concurrent.Worker.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.web.WebEngine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.MainApp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * The Browser Panel of Mark."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Default html page to be loaded when not connected to internet."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static final URL DEFAULT_PAGE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            requireNonNull(MainApp.class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    .getResource(FXML_FILE_FOLDER + \"defaultOfflinePage.html\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String HOME_PAGE_URL \u003d \"https://google.com.sg\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Name of corresponding fxml file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private TextField addressBar;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private ImageView homepageLogo;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Button homeButton;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private WebEngine webEngine;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private ObservableStringValue currentPageUrl;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private boolean isConnected;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public BrowserPanel(SimpleObjectProperty\u003cUrl\u003e currentBookmarkUrl) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        this.isConnected \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        loadGuiAddress();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        loadGuiGoogleButton();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        loadGuiBrowser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Load page when current bookmark url changes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentBookmarkUrl.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            logger.info(\"Current bookmark url changed to: \" + newValue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (!isConnected) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // Return if the change is due to the change of currentPageUrl"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (newValue \u003d\u003d null || newValue.value.equals(currentPageUrl.getValue())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            loadUncheckedPage(newValue.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Whenever currentPageUrl changes, update the currentBookmarkUrl"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentPageUrl.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            logger.info(\"Current page url changed to: \" + newValue);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (!isConnected) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                currentBookmarkUrl.setValue(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            //if current page is not a valid Url thing, then cannot create model Url"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if (!Url.isValidUrl(newValue)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // Return if the change is due to the change of currentBookmarkUrl"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (currentBookmarkUrl.getValue() !\u003d null \u0026\u0026 newValue.equals(currentBookmarkUrl.getValue().value)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            currentBookmarkUrl.setValue(new Url(newValue));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Initialises the address bar."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private void loadGuiAddress() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        addressBar.focusedProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                if (newValue) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    logger.info(\"Address bar in focus\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    addressBar.selectAll();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    logger.info(\"Address bar out of focus\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    if (!currentPageUrl.getValue().equals(addressBar.getText())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                        addressBar.setText(currentPageUrl.getValue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Initialises the button that leads to google home page when pressed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private void loadGuiGoogleButton() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        homepageLogo.setImage(new Image("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                MainWindow.class.getResourceAsStream(\"/images/googleLogo.png\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Initialises the embedded browser."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private void loadGuiBrowser() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        webEngine \u003d browser.getEngine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        currentPageUrl \u003d webEngine.locationProperty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        webEngine.getLoadWorker().stateProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if (newValue \u003d\u003d State.FAILED) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                logger.info(\"browser: unable to connect to internet\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                isConnected \u003d false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                loadDefaultPage();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            } else if (newValue \u003d\u003d State.SUCCEEDED) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                isConnected \u003d true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                showAddressOnAddressBar(currentPageUrl.getValue());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        loadHomepage();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    ////////////////////// MAIN METHODS /////////////////////////"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Loads page with url on the webview."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Checks url is valid before loading page."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param url Url to attempt to load"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void loadUncheckedPage(String url) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //assert isValidUrl(url) : \"invalid url passed to webEngine\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        String validUrl \u003d makeValidUrl(url);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (validUrl \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            //load google, will succeed if there is internet connnection."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            logger.info(url + \"\\t is not a valid Url. Please search in google instead.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            gotoGoogle();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        Platform.runLater(() -\u003e webEngine.load(validUrl));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Loads page with valid url on the webview."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param validUrl Url to load"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void loadPage(String validUrl) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        Platform.runLater(() -\u003e webEngine.load(validUrl));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        loadPage(DEFAULT_PAGE.toExternalForm());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Changes webview to google search page."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private void loadHomepage() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        loadPage(HOME_PAGE_URL);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Sets address bar text as url."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * @param url url to set address bar content to."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private void showAddressOnAddressBar(String url) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        addressBar.setText(url);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Changes webview to site based on input entered in the address bar."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private void handleAddressBarInput() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //if address legit then load"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //if not legit h"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        String input \u003d addressBar.getText();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        logger.info(\"Reading address from address bar: \" + input);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //logger.info(\"Checking validity of input URL: \" + isValidUrl(input));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        loadUncheckedPage(input);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //dunnid clear input"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Checks if given url is a valid url."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param input Suspected url"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return true if url is valid; else false."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private boolean isValidUrl(String input) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO: check Url.isValidUrl is appropriate for this (parse and check if the url is a valid url)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //check if have protocol in front"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //if true then test out by creating a url and catching malinformedurlexception?"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //return Url.isValidUrl(url); //dummy code"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            final URL url \u003d new URL(input);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            HttpURLConnection huc \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            huc.setRequestMethod(\"HEAD\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            if (huc.getResponseCode() \u003d\u003d 200) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                //SUCCESS"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Parses input into a valid url."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * If the input is simply lacking a protocol, http:// is prepended."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Otherwise, the input is passed into google search."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param input non-url input"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @return a valid url based on given input."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private String makeValidUrl(String input) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO: parse a non url into a valid url (either by adding protocol or doing google search)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //if is url without protocol, add protocol http://"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (isValidUrl(input)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return input;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //whack with http://"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        String newurl \u003d \"http://\" + input;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (isValidUrl(newurl)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return newurl;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //whack with https://"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        newurl \u003d \"https://\" + input;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        if (isValidUrl(newurl)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            return newurl;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //else ask users to google search it; give alert and redirect to google"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return null; //dummy code"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private void gotoGoogle() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        loadPage(\"https://google.com.sg\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 66,
      "kxyoke": 211
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * @see seedu.mark.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 4,
      "Na-Nazhou": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/DashboardPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * The Dashboard panel of Mark."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class DashboardPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private static final String FXML \u003d \"DashboardPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private StackPane folderStructurePlaceholder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public DashboardPanel(Logic logic, Consumer\u003cUrl\u003e currentUrlChangeHandler) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructureTreeView folderStructureTreeView \u003d new FolderStructureTreeView("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                logic.getFolderStructure(), logic.getFilteredBookmarkList(), currentUrlChangeHandler);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        folderStructurePlaceholder.getChildren().add(folderStructureTreeView.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 5,
      "Na-Nazhou": 4,
      "kxyoke": 22
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/FolderStructureTreeView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.scene.control.TreeView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * Panel containing the tree of folders."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class FolderStructureTreeView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final String FXML \u003d \"FolderStructure.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private TreeView\u003cString\u003e treeView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private HashMap\u003cFolder, TreeItem\u003cString\u003e\u003e mapOfFolderToTreeItem \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private HashMap\u003cTreeItem\u003cString\u003e, Url\u003e mapOfTreeItemToUrl \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private TreeItem\u003cString\u003e root;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private ObservableList\u003cBookmark\u003e bookmarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private List\u003cTreeItem\u003cString\u003e\u003e bookmarkTreeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Instantiates a new Folder structure tree view."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param folderStructure the folder structure"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param bookmarks       the bookmarks"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public FolderStructureTreeView(FolderStructure folderStructure,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                                   ObservableList\u003cBookmark\u003e bookmarks,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                                   Consumer\u003cUrl\u003e currentUrlChangeHandler) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        this.bookmarks \u003d bookmarks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        root \u003d buildTree(folderStructure);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        populateTreeWithBookmarks();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        bookmarks.addListener((ListChangeListener\u003c? super Bookmark\u003e) change -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            while (change.next()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                populateTreeWithBookmarks();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        treeView.setRoot(root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        treeView.setShowRoot(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        treeView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // Do nothing when selection is cleared"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (!mapOfTreeItemToUrl.containsKey(newValue)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            logger.info(\"Selection in folder structure tree view changed to: \" + newValue);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            currentUrlChangeHandler.accept(mapOfTreeItemToUrl.get(newValue));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Builds the tree."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @param toBuild"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private TreeItem\u003cString\u003e buildTree(FolderStructure toBuild) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        TreeItem\u003cString\u003e built \u003d new TreeItem\u003c\u003e(toBuild.getFolder().folderName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ObservableList\u003cFolderStructure\u003e subfolders \u003d toBuild.getSubfolders();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        for (FolderStructure subfolder: subfolders) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            TreeItem\u003cString\u003e builtChild \u003d buildTree(subfolder);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            mapOfFolderToTreeItem.put(subfolder.getFolder(), builtChild);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            built.getChildren().add(builtChild);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        subfolders.addListener((ListChangeListener\u003c? super FolderStructure\u003e) change -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            while (change.next()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                for (FolderStructure oldFolderStructure : change.getRemoved()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    TreeItem\u003cString\u003e oldFolderTreeItem \u003d mapOfFolderToTreeItem.get(oldFolderStructure.getFolder());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    oldFolderTreeItem.getParent().getChildren().remove(oldFolderTreeItem);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    mapOfFolderToTreeItem.remove(oldFolderStructure.getFolder());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    populateTreeWithBookmarks();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                for (FolderStructure newFolderStructure : change.getAddedSubList()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    TreeItem\u003cString\u003e newBuilt \u003d buildTree(newFolderStructure);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    mapOfFolderToTreeItem.put(newFolderStructure.getFolder(), newBuilt);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    built.getChildren().add(newBuilt);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                    populateTreeWithBookmarks();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return built;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Populates the folder tree with bookmarks."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private void populateTreeWithBookmarks() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        for (TreeItem\u003cString\u003e oldBookmarkTreeItem: bookmarkTreeItems) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            oldBookmarkTreeItem.getParent().getChildren().remove(oldBookmarkTreeItem);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        bookmarkTreeItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        mapOfTreeItemToUrl \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        for (Bookmark bookmark: bookmarks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            // if the folder is not found, we default it to the root"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            TreeItem\u003cString\u003e treeItem \u003d new TreeItem\u003c\u003e(\"Bookmark: \" + bookmark);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            mapOfFolderToTreeItem.getOrDefault(bookmark.getFolder(), root)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    .getChildren().add(treeItem);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            bookmarkTreeItems.add(treeItem);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            mapOfTreeItemToUrl.put(treeItem, bookmark.getUrl());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 91,
      "Na-Nazhou": 31
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t13-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.TabCommand.Tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private BookmarkListPanel bookmarkListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private DashboardPanel dashboardPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private OfflinePanel offlinePanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private StackPane mainViewAreaPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private StackPane bookmarkListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private StackPane folderStructurePlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        browserPanel \u003d new BrowserPanel(logic.getCurrentUrlProperty());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        dashboardPanel \u003d new DashboardPanel(logic, getCurrentUrlChangeHandler());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        offlinePanel \u003d new OfflinePanel(logic.getObservableDocument());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        mainViewAreaPlaceholder.getChildren().add(dashboardPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        bookmarkListPanel \u003d new BookmarkListPanel(logic.getFilteredBookmarkList(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                logic.getCurrentUrlProperty(), logic.getBookmarkDisplayingCacheProperty(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                getCurrentUrlChangeHandler());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmarkListPanelPlaceholder.getChildren().add(bookmarkListPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMarkFilePath());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void handleSwitchToDashboard() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        mainViewAreaPlaceholder.getChildren().set(0, dashboardPanel.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void handleSwitchToOnline() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        mainViewAreaPlaceholder.getChildren().set(0, browserPanel.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void handleSwitchToOffline() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        mainViewAreaPlaceholder.getChildren().set(0, offlinePanel.getRoot());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * Directs to the appropriate handler to switch Tab."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     * @param tab The tab to switch to"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private void handleTabSwitchRequestIfAny(Tab tab) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        requireNonNull(tab);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        switch (tab) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case DASHBOARD:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            handleSwitchToDashboard();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case ONLINE:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            handleSwitchToOnline();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        case OFFLINE:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            handleSwitchToOffline();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public Consumer\u003cUrl\u003e getCurrentUrlChangeHandler() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return url -\u003e {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            logic.setCurrentUrl(url);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            handleSwitchToOnline();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        };"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public BookmarkListPanel getBookmarkListPanel() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return bookmarkListPanel;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public DashboardPanel getDashboardPanel() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return dashboardPanel;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public OfflinePanel getOfflinePanel() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return offlinePanel;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public BrowserPanel getBrowserPanel() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @see seedu.mark.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            if (commandResult.getTab() !\u003d null) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                handleTabSwitchRequestIfAny(commandResult.getTab());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 13,
      "openorclose": 4,
      "Na-Nazhou": 23,
      "kxyoke": 58,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/OfflinePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " * The Offline panel of Mark."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "public class OfflinePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private static final String FXML \u003d \"OfflinePanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private AnnotationListPanel annotationListPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private TextField dummyField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private StackPane annotationListPanelPlaceholder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public OfflinePanel(ObservableList\u003cParagraph\u003e paragraphs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO: init any necessary construct"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        annotationListPanel \u003d new AnnotationListPanel(paragraphs); //TODO: get logic to handle paragraphs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        annotationListPanelPlaceholder.getChildren().add(annotationListPanel.getRoot());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        dummyField.setText(\"This is a dummy offline tab. Please change me /. .\\\\|||\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 33
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        saveLocationStatus.setText(Path.of(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "Na-Nazhou": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/bookmark_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/mark/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/AnnotationListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003cListView fx:id\u003d\"annotationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 8
    }
  },
  {
    "path": "src/main/resources/view/AnnotationParagraphCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cVBox maxWidth\u003d\"100\" prefWidth\u003d\"50\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            maxWidth\u003d\"500\" minWidth\u003d\"400\" prefWidth\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cLabel fx:id\u003d\"para\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\" textOverrun\u003d\"CLIP\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cVBox minWidth\u003d\"100\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cLabel fx:id\u003d\"note\" styleClass\u003d\"cell_small_label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 34
    }
  },
  {
    "path": "src/main/resources/view/BookmarkListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "      \u003cLabel fx:id\u003d\"url\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$url\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "      \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      \u003cLabel fx:id\u003d\"folder\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$folder\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      \u003cLabel fx:id\u003d\"cache\" text\u003d\"Offline copy available!\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "openorclose": 2,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/BookmarkListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "  \u003cListView fx:id\u003d\"bookmarkListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cTextField fx:id\u003d\"addressBar\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                   onAction\u003d\"#handleAddressBarInput\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                   prefHeight\u003d\"25.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                   HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cButton fx:id\u003d\"homeButton\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                onAction\u003d\"#loadHomepage\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                mnemonicParsing\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u003cImageView fx:id\u003d\"homepageLogo\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                        fitHeight\u003d\"25.0\" fitWidth\u003d\"25.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                           pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003cStackPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 1,
      "kxyoke": 32
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    background-color: #383838; /* Used in the defaultOfflinePage.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "#tags .orange {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 10,
      "kxyoke": 1,
      "-": 349
    }
  },
  {
    "path": "src/main/resources/view/DashboardPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "      prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        \u003cStackPane fx:id\u003d\"folderStructurePlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "openorclose": 7,
      "kxyoke": 8
    }
  },
  {
    "path": "src/main/resources/view/FolderStructure.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003cTreeView xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  fx:id\u003d\"treeView\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "\u003c/TreeView\u003e"
      }
    ],
    "authorContributionMap": {
      "openorclose": 10
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"1100\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Mark - Your Personal Bookmark Manager\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "         type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    \u003cImage url\u003d\"@/images/bookmark_icon.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cHBox VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"80\" minHeight\u003d\"80\" prefHeight\u003d\"80\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                     styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "          \u003cBorderPane maxWidth\u003d\"360.0\" minWidth\u003d\"360.0\" prefWidth\u003d\"360.0\" HBox.hgrow\u003d\"NEVER\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cbottom\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "              \u003cHBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u003cButton fx:id\u003d\"dashboardButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSwitchToDashboard\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                        prefHeight\u003d\"40\" prefWidth\u003d\"120\" text\u003d\"Dashboard\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u003cButton fx:id\u003d\"onlineButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSwitchToOnline\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                        prefHeight\u003d\"40\" prefWidth\u003d\"120\" text\u003d\"Online\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                \u003cButton fx:id\u003d\"offlinedButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSwitchToOffline\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                        prefHeight\u003d\"40\" prefWidth\u003d\"120\" text\u003d\"Offline\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003c/bottom\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "          \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cSplitPane fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "          \u003cVBox fx:id\u003d\"bookmarkList\" maxWidth\u003d\"340\" minWidth\u003d\"340\" prefWidth\u003d\"340\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bookmarkListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "          \u003cStackPane fx:id\u003d\"mainViewAreaPlaceholder\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "kxyoke": 40,
      "-": 50
    }
  },
  {
    "path": "src/main/resources/view/OfflinePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003cScrollPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003cVBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cTextField fx:id\u003d\"dummyField\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003cVBox fx:id\u003d\"annotationList\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "          styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        \u003cStackPane fx:id\u003d\"annotationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 20
    }
  },
  {
    "path": "src/test/java/seedu/mark/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expected.setConfigPath(Path.of(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "Na-Nazhou": 2,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        final Index fifthBookmarkIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(fifthBookmarkIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(fifthBookmarkIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(fifthBookmarkIndex.equals(fifthBookmarkIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(fifthBookmarkIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(fifthBookmarkIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(fifthBookmarkIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/bookmark_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Path.of(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        config.setUserPrefsFilePath(Path.of(\"preferences.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 4,
      "Na-Nazhou": 2,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/mark/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    //---------------- Tests for containsPhraseIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Invalid equivalence partitions for phrase: null, empty"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The three test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void containsPhraseIgnoreCase_nullPhrase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsPhraseIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void containsPhraseIgnoreCase_emptyPhrase_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Phrase parameter cannot be empty\", () -\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            StringUtil.containsPhraseIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void containsPhraseIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsPhraseIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Valid equivalence partitions for phrase:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - any phrase"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - phrase containing symbols/numbers"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - phrase with leading/trailing spaces"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - phrase with multiple words"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - matches start of sentence"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - end of sentence"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - middle of sentence"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - multiple matches"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *   - sentence phrase matches part of the query phrase"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void containsPhraseIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(StringUtil.containsPhraseIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(StringUtil.containsPhraseIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Matches a partial word"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(StringUtil.containsPhraseIgnoreCase(\"a b c\", \"bbbbbb\")); // Query phrase bigger than sentence"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // Start of sentence (boundary case)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // End of sentence (boundary case)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Phrase has leading/trailing spaces"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"aaa bbb ccc\", \"bBb ccC  \")); // Phrase contains multiple words"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Matches multiple phrases in sentence"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(StringUtil.containsPhraseIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 73,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.URL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.JsonMarkStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonMarkStorage markStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new JsonMarkStorage(temporaryFolder.resolve(\"mark.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(markStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Setup LogicManager with JsonMarkIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonMarkStorage markStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new JsonMarkIoExceptionThrowingStub("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionMark.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(markStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + URL_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.addBookmark(expectedBookmark);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(String.format(AddCommand.MESSAGE_SUCCESS, expectedBookmark));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void getFilteredBookmarkList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBookmarkList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void getFolderStructure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(logic.getFolderStructure(), new FolderStructure(Folder.ROOT_FOLDER, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static class JsonMarkIoExceptionThrowingStub extends JsonMarkStorage {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private JsonMarkIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void saveMark(ReadOnlyMark mark, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 38,
      "openorclose": 6,
      "Na-Nazhou": 9,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_newBookmark_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBookmark);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, validBookmark);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.addBookmark(validBookmark);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(addCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_duplicateBookmark_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmarkInList \u003d model.getMark().getBookmarkList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(new AddCommand(bookmarkInList), model, new StorageStub(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_BOOKMARK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 17,
      "Na-Nazhou": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_FOLDER_NOT_FOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalFolderStructure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void constructor_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_bookmarkAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ModelStubAcceptingBookmarkAdded modelStub \u003d new ModelStubAcceptingBookmarkAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBookmark)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .execute(modelStub, new StorageStub());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBookmark),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(Arrays.asList(validBookmark), modelStub.bookmarksAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_duplicateBookmark_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBookmark);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBookmark(validBookmark);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_BOOKMARK, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                addCommand.execute(modelStub, new StorageStub()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_nonexistentFolder_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder nonexistentFolder \u003d new Folder(\"nonexistent\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(getTypicalFolderStructure().hasFolder(nonexistentFolder));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark nonexistentFolderBookmark \u003d new BookmarkBuilder().withFolder(nonexistentFolder.folderName).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(nonexistentFolderBookmark);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithoutFolderAndBookmarks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(CommandException.class, String.format(MESSAGE_FOLDER_NOT_FOUND, nonexistentFolder), () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                addCommand.execute(modelStub, new StorageStub()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark alice \u003d new BookmarkBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bob \u003d new BookmarkBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * A Model stub that contains a single bookmark."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private class ModelStubWithBookmark extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private final Bookmark bookmark;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ModelStubWithBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            requireNonNull(bookmark);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public boolean hasBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            requireNonNull(bookmark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return this.bookmark.isSameBookmark(bookmark);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * A Model stub that always accept the bookmark being added."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private class ModelStubAcceptingBookmarkAdded extends ModelStub {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public final ArrayList\u003cBookmark\u003e bookmarksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public boolean hasBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            requireNonNull(bookmark);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return bookmarksAdded.stream().anyMatch(bookmark::isSameBookmark);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void addBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            requireNonNull(bookmark);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            bookmarksAdded.add(bookmark);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void applyAllTaggers() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        public void saveMark(String record) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public ReadOnlyMark getMark() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new Mark();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * A Model stub that contains no folders and bookmarks."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private class ModelStubWithoutFolderAndBookmarks extends ModelStub {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public boolean hasBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 50,
      "openorclose": 38,
      "Na-Nazhou": 7,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/AddFolderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.ModelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class AddFolderCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final String NON_NULL_STRING \u003d \"nonNull\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final Folder NON_NULL_FOLDER \u003d new Folder(NON_NULL_STRING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void constructor_nullFolderNullParent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFolderCommand(null, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void constructor_nullFolderNonNullParent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddFolderCommand(null, NON_NULL_FOLDER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void constructor_nonNullFolderNullParent_createsCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertDoesNotThrow(() -\u003e new AddFolderCommand(NON_NULL_FOLDER, null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void constructor_nonNullFolderNonNullParent_createsCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertDoesNotThrow(() -\u003e new AddFolderCommand(NON_NULL_FOLDER, NON_NULL_FOLDER));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_folderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStubAcceptingFolderAdded modelStub \u003d new ModelStubAcceptingFolderAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        CommandResult commandResult \u003d new AddFolderCommand(NON_NULL_FOLDER, null).execute(modelStub, new StorageStub());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(String.format(AddFolderCommand.MESSAGE_SUCCESS, NON_NULL_FOLDER.folderName),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure expected \u003d new FolderStructure("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                Folder.ROOT_FOLDER, List.of(new FolderStructure(NON_NULL_FOLDER, new ArrayList\u003c\u003e())));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(expected, modelStub.folderStructure);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_duplicateRootFolder_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand addFolderCommand \u003d new AddFolderCommand(Folder.ROOT_FOLDER, null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFolder(NON_NULL_FOLDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(CommandException.class, AddFolderCommand.MESSAGE_READDING_ROOT_FOLDER, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                addFolderCommand.execute(modelStub, new StorageStub()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_duplicateFolder_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand addFolderCommand \u003d new AddFolderCommand(NON_NULL_FOLDER, null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFolder(NON_NULL_FOLDER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(CommandException.class, AddFolderCommand.MESSAGE_DUPLICATE_FOLDER, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                addFolderCommand.execute(modelStub, new StorageStub()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder schoolFolder \u003d new Folder(\"school\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder workFolder \u003d new Folder(\"work\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand nullParentCommand \u003d new AddFolderCommand(schoolFolder, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand nonNullParentCommand \u003d new AddFolderCommand(schoolFolder, workFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(nonNullParentCommand, nonNullParentCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(nullParentCommand, nullParentCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand nullParentCommandCopy \u003d new AddFolderCommand(schoolFolder, null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand nonNullParentCommandCopy \u003d new AddFolderCommand(schoolFolder, workFolder);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(nonNullParentCommand, nonNullParentCommandCopy);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(nullParentCommand, nullParentCommandCopy);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertNotEquals(1, nullParentCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertNotEquals(1, nonNullParentCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertNotEquals(null, nullParentCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertNotEquals(null, nonNullParentCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertNotEquals(nullParentCommand, nonNullParentCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * A Model stub that contains a single folder."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private class ModelStubWithFolder extends ModelStub {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        private final Folder folder;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStubWithFolder(Folder folder) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            requireNonNull(folder);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            this.folder \u003d folder;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            requireNonNull(folder);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return this.folder.equals(folder);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * A Model stub that always accepts the folder being added."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private class ModelStubAcceptingFolderAdded extends ModelStub {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public final FolderStructure folderStructure \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new FolderStructure(Folder.ROOT_FOLDER, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            requireNonNull(folder);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return folderStructure.hasFolder(folder);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void addFolder(Folder folder, Folder parentFolder) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            requireNonNull(folder);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            folderStructure.find(parentFolder \u003d\u003d null ? Folder.ROOT_FOLDER : parentFolder)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    .getSubfolders().add(new FolderStructure(folder, new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        public void saveMark(String record) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            // called by {@code AddFolderCommand#execute()}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "openorclose": 143,
      "Na-Nazhou": 6
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/AddReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.ModelStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "class AddReminderCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private ModelStubAcceptingReminderAdded modelStub \u003d new ModelStubAcceptingReminderAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void constructor_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddReminderCommand(null, new Note(\"open\"), null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void execute_bookmarkAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Note note \u003d new Note(\"Open\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Bookmark validBookmark \u003d model.getFilteredBookmarkList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder validReminder \u003d new Reminder(validBookmark, time, note);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        CommandResult commandResult \u003d new AddReminderCommand(INDEX_FIRST_BOOKMARK, note, time)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .execute(modelStub, new StorageStub());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertEquals(String.format(AddReminderCommand.MESSAGE_SUCCESS, validReminder),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void execute_duplicateBookmark_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        LocalDateTime time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Note note \u003d new Note(\"Open\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        AddReminderCommand addReminderCommand \u003d new AddReminderCommand(INDEX_FIRST_BOOKMARK, note, time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        addReminderCommand.execute(modelStub, new StorageStub());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(CommandException.class, addReminderCommand.MESSAGE_DUPLICATE_REMINDER, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                addReminderCommand.execute(modelStub, new StorageStub()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * A Model stub that always accept the bookmark being added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private class ModelStubAcceptingReminderAdded extends ModelStub {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        public final HashMap\u003cBookmark, Reminder\u003e association \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        public final ObservableList\u003cBookmark\u003e bookmarks \u003d model.getFilteredBookmarkList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        public void addReminder(Bookmark bookmark, Reminder reminder) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            association.put(bookmark, reminder);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        public boolean isBookmarkHasReminder(Bookmark bookmark) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return association.containsKey(bookmark);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        public void saveMark(String record) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            // called by {@code AddReminderCommand#execute()}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        public ReadOnlyMark getMark() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return new Mark();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        public ObservableList\u003cBookmark\u003e getFilteredBookmarkList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return bookmarks;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 98,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/AutotagCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.AutotagCommand.MESSAGE_AUTOTAG_ADDED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.AutotagCommand.MESSAGE_AUTOTAG_EXISTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AutotagCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class AutotagCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger firstTagger \u003d new SelectiveBookmarkTagger(new Tag(\"myTag\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                prepareNamePredicate(\"hello\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger secondTagger \u003d new SelectiveBookmarkTagger(new Tag(\"tagTwo\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                prepareNamePredicate(\"first second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand firstCommand \u003d new AutotagCommand(firstTagger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand secondCommand \u003d new AutotagCommand(secondTagger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand findFirstCommandCopy \u003d new AutotagCommand(firstTagger);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(firstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_taggerAlreadyExists_throwsException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"zzz\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger tagger \u003d new SelectiveBookmarkTagger(new Tag(\"notTagged\"), predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand command \u003d new AutotagCommand(tagger);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger existingTagger \u003d new SelectiveBookmarkTagger(new Tag(\"notTagged\"), predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.addTagger(existingTagger);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(command, model, storage, String.format(MESSAGE_AUTOTAG_EXISTS, tagger));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_newTaggerDoesNotMatchBookmarks_successNoBookmarksTagged() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // No bookmarks tagged"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"zzz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger tagger \u003d new SelectiveBookmarkTagger(new Tag(\"notTagged\"), predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand command \u003d new AutotagCommand(tagger);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_AUTOTAG_ADDED, tagger);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, model, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_newTaggerMatchesOneBookmark_successBookmarkTagged() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Alice Pauline\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger tagger \u003d new SelectiveBookmarkTagger(new Tag(\"oneTagged\"), predicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand command \u003d new AutotagCommand(tagger);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark1 \u003d new BookmarkBuilder(ALICE).withTags(\"friends\", \"oneTagged\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_AUTOTAG_ADDED, tagger);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.setBookmark(ALICE, expectedBookmark1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, model, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_newTaggerMatchesMultipleBookmarks_successBookmarksTagged() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"ku\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger tagger \u003d new SelectiveBookmarkTagger(new Tag(\"namesContainKu\"), predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand command \u003d new AutotagCommand(tagger);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark1 \u003d new BookmarkBuilder(CARL).withTags(\"namesContainKu\").build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark2 \u003d new BookmarkBuilder(FIONA).withTags(\"namesContainKu\").build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_AUTOTAG_ADDED, tagger);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setBookmark(CARL, expectedBookmark1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setBookmark(FIONA, expectedBookmark2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, model, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 127,
      "Na-Nazhou": 6
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/CacheCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.ModelStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class CacheCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    // only testing for invalid, as trying to test a valid URL depends on internet connection."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    // future: mock the URL class so that we can test it without internet"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_invalidUrl_addFailure() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().withUrl(\"http://INVALID\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStubAcceptingBookmarkAdded modelStub \u003d new ModelStubAcceptingBookmarkAdded(validBookmark);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CommandResult commandResult \u003d new CacheCommand(INDEX_FIRST_BOOKMARK)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .execute(modelStub, new StorageStub());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(CacheCommand.MESSAGE_FAILURE, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CacheCommand command \u003d new CacheCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CacheCommand other \u003d new CacheCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(command, other);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private class ModelStubAcceptingBookmarkAdded extends ModelStub {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        private Bookmark setBookmark \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStubAcceptingBookmarkAdded(Bookmark bookmark) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            setBookmark \u003d bookmark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void setBookmark(Bookmark target, Bookmark editedBookmark) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            setBookmark \u003d editedBookmark;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void saveMark(String message) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            // phantom save just for testing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public ObservableList\u003cBookmark\u003e getFilteredBookmarkList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return FXCollections.observableList(List.of(setBookmark));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void updateCurrentDisplayedCache(Bookmark bookmarkToDisplayCache) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            // phantom update just for testing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 67,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_emptyMark_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(ClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(clearCommand, model, new StorageStub(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_nonEmptyMark_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setMark(new Mark());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(ClearCommand.MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(clearCommand, model, new StorageStub(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 15,
      "Na-Nazhou": 6,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_FOLDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_PARENT_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.EditBookmarkDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String VALID_URL_AMY \u003d \"https://amy-example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String VALID_URL_BOB \u003d \"https://bob-example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String VALID_FOLDER_CONTACTS \u003d \"contacts\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String VALID_FOLDER_CS2103T \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String VALID_FOLDER_CS2101 \u003d \"CS2101\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String VALID_NOTE_OPEN \u003d \"Open Website\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String VALID_NOTE_READ \u003d \"READ ARTICLE\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String VALID_TIME_OPEN \u003d \"12/12/2020 1800\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String VALID_TIME_READ \u003d \"02/03/2019 0500\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String VALID_CACHED_HTML \u003d \"\u003cdiv\u003e Some HTML \u003c/div\u003e\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String URL_DESC_AMY \u003d \" \" + PREFIX_URL + VALID_URL_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String URL_DESC_BOB \u003d \" \" + PREFIX_URL + VALID_URL_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String URL_DESC_THIS \u003d \" \" + PREFIX_URL + \"this\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String REMARK_DESC_AMY \u003d \" \" + PREFIX_REMARK + VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String REMARK_DESC_BOB \u003d \" \" + PREFIX_REMARK + VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String PARENT_FOLDER_DESC_CS2103T \u003d \" \" + PREFIX_PARENT_FOLDER + VALID_FOLDER_CS2103T;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String FOLDER_DESC_CS2103T \u003d \" \" + PREFIX_FOLDER + VALID_FOLDER_CS2103T;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String FOLDER_DESC_CS2101 \u003d \" \" + PREFIX_FOLDER + VALID_FOLDER_CS2101;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String NOTE_DESC_OPEN \u003d \" \" + PREFIX_NOTE + VALID_NOTE_OPEN;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String NOTE_DESC_READ \u003d \" \" + PREFIX_NOTE + VALID_NOTE_READ;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String DATE_DESC_OPEN \u003d \" \" + PREFIX_TIME + VALID_TIME_OPEN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String DATE_DESC_READ \u003d \" \" + PREFIX_TIME + VALID_TIME_READ;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"invalid\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String INVALID_URL_DESC \u003d \" \" + PREFIX_URL + \"invalid??url\"; // double \u0027?\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String INVALID_REMARK_DESC \u003d \" \" + PREFIX_REMARK + \"it/ invalid\"; // \u0027/\u0027 not allowed in remarks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"invalid*tag\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String INVALID_FOLDER_DESC \u003d \" \" + PREFIX_FOLDER + \"fold#er\"; // # not allowed in folders"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static final String INVALID_PARENT_FOLDER_DESC \u003d \" \" + PREFIX_PARENT_FOLDER + \"fold^er\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String INVALID_NOTE_DESC \u003d \" \" + PREFIX_NOTE + \"/Take quiz/\"; // \u0027/\u0027 not allowed in notes"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String INVALID_TIME_DESC \u003d \" \" + PREFIX_TIME + \"03042000 1900\"; // wrong format time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final EditCommand.EditBookmarkDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final EditCommand.EditBookmarkDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DESC_AMY \u003d new EditBookmarkDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withUrl(VALID_URL_AMY).withRemark(VALID_REMARK_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DESC_BOB \u003d new EditBookmarkDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withUrl(VALID_URL_BOB).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, Storage actualStorage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                                            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualStorage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, Storage, CommandResult, Model)}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, Storage actualStorage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualStorage, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * - the mark model, filtered bookmark list and selected bookmark in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, Storage actualStorage,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark expectedMark \u003d new Mark(actualModel.getMark());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookmarkList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel, actualStorage));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedMark, actualModel.getMark());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBookmarkList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the bookmark at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * {@code model}\u0027s mark."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static void showBookmarkAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookmarkList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmark \u003d model.getFilteredBookmarkList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        final String[] splitName \u003d bookmark.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.updateFilteredBookmarkList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(1, model.getFilteredBookmarkList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Deletes the bookmark at the given {@code targetIndex} in the {@code model}\u0027s mark."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static void deleteBookmarkAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        int initialSize \u003d model.getFilteredBookmarkList().size();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c initialSize);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark bookmarkToDelete \u003d model.getFilteredBookmarkList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.deleteBookmark(bookmarkToDelete);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.saveMark(String.format(DeleteCommand.MESSAGE_DELETE_BOOKMARK_SUCCESS, bookmarkToDelete));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertEquals(initialSize - 1, model.getFilteredBookmarkList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Deletes the first bookmark in {@code model}\u0027s mark."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public static void deleteFirstBookmark(Model model) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 46,
      "TSAI-HSIAO-HAN": 18,
      "openorclose": 9,
      "Na-Nazhou": 29,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/DeleteCacheCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class DeleteCacheCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_valid_deleteSuccess() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().withCachedCopy(new CachedCopy(\"\u003chtml\u003e\")).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStubAcceptingBookmarkAdded modelStub \u003d new ModelStubAcceptingBookmarkAdded(validBookmark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DeleteCacheCommand command \u003d new DeleteCacheCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CommandResult result \u003d command.execute(modelStub, new StorageStub());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(DeleteCacheCommand.MESSAGE_SUCCESS, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_noOfflineCopy_deleteFailure() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStubAcceptingBookmarkAdded modelStub \u003d new ModelStubAcceptingBookmarkAdded(validBookmark);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DeleteCacheCommand command \u003d new DeleteCacheCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(CommandException.class, DeleteCacheCommand.MESSAGE_FAILURE, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                command.execute(modelStub, new StorageStub()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DeleteCacheCommand command \u003d new DeleteCacheCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DeleteCacheCommand other \u003d new DeleteCacheCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(command, other);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private class ModelStubAcceptingBookmarkAdded extends ModelStub {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        private Bookmark setBookmark \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelStubAcceptingBookmarkAdded(Bookmark bookmark) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            setBookmark \u003d bookmark;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void setBookmark(Bookmark target, Bookmark editedBookmark) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            setBookmark \u003d editedBookmark;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void saveMark(String message) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            // phantom save just for testing"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public ObservableList\u003cBookmark\u003e getFilteredBookmarkList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return FXCollections.observableList(List.of(setBookmark));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void updateCurrentDisplayedCache(Bookmark bookmarkToDisplayCache) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            // phantom update just for testing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 81
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.showBookmarkAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmarkToDelete \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOKMARK_SUCCESS, bookmarkToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.deleteBookmark(bookmarkToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookmarkList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, new StorageStub(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmarkToDelete \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOKMARK_SUCCESS, bookmarkToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.deleteBookmark(bookmarkToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showNoBookmark(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bookmark list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMark().getBookmarkList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, new StorageStub(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_BOOKMARK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void showNoBookmark(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model.updateFilteredBookmarkList(p -\u003e false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(model.getFilteredBookmarkList().isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 45,
      "Na-Nazhou": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/EditBookmarkDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_URL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand.EditBookmarkDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.EditBookmarkDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class EditBookmarkDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptorWithSameValues \u003d new EditBookmarkDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditBookmarkDescriptor editedAmy \u003d new EditBookmarkDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different url -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAmy \u003d new EditBookmarkDescriptorBuilder(DESC_AMY).withUrl(VALID_URL_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAmy \u003d new EditBookmarkDescriptorBuilder(DESC_AMY).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAmy \u003d new EditBookmarkDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 17,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_FOLDER_NOT_FOUND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.showBookmarkAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalFolderStructure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.EditBookmarkDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark editedBookmark \u003d new BookmarkBuilder().withFolder(\"contacts\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder(editedBookmark).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOKMARK, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOKMARK_SUCCESS, editedBookmark);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Mark(model.getMark()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setBookmark(model.getFilteredBookmarkList().get(0), editedBookmark);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(editCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index indexLastBookmark \u003d Index.fromOneBased(model.getFilteredBookmarkList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark lastBookmark \u003d model.getFilteredBookmarkList().get(indexLastBookmark.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        BookmarkBuilder bookmarkInList \u003d new BookmarkBuilder(lastBookmark);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedBookmark \u003d bookmarkInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastBookmark, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOKMARK_SUCCESS, editedBookmark);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Mark(model.getMark()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setBookmark(lastBookmark, editedBookmark);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(editCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOKMARK, new EditCommand.EditBookmarkDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedBookmark \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOKMARK_SUCCESS, editedBookmark);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Mark(model.getMark()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(editCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmarkInFilteredList \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedBookmark \u003d new BookmarkBuilder(bookmarkInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOKMARK,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new EditBookmarkDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOKMARK_SUCCESS, editedBookmark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Mark(model.getMark()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setBookmark(model.getFilteredBookmarkList().get(0), editedBookmark);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(editCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_duplicateBookmarkUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark firstBookmark \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder(firstBookmark).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_BOOKMARK, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(editCommand, model, new StorageStub(), EditCommand.MESSAGE_DUPLICATE_BOOKMARK);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_duplicateBookmarkFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // edit bookmark in filtered list into a duplicate in Mark"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmarkInList \u003d model.getMark().getBookmarkList().get(INDEX_SECOND_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOKMARK,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new EditBookmarkDescriptorBuilder(bookmarkInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(editCommand, model, new StorageStub(), EditCommand.MESSAGE_DUPLICATE_BOOKMARK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_nonexistentFolderBookmarkFilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder nonexistentFolder \u003d new Folder(\"nonexistent\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(getTypicalFolderStructure().hasFolder(nonexistentFolder));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // edit bookmark in filtered list into one with a nonexistent folder in Mark"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark bookmarkInList \u003d model.getMark().getBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOKMARK,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new EditBookmarkDescriptorBuilder(bookmarkInList).withFolder(nonexistentFolder.folderName).build());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertCommandFailure(editCommand, model, new StorageStub(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                String.format(MESSAGE_FOLDER_NOT_FOUND, nonexistentFolder));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_invalidBookmarkIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookmarkList().size() + 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(editCommand, model, new StorageStub(), Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * but smaller than size of mark\u0027s bookmark list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_invalidBookmarkIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of mark\u0027s bookmark list"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMark().getBookmarkList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new EditBookmarkDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(editCommand, model, new StorageStub(), Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_BOOKMARK, DESC_AMY);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor copyDescriptor \u003d new EditCommand.EditBookmarkDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_BOOKMARK, copyDescriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_BOOKMARK, DESC_AMY)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_BOOKMARK, DESC_BOB)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 82,
      "openorclose": 19,
      "Na-Nazhou": 5,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.ExitCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CommandResult expectedCommandResult \u003d new ExitCommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, new StorageStub(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 8,
      "openorclose": 1,
      "Na-Nazhou": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExportCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Storage storage \u003d new StorageStubAllowsSave();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_validFile_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path filePath \u003d Path.of(\"data\", \"myValidFile\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ExportCommand command \u003d new ExportCommand(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_EXPORT_SUCCESS, filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, model, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_unableToSave_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // simulate problem when saving to file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ExportCommand command \u003d new ExportCommand(Path.of(\"problem\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(command, model, storage, ExportCommand.MESSAGE_EXPORT_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path firstFilePath \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path secondFilePath \u003d Path.of(\"data\", \"two\", \"three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ExportCommand exportFirstCommand \u003d new ExportCommand(firstFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ExportCommand exportSecondCommand \u003d new ExportCommand(secondFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ExportCommand exportFirstCommandCopy \u003d new ExportCommand(firstFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(exportFirstCommand.equals(exportFirstCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(exportFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(exportFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(exportFirstCommand.equals(exportSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * A Storage Stub that allows saveMark to be called."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final class StorageStubAllowsSave implements Storage {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cUserPrefs\u003e readUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cReadOnlyMark\u003e readMark() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cReadOnlyMark\u003e readMark(Path filePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void saveMark(ReadOnlyMark mark) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void saveMark(ReadOnlyMark mark, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            requireNonNull(mark);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            requireNonNull(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // test handling of IOException"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (filePath.endsWith(\"problem\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 122
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/FavoriteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.showBookmarkAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * {@code FavoriteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class FavoriteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark bookmarkToFavorite \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand favoriteCommand \u003d new FavoriteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage \u003d String.format(FavoriteCommand.MESSAGE_FAVORITE_BOOKMARK_SUCCESS, bookmarkToFavorite);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.favoriteBookmark(bookmarkToFavorite);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(favoriteCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookmarkList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand favoriteCommand \u003d new FavoriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(favoriteCommand, model, new StorageStub(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark bookmarkToFavorite \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand favoriteCommand \u003d new FavoriteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage \u003d String.format(FavoriteCommand.MESSAGE_FAVORITE_BOOKMARK_SUCCESS, bookmarkToFavorite);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.favoriteBookmark(bookmarkToFavorite);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        showBookmarkAtIndex(expectedModel, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(favoriteCommand, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bookmark list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMark().getBookmarkList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand favoriteCommand \u003d new FavoriteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(favoriteCommand, model, new StorageStub(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand favoriteFirstCommand \u003d new FavoriteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand favoriteSecondCommand \u003d new FavoriteCommand(INDEX_SECOND_BOOKMARK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(favoriteFirstCommand.equals(favoriteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand favoriteFirstCommandCopy \u003d new FavoriteCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(favoriteFirstCommand.equals(favoriteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(favoriteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(favoriteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(favoriteFirstCommand.equals(favoriteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 104
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_BOOKMARKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.predicates.BookmarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate firstPredicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.singletonList(\"first\"), Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate secondPredicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.singletonList(\"second\"), Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_zeroKeywords_noBookmarkFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKMARKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.updateFilteredBookmarkList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookmarkList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_multipleKeywords_multipleBookmarksFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKMARKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.updateFilteredBookmarkList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, model, new StorageStub(), expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredBookmarkList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "     * Parses {@code userInput} into a {@code BookmarkContainKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private BookmarkContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new BookmarkContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 24,
      "Na-Nazhou": 11,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/GotoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.showBookmarkAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class GotoCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark bookmarkToOpen \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        GotoCommand gotoCommand \u003d new GotoCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.setCurrentUrl(bookmarkToOpen.getUrl());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage \u003d String.format(GotoCommand.MESSAGE_GOTO_BOOKMARK_ACKNOWLEDGEMENT, bookmarkToOpen);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(gotoCommand, model, storage, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookmarkList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        GotoCommand gotoCommand \u003d new GotoCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(gotoCommand, model, storage, Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        showBookmarkAtIndex(expectedModel, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark bookmarkToOpen \u003d model.getFilteredBookmarkList().get(INDEX_FIRST_BOOKMARK.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        GotoCommand gotoCommand \u003d new GotoCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.setCurrentUrl(bookmarkToOpen.getUrl());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage \u003d String.format(GotoCommand.MESSAGE_GOTO_BOOKMARK_ACKNOWLEDGEMENT, bookmarkToOpen);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(gotoCommand, model, storage, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of bookmark list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMark().getBookmarkList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        GotoCommand gotoCommand \u003d new GotoCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(gotoCommand, model, storage, Messages.MESSAGE_INVALID_BOOKMARK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 7,
      "Na-Nazhou": 68
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.results.HelpCommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CommandResult expectedCommandResult \u003d new HelpCommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, new StorageStub(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 8,
      "openorclose": 1,
      "Na-Nazhou": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/ImportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalBookmarks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalFolderStructure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ImportCommand}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path PATH_NON_EXISTENT_FILE \u003d Path.of(\"data\", \"bookmarks\", \"nonExistentFile\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path PATH_INVALID_FORMAT_FILE \u003d Path.of(\"invalidFormatFile\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path PATH_PROBLEM_FILE \u003d Path.of(\"problemFile\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path PATH_VALID_FILE \u003d Path.of(\"data\", \"validFile\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path PATH_NO_FOLDER_FILE \u003d Path.of(\"data\", \"validFileNoFolders\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path PATH_NO_BOOKMARK_FILE \u003d Path.of(\"data\", \"validFileNoBookmarks\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Model model \u003d new ModelManager(new Mark(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Storage storage \u003d new StorageStubAllowsRead();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Converts the list of bookmarks into a multi-line String, where each"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * line has 4 spaces of indentation."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static String makeIndentedString(List\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String newlineAndIndent \u003d \"\\n    \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return bookmarks.stream().map(Bookmark::toString)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .map(newlineAndIndent::concat)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .reduce(\"\", String::concat);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the {@code Folder} of all bookmarks in the given list to the root folder."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static List\u003cBookmark\u003e setFolderAsImportFolder(List\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return bookmarks.stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .map(ImportCommand.MarkImporter::setFolderAsImportFolder)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_invalidFile_exceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // file does not exist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path filePath \u003d PATH_NON_EXISTENT_FILE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_FILE_NOT_FOUND, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(command, model, storage, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // file contains wrong data format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        filePath \u003d PATH_INVALID_FORMAT_FILE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        command \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedMessage \u003d String.format(ImportCommand.MESSAGE_FILE_FORMAT_INCORRECT, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(command, model, storage, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // problem while reading file"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        filePath \u003d PATH_PROBLEM_FILE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        command \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandFailure(command, model, storage, ImportCommand.MESSAGE_IMPORT_FAILURE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_validFileEmptyMark_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path filePath \u003d PATH_VALID_FILE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_IMPORT_SUCCESS, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // set up expected model with appropriate state"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Mark(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark expectedMark \u003d new Mark();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedMark.setBookmarks(setFolderAsImportFolder(getTypicalBookmarks())); // strip folders"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setMark(expectedMark);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, model, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_validFileAllDuplicates_modelNotChanged() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(PATH_VALID_FILE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model initialModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_NO_BOOKMARKS_TO_IMPORT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                makeIndentedString(getTypicalBookmarks()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, initialModel, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_validFileNoBookmarksToImport_modelNotChanged() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(PATH_NO_BOOKMARK_FILE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model initialModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_NO_BOOKMARKS_TO_IMPORT, \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, initialModel, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute_validFileDuplicateBookmarksNoFolders_duplicatesSkipped() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path filePath \u003d PATH_NO_FOLDER_FILE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand command \u003d new ImportCommand(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // initial model: 3 bookmarks in root folder"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e existingBookmarks \u003d setFolderAsImportFolder(Arrays.asList(ALICE, BENSON, CARL));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark markWithSomeBookmarks \u003d new Mark();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        existingBookmarks.forEach(markWithSomeBookmarks::addBookmark);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model initialModel \u003d new ModelManager(markWithSomeBookmarks, new UserPrefs());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // expected message"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_IMPORT_SUCCESS_WITH_DUPLICATES, filePath,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                makeIndentedString(existingBookmarks));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // expected model: 7 bookmarks in root folder (4 imported)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(markWithSomeBookmarks, new UserPrefs());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark expectedMark \u003d new Mark();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedMark.setBookmarks(setFolderAsImportFolder(getTypicalBookmarks()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel.setMark(expectedMark);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.saveMark(expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(command, initialModel, storage, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path firstFilePath \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path secondFilePath \u003d Path.of(\"data\", \"two\", \"three\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand importFirstCommand \u003d new ImportCommand(firstFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand importSecondCommand \u003d new ImportCommand(secondFilePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(importFirstCommand.equals(importFirstCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand importFirstCommandCopy \u003d new ImportCommand(firstFilePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(importFirstCommand.equals(importFirstCommandCopy));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(importFirstCommand.equals(1));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(importFirstCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(importFirstCommand.equals(importSecondCommand));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * A Storage Stub that allows readMark to be called."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final class StorageStubAllowsRead implements Storage {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cUserPrefs\u003e readUserPrefs() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cReadOnlyMark\u003e readMark() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public Optional\u003cReadOnlyMark\u003e readMark(Path filePath) throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // note: should match test case #execute_invalidFile_exceptionThrown()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (filePath.equals(PATH_PROBLEM_FILE)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (filePath.equals(PATH_INVALID_FORMAT_FILE)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DataConversionException(new CommandException(\"Invalid data format\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (filePath.equals(PATH_NON_EXISTENT_FILE)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (filePath.equals(PATH_VALID_FILE)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return Optional.of(getTypicalMark());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (filePath.equals(PATH_NO_FOLDER_FILE)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Mark mark \u003d new Mark();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                mark.setBookmarks(setFolderAsImportFolder(getTypicalBookmarks()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return Optional.of(mark);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (filePath.equals(PATH_NO_BOOKMARK_FILE)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Mark mark \u003d new Mark();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                mark.setFolderStructure(getTypicalFolderStructure());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return Optional.of(mark);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new AssertionError(\"This method should be called with a specific type of path.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void saveMark(ReadOnlyMark mark) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void saveMark(ReadOnlyMark mark, Path filePath) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 242,
      "Na-Nazhou": 2
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.showBookmarkAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, new StorageStub(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showBookmarkAtIndex(model, INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, new StorageStub(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 16,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/MarkImporterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalBookmarks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ImportCommand.MarkImporter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class MarkImporterTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ReadOnlyMark mark \u003d new Mark();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        MarkImporter markImporter \u003d new MarkImporter(model, mark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(markImporter.equals(new MarkImporter(model, mark)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(markImporter.equals(markImporter));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(markImporter.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(markImporter.equals(5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different model -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Model typicalMarkModel \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(markImporter.equals(new MarkImporter(typicalMarkModel, mark)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different existing bookmarks -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark markWithOneDuplicate \u003d new Mark();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        markWithOneDuplicate.setBookmarks(Arrays.asList(ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark markWithTwoDuplicates \u003d new Mark();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        markWithTwoDuplicates.setBookmarks(Arrays.asList(ALICE, BENSON));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(new MarkImporter(typicalMarkModel, markWithOneDuplicate).equals("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new MarkImporter(typicalMarkModel, markWithTwoDuplicates)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmarks to import -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark differentMark \u003d new Mark();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        differentMark.setBookmarks(getTypicalBookmarks());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(markImporter.equals(new MarkImporter(model, differentMark)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 58
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/OfflineCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_CACHED_HTML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.ModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class OfflineCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_validIndex_successful() throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().withCachedCopy(new CachedCopy(VALID_CACHED_HTML)).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelAcceptingOfflineCommand modelStub \u003d new ModelAcceptingOfflineCommand(validBookmark);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        CommandResult commandResult \u003d new OfflineCommand(INDEX_FIRST_BOOKMARK)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .execute(modelStub, new StorageStub());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(String.format(OfflineCommand.MESSAGE_SUCCESS, validBookmark), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Bookmark validBookmark \u003d new BookmarkBuilder().build(); // no cached copy"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ModelAcceptingOfflineCommand modelStub \u003d new ModelAcceptingOfflineCommand(validBookmark);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(CommandException.class, OfflineCommand.MESSAGE_NO_CACHED_COPIES, () -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new OfflineCommand(INDEX_FIRST_BOOKMARK).execute(modelStub, new StorageStub()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        OfflineCommand command \u003d new OfflineCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        OfflineCommand other \u003d new OfflineCommand(INDEX_FIRST_BOOKMARK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(command, other);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private class ModelAcceptingOfflineCommand extends ModelStub {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        private Bookmark bookmark;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public ModelAcceptingOfflineCommand(Bookmark bookmark) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public ObservableList\u003cBookmark\u003e getFilteredBookmarkList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return FXCollections.observableList(List.of(bookmark));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public void updateDocument(OfflineDocument doc) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            // valid update"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 70,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.deleteFirstBookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_single() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.undoMark(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.undoMark(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.undoMark(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.undoMark(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Two redoable Mark states"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedRecord1 \u003d expectedModel.redoMark(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage1 \u003d String.format(RedoCommand.MESSAGE_SUCCESS, expectedRecord1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(new RedoCommand(1), model, storage, expectedMessage1, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Single redoable Mark state"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedRecord2 \u003d expectedModel.redoMark(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage2 \u003d String.format(RedoCommand.MESSAGE_SUCCESS, expectedRecord2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(new RedoCommand(1), model, storage, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // No redoable Mark state"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage3 \u003d String.format(RedoCommand.MESSAGE_FAILURE, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(new RedoCommand(1), model, storage, expectedMessage3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_multiple() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model.undoMark(2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel.undoMark(2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Two redoable Mark states"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage1 \u003d String.format(RedoCommand.MESSAGE_FAILURE, 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(new RedoCommand(3), model, storage, expectedMessage1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Two redoable Mark states"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedRecord2 \u003d expectedModel.redoMark(2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage2 \u003d String.format(RedoCommand.MESSAGE_SUCCESS, expectedRecord2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(new RedoCommand(2), model, storage, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // No redoable Mark state"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage3 \u003d String.format(RedoCommand.MESSAGE_FAILURE, 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(new RedoCommand(1), model, storage, expectedMessage3);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "Na-Nazhou": 78
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/TabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.logic.commands.TabCommand.MESSAGE_SWITCH_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.logic.commands.TabCommand.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.results.TabCommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "class TabCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void execute_tab_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        CommandResult expectedCommandResult \u003d new TabCommandResult("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                String.format(MESSAGE_SWITCH_ACKNOWLEDGEMENT, Tab.DASHBOARD.toString()), Tab.DASHBOARD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(new TabCommand(Tab.DASHBOARD), model, storage, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        expectedCommandResult \u003d new TabCommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                String.format(MESSAGE_SWITCH_ACKNOWLEDGEMENT, Tab.OFFLINE.toString()), Tab.OFFLINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(new TabCommand(Tab.OFFLINE), model, storage, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        expectedCommandResult \u003d new TabCommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                String.format(MESSAGE_SWITCH_ACKNOWLEDGEMENT, Tab.ONLINE.toString()), Tab.ONLINE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertCommandSuccess(new TabCommand(Tab.ONLINE), model, storage, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void equals_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(new TabCommand(Tab.DASHBOARD), new TabCommand(Tab.DASHBOARD));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(new TabCommand(Tab.OFFLINE), new TabCommand(Tab.OFFLINE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(new TabCommand(Tab.ONLINE), new TabCommand(Tab.ONLINE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertNotEquals(new TabCommand(Tab.DASHBOARD), new TabCommand(Tab.OFFLINE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TabCommand(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 6,
      "Na-Nazhou": 1,
      "kxyoke": 44
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.deleteFirstBookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.storage.StorageStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        model \u003d new ModelManager(getTypicalMark(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMark(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_single() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Two undoable Mark states"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedRecord1 \u003d expectedModel.undoMark(1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage1 \u003d String.format(UndoCommand.MESSAGE_SUCCESS, expectedRecord1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(new UndoCommand(1), model, storage, expectedMessage1, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Single undoable Mark state"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedRecord2 \u003d expectedModel.undoMark(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage2 \u003d String.format(UndoCommand.MESSAGE_SUCCESS, expectedRecord2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(new UndoCommand(1), model, storage, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // No undoable Mark state"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage3 \u003d String.format(UndoCommand.MESSAGE_FAILURE, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(new UndoCommand(1), model, storage, expectedMessage3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void execute_multiple() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        deleteFirstBookmark(expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Two undoable Mark states"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage1 \u003d String.format(UndoCommand.MESSAGE_FAILURE, 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(new UndoCommand(3), model, storage, expectedMessage1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Two undoable Mark states"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedRecord2 \u003d expectedModel.undoMark(2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage2 \u003d String.format(UndoCommand.MESSAGE_SUCCESS, expectedRecord2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandSuccess(new UndoCommand(2), model, storage, expectedMessage2, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // No undoable Mark state"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String expectedMessage3 \u003d String.format(UndoCommand.MESSAGE_FAILURE, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertCommandFailure(new UndoCommand(1), model, storage, expectedMessage3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "Na-Nazhou": 72
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/results/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CommandResult(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different isShowHelp() value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(commandResult.equals(new HelpCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different isExit() value -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(commandResult.equals(new ExitCommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different getTab() value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(commandResult.equals(new TabCommandResult(\"feedback\", TabCommand.Tab.DASHBOARD)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different isShowHelp() value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new HelpCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different isExit() value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new ExitCommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different getTab() value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new TabCommandResult(\"feedback\", TabCommand.Tab.DASHBOARD).hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 4,
      "Na-Nazhou": 19,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/results/ExitCommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class ExitCommandResultTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void isExit() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        ExitCommandResult commandResult \u003d new ExitCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(commandResult.isExit());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertNull(commandResult.getTab());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 19
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/results/HelpCommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class HelpCommandResultTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void isShowHelp() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        HelpCommandResult commandResult \u003d new HelpCommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(commandResult.isExit());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertNull(commandResult.getTab());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 19
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/commands/results/TabCommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class TabCommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void getTab() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        TabCommandResult commandResult \u003d new TabCommandResult(\"feedback\", TabCommand.Tab.DASHBOARD);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertEquals(TabCommand.Tab.DASHBOARD, commandResult.getTab());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(commandResult.isExit());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 21
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_URL_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.URL_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.URL_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.URL_DESC_THIS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_URL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.model.bookmark.util.BookmarkBuilder.DEFAULT_URL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + URL_DESC_BOB"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                + REMARK_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBookmark));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + URL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                + REMARK_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBookmark));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // multiple urls - last url accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + URL_DESC_AMY + URL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                + REMARK_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBookmark));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // multiple remarks - last remark accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + URL_DESC_BOB + REMARK_DESC_AMY"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                + REMARK_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedBookmark));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmarkMultipleTags \u003d new BookmarkBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + URL_DESC_BOB + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedBookmarkMultipleTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder(AMY).withRemark(Remark.DEFAULT_VALUE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + URL_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new AddCommand(expectedBookmark));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedBookmark \u003d new BookmarkBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + URL_DESC_AMY + REMARK_DESC_AMY,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new AddCommand(expectedBookmark));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        //no remark or tags"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        expectedBookmark \u003d new BookmarkBuilder(AMY).withRemark(Remark.DEFAULT_VALUE).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + URL_DESC_AMY,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new AddCommand(expectedBookmark));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_thisUrl_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder(BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .withUrl(DEFAULT_URL)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + URL_DESC_THIS"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                        + REMARK_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new AddCommand(expectedBookmark, true));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + URL_DESC_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // missing url prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_URL_BOB + REMARK_DESC_BOB,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_URL_BOB + VALID_REMARK_BOB,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + URL_DESC_BOB + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid url"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_URL_DESC + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Url.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid remark"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + URL_DESC_BOB + INVALID_REMARK_DESC"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + URL_DESC_BOB + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_URL_DESC,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + URL_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                        + REMARK_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 61,
      "Na-Nazhou": 27,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/AddFolderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.PARENT_FOLDER_DESC_CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_FOLDER_CONTACTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_FOLDER_CS2103T;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.AddFolderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class AddFolderCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private AddFolderCommandParser parser \u003d new AddFolderCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parse_withParent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new AddFolderCommand(new Folder(VALID_FOLDER_CONTACTS), new Folder(VALID_FOLDER_CS2103T));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_FOLDER_CONTACTS + PARENT_FOLDER_DESC_CS2103T,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parse_withoutParent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand expectedCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new AddFolderCommand(new Folder(VALID_FOLDER_CONTACTS), null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_FOLDER_CONTACTS, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parse_empty_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFolderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 42
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/AddReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TIME_OPEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.logic.commands.AddReminderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "class AddReminderCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //TODO: Add more test cases, for now the coverage is okay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddReminderCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private AddReminderCommandParser parser \u003d new AddReminderCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertParseFailure(parser, VALID_TIME_OPEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_TIME_OPEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_TIME_OPEN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 46
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/AutotagCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.AutotagCommandParser.DEFAULT_PREDICATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NOT_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NOT_URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AutotagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.UrlContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class AutotagCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_TAG \u003d \"myTag\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_NAME_1 \u003d \"website\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_NAME_2 \u003d \"question\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_URL_1 \u003d \"facebook.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String NAME_DESC_1 \u003d \" \" + PREFIX_NAME + VALID_NAME_1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String NAME_DESC_2 \u003d \" \" + PREFIX_NAME + VALID_NAME_2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String NOT_NAME_DESC_1 \u003d \" \" + PREFIX_NOT_NAME + VALID_NAME_1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String URL_DESC_1 \u003d \" \" + PREFIX_URL + VALID_URL_1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String NOT_URL_DESC_1 \u003d \" \" + PREFIX_NOT_URL + VALID_URL_1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AutotagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private AutotagCommandParser parser \u003d new AutotagCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // no tag name specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // no condition specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, VALID_TAG, AutotagCommand.MESSAGE_NO_CONDITION_SPECIFIED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // no tag name and no condition specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid tag name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"multiple words not allowed\" + NAME_DESC_1, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"non_alphanumeric_characters\" + NAME_DESC_1, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Reject invalid names/URLs as conditions in AutotagCommandParser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userInput \u003d VALID_TAG + NAME_DESC_1 + URL_DESC_1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UrlContainsKeywordsPredicate urlPredicate \u003d new UrlContainsKeywordsPredicate(Arrays.asList(VALID_URL_1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand expectedCommand \u003d new AutotagCommand(new SelectiveBookmarkTagger(new Tag(VALID_TAG),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DEFAULT_PREDICATE.and(namePredicate).and(urlPredicate)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // url"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userInput \u003d VALID_TAG + URL_DESC_1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Predicate\u003cBookmark\u003e predicate \u003d new UrlContainsKeywordsPredicate(Arrays.asList(VALID_URL_1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand expectedCommand \u003d new AutotagCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new SelectiveBookmarkTagger(new Tag(VALID_TAG), DEFAULT_PREDICATE.and(predicate)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userInput \u003d VALID_TAG + NAME_DESC_1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedCommand \u003d new AutotagCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new SelectiveBookmarkTagger(new Tag(VALID_TAG), DEFAULT_PREDICATE.and(predicate)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // not name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userInput \u003d VALID_TAG + NOT_NAME_DESC_1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_1)).negate();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedCommand \u003d new AutotagCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new SelectiveBookmarkTagger(new Tag(VALID_TAG), DEFAULT_PREDICATE.and(predicate)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // not url"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userInput \u003d VALID_TAG + NOT_URL_DESC_1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new UrlContainsKeywordsPredicate(Arrays.asList(VALID_URL_1)).negate();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedCommand \u003d new AutotagCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new SelectiveBookmarkTagger(new Tag(VALID_TAG), DEFAULT_PREDICATE.and(predicate)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_repeatedFields_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userInput \u003d VALID_TAG + NAME_DESC_1 + NAME_DESC_2;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        NameContainsKeywordsPredicate namePredicate \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_1, VALID_NAME_2));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand expectedCommand \u003d new AutotagCommand("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new SelectiveBookmarkTagger(new Tag(VALID_TAG), DEFAULT_PREDICATE.and(namePredicate)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 120,
      "openorclose": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/CacheCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.CacheCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class CacheCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private CacheCommandParser parser \u003d new CacheCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parse_validArgs_returnsGotoCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseSuccess(parser, \"1\", new CacheCommand(INDEX_FIRST_BOOKMARK));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, CacheCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_BOOKMARK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.FOLDER_DESC_CS2101;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.FOLDER_DESC_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_FOLDER_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_REMARK_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.INVALID_URL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.REMARK_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.URL_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.URL_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_FOLDER_CS2101;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_FOLDER_CS2103T;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_URL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_URL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_THIRD_BOOKMARK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.EditBookmarkDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_URL_DESC, Url.MESSAGE_CONSTRAINTS); // invalid url"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_REMARK_DESC, Remark.MESSAGE_CONSTRAINTS); // invalid remark"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_FOLDER_DESC, Folder.MESSAGE_CONSTRAINTS); // invalid remark"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid name followed by valid url"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + URL_DESC_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // valid name followed by invalid name. The test case for invalid name followed by valid name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_BOB + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Bookmark} being edited,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_URL_DESC + VALID_REMARK_AMY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOKMARK;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + URL_DESC_AMY + REMARK_DESC_AMY + NAME_DESC_AMY + FOLDER_DESC_CS2103T + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .withUrl(VALID_URL_AMY).withRemark(VALID_REMARK_AMY).withFolder(VALID_FOLDER_CS2103T)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + URL_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withUrl(VALID_URL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOKMARK;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // url"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + URL_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor \u003d new EditBookmarkDescriptorBuilder().withUrl(VALID_URL_AMY).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // remark"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMARK_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor \u003d new EditBookmarkDescriptorBuilder().withRemark(VALID_REMARK_AMY).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // folder"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + FOLDER_DESC_CS2103T;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        descriptor \u003d new EditBookmarkDescriptorBuilder().withFolder(VALID_FOLDER_CS2103T).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor \u003d new EditBookmarkDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + REMARK_DESC_AMY + URL_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + TAG_DESC_FRIEND + REMARK_DESC_AMY + URL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + REMARK_DESC_BOB + URL_DESC_BOB + TAG_DESC_HUSBAND + FOLDER_DESC_CS2101;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .withUrl(VALID_URL_BOB).withRemark(VALID_REMARK_BOB).withFolder(VALID_FOLDER_CS2101)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new EditBookmarkDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + URL_DESC_BOB + INVALID_NAME_DESC + REMARK_DESC_BOB"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor \u003d new EditBookmarkDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withUrl(VALID_URL_BOB).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOKMARK;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withTags().build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 82,
      "openorclose": 17,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/ExportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // multiple words"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"more than one word\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_validArgs_returnsExportCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ExportCommand expectedExportCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new ExportCommand(Path.of(\"data\", \"bookmarks\", \"myBookmarks.json\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, \"myBookmarks\", expectedExportCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, \" \\n myBookmarks \\n \\t\", expectedExportCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 37,
      "Na-Nazhou": 2
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/FavoriteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.FavoriteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * outside of the FavoriteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * same path through the FavoriteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class FavoriteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private FavoriteCommandParser parser \u003d new FavoriteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validArgs_returnsFavoriteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FavoriteCommand(INDEX_FIRST_BOOKMARK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 33
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_FOLDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.predicates.BookmarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validNameKeywords_returnsFindCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Arrays.asList(\"coding\", \"algorithm\"), Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \"coding algorithm\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \" \\n coding \\n \\t algorithm  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validTagKeywords_returnsFindCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Arrays.asList(\"coding\", \"algorithm\"), Collections.emptyList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String input1 \u003d \" \" + PREFIX_TAG + \"coding\" + \" \" + PREFIX_TAG + \"algorithm\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, input1, expectedFindCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String input2 \u003d \" \" + PREFIX_TAG + \"coding   \" + PREFIX_TAG + \"    algorithm\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, input2, expectedFindCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validFolderKeywords_returnsFindCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate(Collections.emptyList(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.emptyList(), Arrays.asList(\"coding\", \"algorithm\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String input1 \u003d \" \" + PREFIX_FOLDER + \"coding\" + \" \" + PREFIX_FOLDER + \"algorithm\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, input1, expectedFindCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String input2 \u003d \" \" + PREFIX_FOLDER + \"coding   \" + PREFIX_FOLDER + \"    algorithm\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, input2, expectedFindCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Arrays.asList(\"name\", \"url\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Arrays.asList(\"tag\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Arrays.asList(\"folder\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String input1 \u003d \"name url \" + PREFIX_TAG + \"tag \" + PREFIX_FOLDER + \"folder\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, input1, expectedFindCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String input2 \u003d \"  name   url \" + PREFIX_TAG + \"tag   \" + PREFIX_FOLDER + \"    folder\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, input2, expectedFindCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 5,
      "Na-Nazhou": 60,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/GotoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class GotoCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private GotoCommandParser parser \u003d new GotoCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validArgs_returnsGotoCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \"1\", new GotoCommand(INDEX_FIRST_BOOKMARK));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, GotoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 25
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/ImportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // empty input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // multiple words"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseFailure(parser, \"more than one word\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_validArgs_returnsImportCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand expectedImportCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new ImportCommand(Path.of(\"data\", \"bookmarks\", \"myBookmarks.json\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, \"myBookmarks\", expectedImportCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertParseSuccess(parser, \" \\n myBookmarks \\n \\t\", expectedImportCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 37,
      "Na-Nazhou": 2
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/MarkParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_FOLDER_CS2103T;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.AddFolderCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AutotagCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.CacheCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.DeleteCacheCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.FavoriteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.GotoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.predicates.BookmarkContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.BookmarkUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.EditBookmarkDescriptorBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class MarkParserTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final MarkParser parser \u003d new MarkParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmark \u003d new BookmarkBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BookmarkUtil.getAddCommand(bookmark));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertEquals(new AddCommand(bookmark), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parseCommand_addFolder() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        AddFolderCommand command \u003d (AddFolderCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                AddFolderCommand.COMMAND_WORD + \" \" + VALID_FOLDER_CS2103T);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(new AddFolderCommand(new Folder(VALID_FOLDER_CS2103T), null), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseCommand_autotag() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand command \u003d (AutotagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                AutotagCommand.COMMAND_WORD + \" \" + VALID_TAG_FRIEND + NAME_DESC_AMY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagCommand expectedCommand \u003d new AutotagCommand(new SelectiveBookmarkTagger(new Tag(VALID_TAG_FRIEND),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(VALID_NAME_AMY))));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(command, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parseCommand_cache() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(parser.parseCommand(CacheCommand.COMMAND_WORD + \" 3\") instanceof CacheCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOKMARK.getOneBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_BOOKMARK), command);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parseCommand_deleteCache() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(parser.parseCommand(DeleteCacheCommand.COMMAND_WORD + \" 3\") instanceof DeleteCacheCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parseCommand_favorite() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand command \u003d (FavoriteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                FavoriteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOKMARK.getOneBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertEquals(new FavoriteCommand(INDEX_FIRST_BOOKMARK), command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parseCommand_favoriteAlias() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FavoriteCommand command \u003d (FavoriteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                FavoriteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_BOOKMARK.getOneBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertEquals(new FavoriteCommand(INDEX_FIRST_BOOKMARK), command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parseCommand_goto() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        GotoCommand command \u003d (GotoCommand) parser.parseCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                GotoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOKMARK.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertEquals(new GotoCommand(INDEX_FIRST_BOOKMARK), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmark \u003d new BookmarkBuilder().build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        EditCommand.EditBookmarkDescriptor descriptor \u003d new EditBookmarkDescriptorBuilder(bookmark).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + INDEX_FIRST_BOOKMARK.getOneBased() + \" \" + BookmarkUtil.getEditBookmarkDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_BOOKMARK, descriptor), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseCommand_export() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // assumption: bookmarks are exported to the folder data/bookmarks/ (see ExportCommandParser)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String fileName \u003d \"myBookmarks\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ExportCommand command \u003d (ExportCommand) parser.parseCommand(ExportCommand.COMMAND_WORD + \" \" + fileName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ExportCommand(Path.of(\"data\", \"bookmarks\", fileName + \".json\")), command);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: method to generate export/import filePath"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseCommand_import() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // assumption: bookmarks are imported from the folder data/bookmarks/ (see ImportCommandParser)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String fileName \u003d \"myBookmarks\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ImportCommand command \u003d (ImportCommand) parser.parseCommand(ImportCommand.COMMAND_WORD + \" \" + fileName);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ImportCommand(Path.of(\"data\", \"bookmarks\", fileName + \".json\")), command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                keywords, Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertEquals(new FindCommand(predicate), command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parseCommand_undo() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parseCommand_redo() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD + \" 3\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                        parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 63,
      "openorclose": 22,
      "Na-Nazhou": 47,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/OfflineCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.logic.commands.OfflineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class OfflineCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private OfflineCommandParser parser \u003d new OfflineCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parse_validArgs_returnsGotoCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseSuccess(parser, \"1\", new OfflineCommand(INDEX_FIRST_BOOKMARK));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, OfflineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 24
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalIndexes.INDEX_FIRST_BOOKMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String INVALID_URL \u003d \"exam?ple.com?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String INVALID_REMARK \u003d \"t/ means tag\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_URL \u003d \"https://rachel-example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_REMARK \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOKMARK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOKMARK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseRemark_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRemark((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseRemark_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRemark(INVALID_REMARK));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseRemark_validValueEmpty_returnsDefaultRemark() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Remark expectedRemark \u003d new Remark(Remark.DEFAULT_VALUE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(WHITESPACE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseRemark_validValueWithoutWhitespace_returnsRemark() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(VALID_REMARK));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseRemark_validValueWithWhitespace_returnsTrimmedRemark() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String remarkWithWhitespace \u003d WHITESPACE + VALID_REMARK + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Remark expectedRemark \u003d new Remark(VALID_REMARK);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedRemark, ParserUtil.parseRemark(remarkWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseUrl_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUrl((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseUrl_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseUrl(INVALID_URL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseUrl_validValueWithoutWhitespace_returnsUrl() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Url expectedUrl \u003d new Url(VALID_URL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUrl, ParserUtil.parseUrl(VALID_URL));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parseUrl_validValueWithWhitespace_returnsTrimmedUrl() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String urlWithWhitespace \u003d WHITESPACE + VALID_URL + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Url expectedUrl \u003d new Url(VALID_URL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUrl, ParserUtil.parseUrl(urlWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 40,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/RedoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class RedoCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private RedoCommandParser parser \u003d new RedoCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validArgs_returnsRedoCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \"2\", new RedoCommand(2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_emptyArgs_returnsRedoCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \"\", new RedoCommand(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RedoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 29
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/TabCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "class TabCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private TabCommandParser parser \u003d new TabCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void parseTab_validArgs_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        TabCommand.Tab expected \u003d TabCommand.Tab.ONLINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTabIndex(\"2\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTabKeyword(\"on\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTab(\"2\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTab(\"on\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        expected \u003d TabCommand.Tab.OFFLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTabIndex(\"3\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTabKeyword(\"off\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTab(\"3\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTab(\"off\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        expected \u003d TabCommand.Tab.DASHBOARD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTabIndex(\"1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTabKeyword(\"dash\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTab(\"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(expected, TabCommandParser.parseTab(\"dash\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void parseTab_invalidIndex_throwsInvalidIndexParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(ParseException.class, TabCommand.MESSAGE_INVALID_INDEX, () -\u003e TabCommandParser.parseTabIndex(\"5\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(ParseException.class, TabCommand.MESSAGE_INVALID_INDEX, () -\u003e TabCommandParser.parseTab(\"5\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(ParseException.class, TabCommand.MESSAGE_INVALID_INDEX, () -\u003e TabCommandParser.parseTab(\"-5\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void parseTab_invalidArg_throwsInvalidFormatParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        String expectedMsg \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(ParseException.class, expectedMsg, () -\u003e TabCommandParser.parseTabIndex(\"invalid arg\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(ParseException.class, expectedMsg, () -\u003e TabCommandParser.parseTab(\"invalid arg\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(ParseException.class, expectedMsg, () -\u003e TabCommandParser.parseTab(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(ParseException.class, expectedMsg, () -\u003e TabCommandParser.parseTab(\"0.5\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void parse_validArgs_returnsTabCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        TabCommand expected \u003d new TabCommand(TabCommand.Tab.DASHBOARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseSuccess(parser, \"1\", expected);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseSuccess(parser, \"dash\", expected);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        expected \u003d new TabCommand(TabCommand.Tab.ONLINE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseSuccess(parser, \"2\", expected);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseSuccess(parser, \"on\", expected);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        expected \u003d new TabCommand(TabCommand.Tab.OFFLINE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseSuccess(parser, \"3\", expected);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseSuccess(parser, \"off\", expected);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseFailure(parser, \"blob\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseFailure(parser, \"4\", TabCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseFailure(parser, \"0\", TabCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseFailure(parser, \"-1\", TabCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TabCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 80
    }
  },
  {
    "path": "src/test/java/seedu/mark/logic/parser/UndoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static seedu.mark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class UndoCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private UndoCommandParser parser \u003d new UndoCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_validArgs_returnsUndoCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \"2\", new UndoCommand(2));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_emptyArgs_returnsUndoCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseSuccess(parser, \"\", new UndoCommand(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UndoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 29
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/MarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.AutotagController;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.DuplicateBookmarkException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.ReminderAssociation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class MarkTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final Mark mark \u003d new Mark();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(Collections.emptyList(), mark.getBookmarkList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mark.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void resetData_withValidReadOnlyMark_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark newData \u003d getTypicalMark();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        mark.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(newData, mark);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void resetData_withDuplicateBookmarks_throwsDuplicateBookmarkException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Two bookmarks with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedAlice \u003d new BookmarkBuilder(ALICE).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e newBookmarks \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        MarkStub newData \u003d new MarkStub(newBookmarks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(DuplicateBookmarkException.class, () -\u003e mark.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void hasBookmark_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mark.hasBookmark(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void hasBookmark_bookmarkNotInMark_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(mark.hasBookmark(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void hasBookmark_bookmarkInMark_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        mark.addBookmark(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(mark.hasBookmark(ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void hasBookmark_bookmarkWithSameIdentityFieldsInMark_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        mark.addBookmark(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedAlice \u003d new BookmarkBuilder(ALICE).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(mark.hasBookmark(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void getBookmarkList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mark.getBookmarkList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * A stub ReadOnlyMark whose bookmarks list can violate interface constraints."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static class MarkStub implements ReadOnlyMark {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        private final ObservableList\u003cBookmark\u003e bookmarks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        private final ReminderAssociation association \u003d new ReminderAssociation();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        MarkStub(Collection\u003cBookmark\u003e bookmarks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            this.bookmarks.setAll(bookmarks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public ObservableList\u003cBookmark\u003e getBookmarkList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return bookmarks;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        public FolderStructure getFolderStructure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            return new FolderStructure(Folder.ROOT_FOLDER, FXCollections.observableArrayList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        public ReminderAssociation getReminderAssociation() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            return association;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public AutotagController getAutotagController() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 108,
      "openorclose": 7,
      "TSAI-HSIAO-HAN": 6,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_FOLDER_CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.model.Model.PREDICATE_SHOW_ALL_BOOKMARKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.MarkBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new Mark(), new Mark(modelManager.getMark()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        userPrefs.setMarkFilePath(Path.of(\"bookmark/manager/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        userPrefs.setMarkFilePath(Path.of(\"new/bookmark/manager/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setMarkFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMarkFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setMarkFilePath_validPath_setsMarkFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        Path path \u003d Path.of(\"bookmark/manager/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        modelManager.setMarkFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(path, modelManager.getMarkFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void hasBookmark_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBookmark(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void hasBookmark_bookmarkNotInMark_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(modelManager.hasBookmark(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void hasBookmark_bookmarkInMark_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        modelManager.addBookmark(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(modelManager.hasBookmark(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void hasFolder_folderNotInMark_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(modelManager.hasFolder(new Folder(VALID_FOLDER_CS2103T)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void hasFolder_folderInMark_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Folder validFolder \u003d new Folder(VALID_FOLDER_CS2103T);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        modelManager.addFolder(validFolder, Folder.ROOT_FOLDER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(modelManager.hasFolder(validFolder));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void getFilteredBookmarkList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBookmarkList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark mark \u003d new MarkBuilder().withBookmark(ALICE).withBookmark(BENSON).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark differentMark \u003d new Mark();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        modelManager \u003d new ModelManager(mark, userPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(mark, userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different mark -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMark, userPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        String[] keywords \u003d ALICE.getName().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        modelManager.updateFilteredBookmarkList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mark, userPrefs)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        modelManager.updateFilteredBookmarkList(PREDICATE_SHOW_ALL_BOOKMARKS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        differentUserPrefs.setMarkFilePath(Path.of(\"differentFilePath\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(mark, differentUserPrefs)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different currentUrl, one non-null, one null -\u003e return false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        modelManagerCopy.setCurrentUrl(ALICE.getUrl());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different currentUrl, two non-null -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        modelManager.setCurrentUrl(BENSON.getUrl());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same values (including currentUrl) -\u003e return true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        modelManager.setCurrentUrl(ALICE.getUrl());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 33,
      "openorclose": 14,
      "Na-Nazhou": 17,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.model.annotation.Paragraph;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.autotag.SelectiveBookmarkTagger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void setMarkFilePath(Path markFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void addBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void setMark(ReadOnlyMark newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public ReadOnlyMark getMark() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean hasBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void deleteBookmark(Bookmark target) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void favoriteBookmark(Bookmark target) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void setBookmark(Bookmark target, Bookmark editedBookmark) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addBookmarks(List\u003cBookmark\u003e bookmarksToAdd) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public ObservableList\u003cBookmark\u003e getFilteredBookmarkList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void updateFilteredBookmarkList(Predicate\u003cBookmark\u003e predicate) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void addFolder(Folder folder, Folder parentFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public boolean hasFolder(Folder folder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean hasTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addTagger(SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyAllTaggers() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public SimpleObjectProperty\u003cUrl\u003e getCurrentUrlProperty() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public Url getCurrentUrl() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void setCurrentUrl(Url url) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean canUndoMark(int steps) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public int getMaxStepsToUndo() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public boolean canRedoMark(int steps) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public int getMaxStepsToRedo() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String undoMark(int steps) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public String redoMark(int steps) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void saveMark(String record) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void addReminder(Bookmark bookmark, Reminder reminder) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void removeReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void editReminder(Reminder targetReminder, Reminder editedReminder) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public boolean isBookmarkHasReminder(Bookmark bookmark) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminders() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void updateDocument(OfflineDocument doc) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void updateCurrentDisplayedCache(Bookmark bookmarkToDisplayCache) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public SimpleObjectProperty\u003cBookmark\u003e getBookmarkDisplayingCacheProperty() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public ObservableList\u003cParagraph\u003e getObservableDocument() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23,
      "openorclose": 105,
      "TSAI-HSIAO-HAN": 26,
      "Na-Nazhou": 56,
      "kxyoke": 13
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setMarkFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMarkFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/annotation/AnnotationNoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "class AnnotationNoteTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void makeNote_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            AnnotationNote an \u003d AnnotationNote.makeNote(\"legal note content\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            assertEquals(new AnnotationNote(\"legal note content\"), an);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            assertEquals(an.toString(), \"legal note content\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void makeNote_failure_throwsException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AnnotationNote.makeNote(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e AnnotationNote.makeNote(\"\"), AnnotationNote.MESSAGE_BLANK_NOTE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e AnnotationNote.makeNote(\"   \"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                AnnotationNote.MESSAGE_BLANK_NOTE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 32
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/annotation/OfflineDocumentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "class OfflineDocumentTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public static final String SAMPLE_READABILITY_DOC \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void test_parseDoc() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        //TODO: write tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(true, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 18
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/annotation/ParagraphIdentifierTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "package seedu.mark.model.annotation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "class ParagraphIdentifierTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    private Index index2 \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void equals_check() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.EXIST),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.EXIST));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void hashCode_check() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.EXIST).hashCode(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "                new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.EXIST).hashCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void compareTo_check() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ParagraphIdentifier p1 \u003d new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.EXIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ParagraphIdentifier p2 \u003d new ParagraphIdentifier(index2, ParagraphIdentifier.ParagraphType.EXIST);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ParagraphIdentifier p3 \u003d new ParagraphIdentifier(index2, ParagraphIdentifier.ParagraphType.STRAY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        ParagraphIdentifier p4 \u003d new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.STRAY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(-1, p1.compareTo(p2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(-1, p1.compareTo(p4));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(1, p2.compareTo(p1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(-1, p2.compareTo(p3));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(1, p3.compareTo(p4));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(1, p3.compareTo(p2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(-1, p4.compareTo(p3));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    public void toString_check() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(\"P1\", new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.EXIST).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "        assertEquals(\"S1\", new ParagraphIdentifier(index, ParagraphIdentifier.ParagraphType.STRAY).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kxyoke"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kxyoke"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kxyoke": 48
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/autotag/AutotagControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.autotag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalBookmarks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.UrlContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class AutotagControllerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final SelectiveBookmarkTagger TAGGER_HELLO \u003d new SelectiveBookmarkTagger("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new Tag(\"Hello\"), new NameContainsKeywordsPredicate(Collections.singletonList(\"hello\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final SelectiveBookmarkTagger TAGGER_WORLD \u003d new SelectiveBookmarkTagger("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new Tag(\"World\"), new NameContainsKeywordsPredicate(Collections.singletonList(\"world\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final SelectiveBookmarkTagger TAGGER_URL_EXAMPLE \u003d new SelectiveBookmarkTagger("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new Tag(\"exampleTag\"), new UrlContainsKeywordsPredicate(Collections.singletonList(\"example\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Bookmark BOOKMARK_HELLO \u003d new BookmarkBuilder().withName(\"Hello World\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(\"https://hello-world.org\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void addTagger_validValue_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController controller \u003d new AutotagController();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        controller.addTagger(TAGGER_HELLO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(controller, new AutotagController(Arrays.asList(TAGGER_HELLO)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTaggers_noTaggersPresent_notTagged() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController controller \u003d new AutotagController();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(controller.applyTaggers(BOOKMARK_HELLO), BOOKMARK_HELLO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTaggers_noTaggersMatch_notTagged() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController controller \u003d new AutotagController(Arrays.asList(TAGGER_URL_EXAMPLE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(controller.applyTaggers(BOOKMARK_HELLO), BOOKMARK_HELLO);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTaggers_oneTaggerMatches_tagged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController controller \u003d new AutotagController(Arrays.asList(TAGGER_HELLO));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder(BOOKMARK_HELLO).withTags(\"Hello\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(controller.applyTaggers(BOOKMARK_HELLO), expectedBookmark);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTaggers_multipleTaggersMatch_tagged() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController controller \u003d new AutotagController(Arrays.asList(TAGGER_HELLO, TAGGER_WORLD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder(BOOKMARK_HELLO).withTags(\"Hello\", \"World\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(controller.applyTaggers(BOOKMARK_HELLO), expectedBookmark);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTaggersToList_taggersMatchAllBookmarks_allBookmarksTagged() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController controller \u003d new AutotagController(Arrays.asList(TAGGER_URL_EXAMPLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e expectedBookmarks \u003d tagBookmarks(getTypicalBookmarks(), TAGGER_URL_EXAMPLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(controller.applyTaggersToList(getTypicalBookmarks()), expectedBookmarks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a copy of the given bookmark list in which all bookmarks have been"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * tagged by {@code tagger}. Similar to {@code AutotagController#applyTaggersToList()}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * if the {@code AutotagController} contains only a single {@code tagger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private List\u003cBookmark\u003e tagBookmarks(List\u003cBookmark\u003e bookmarks, SelectiveBookmarkTagger tagger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e taggedBookmarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (Bookmark bookmark : bookmarks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            taggedBookmarks.add(tagger.applyTag(bookmark));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return taggedBookmarks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        AutotagController controller \u003d new AutotagController(Arrays.asList(TAGGER_HELLO));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(controller.equals(controller));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(controller.equals(new AutotagController(Arrays.asList(TAGGER_HELLO))));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(controller.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different taggers -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(controller.equals(new AutotagController(Arrays.asList(TAGGER_URL_EXAMPLE))));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 100,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/autotag/BookmarkTaggerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.autotag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class BookmarkTaggerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTag_bookmarkDoesNotContainTag_tagAdded() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark originalBookmark \u003d new BookmarkBuilder().withTags(\"module\", \"readLater\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        BookmarkTagger tagger \u003d new BookmarkTagger(new Tag(\"NUS\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder().withTags(\"module\", \"readLater\", \"NUS\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedBookmark, tagger.applyTag(originalBookmark));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTag_bookmarkContainsTag_noChange() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder().withTags(\"module\", \"readLater\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        BookmarkTagger tagger \u003d new BookmarkTagger(new Tag(\"module\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedBookmark, tagger.applyTag(expectedBookmark));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        BookmarkTagger tagger \u003d new BookmarkTagger(new Tag(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(tagger.equals(tagger));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(tagger.equals(new BookmarkTagger(new Tag(\"first\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(tagger.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(tagger.equals(new BookmarkTagger(new Tag(\"second\"))));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 47,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/autotag/SelectiveBookmarkTaggerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.autotag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class SelectiveBookmarkTaggerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Tag SAMPLE_TAG \u003d new Tag(\"myTag\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Predicate\u003cBookmark\u003e NAME_PREDICATE_HELLO \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new NameContainsKeywordsPredicate(Arrays.asList(\"hello\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTagSelectively_bookmarkMatches_returnTaggedBookmark() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger tagger \u003d new SelectiveBookmarkTagger(SAMPLE_TAG, NAME_PREDICATE_HELLO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark initialBookmark \u003d new BookmarkBuilder().withName(\"Hello World\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder().withName(\"Hello World\").withTags(SAMPLE_TAG.tagName).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(tagger.applyTagSelectively(initialBookmark), expectedBookmark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void applyTagSelectively_bookmarkDoesNotMatch_returnBookmark() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        SelectiveBookmarkTagger tagger \u003d new SelectiveBookmarkTagger(SAMPLE_TAG, NAME_PREDICATE_HELLO);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark initialBookmark \u003d new BookmarkBuilder().withName(\"Google\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark expectedBookmark \u003d new BookmarkBuilder(initialBookmark).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(tagger.applyTagSelectively(initialBookmark), expectedBookmark);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 37,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/bookmark/BookmarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_FOLDER_CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_URL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class BookmarkTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark bookmark \u003d new BookmarkBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e bookmark.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void isSameBookmark() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(ALICE.isSameBookmark(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(ALICE.isSameBookmark(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different name, different url -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedAlice \u003d new BookmarkBuilder(ALICE).withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                .withUrl(VALID_URL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(ALICE.isSameBookmark(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same name, different url -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAlice \u003d new BookmarkBuilder(ALICE).withUrl(VALID_URL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(ALICE.isSameBookmark(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different name, same url -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAlice \u003d new BookmarkBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(ALICE.isSameBookmark(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same name, same url, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAlice \u003d new BookmarkBuilder(ALICE).withRemark(VALID_REMARK_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(ALICE.isSameBookmark(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark aliceCopy \u003d new BookmarkBuilder(ALICE).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedAlice \u003d new BookmarkBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different url -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAlice \u003d new BookmarkBuilder(ALICE).withUrl(VALID_URL_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAlice \u003d new BookmarkBuilder(ALICE).withRemark(VALID_REMARK_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // different folder -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        editedAlice \u003d new BookmarkBuilder(ALICE).withFolder(VALID_FOLDER_CS2103T).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        editedAlice \u003d new BookmarkBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 36,
      "openorclose": 5,
      "Na-Nazhou": 1,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/bookmark/FolderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class FolderTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Folder(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void constructor_invalidFolderName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String invalidFolderName \u003d \"!@#$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Folder(invalidFolderName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void isValidFolder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // null folder"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Folder.isValidFolder(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // invalid folder"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(Folder.isValidFolder(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(Folder.isValidFolder(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(Folder.isValidFolder(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(Folder.isValidFolder(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertFalse(Folder.isValidFolder(\"peter pan\")); // contains spaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(Folder.isValidFolder(\"peterjack\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(Folder.isValidFolder(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(Folder.isValidFolder(\"peterthe2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(Folder.isValidFolder(\"CapitalTan\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(Folder.isValidFolder(\"123456789101112ThirteenFourteenFifteen\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 42
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/bookmark/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/bookmark/RemarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void constructor_invalidRemark_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String invalidRemark \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void isValidRemark() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid remarks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Remark.isValidRemark(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Remark.isValidRemark(\" r/r\")); // contains forward slash"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // valid remarks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Learning materials for machine learning\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"It contains many useful resources for learning physics\")); // long remark"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void isEmptyRemark() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Remark.isEmptyRemark(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // empty remarks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Remark.isEmptyRemark(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Remark.isEmptyRemark(\" \")); // spaces only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // non-empty remark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Remark.isEmptyRemark(\"abc\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 48,
      "Na-Nazhou": 2
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/bookmark/UniqueBookmarkListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.BookmarkNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.DuplicateBookmarkException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class UniqueBookmarkListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final UniqueBookmarkList uniqueBookmarkList \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void contains_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookmarkList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void contains_bookmarkNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(uniqueBookmarkList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void contains_bookmarkInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(uniqueBookmarkList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void contains_bookmarkWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedAlice \u003d new BookmarkBuilder(ALICE).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(uniqueBookmarkList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void add_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookmarkList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void add_duplicateBookmark_throwsDuplicateBookmarkException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(DuplicateBookmarkException.class, () -\u003e uniqueBookmarkList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark_nullTargetBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookmarkList.setBookmark(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark_nullEditedBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookmarkList.setBookmark(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark_targetBookmarkNotInList_throwsBookmarkNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(BookmarkNotFoundException.class, () -\u003e uniqueBookmarkList.setBookmark(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark_editedBookmarkIsSameBookmark_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.setBookmark(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UniqueBookmarkList expectedUniqueBookmarkList \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedUniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUniqueBookmarkList, uniqueBookmarkList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark_editedBookmarkHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Bookmark editedAlice \u003d new BookmarkBuilder(ALICE).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.setBookmark(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UniqueBookmarkList expectedUniqueBookmarkList \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedUniqueBookmarkList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUniqueBookmarkList, uniqueBookmarkList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark_editedBookmarkHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.setBookmark(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UniqueBookmarkList expectedUniqueBookmarkList \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedUniqueBookmarkList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUniqueBookmarkList, uniqueBookmarkList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmark_editedBookmarkHasNonUniqueIdentity_throwsDuplicateBookmarkException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(DuplicateBookmarkException.class, () -\u003e uniqueBookmarkList.setBookmark(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void remove_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookmarkList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void remove_bookmarkDoesNotExist_throwsBookmarkNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(BookmarkNotFoundException.class, () -\u003e uniqueBookmarkList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void remove_existingBookmark_removesBookmark() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UniqueBookmarkList expectedUniqueBookmarkList \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUniqueBookmarkList, uniqueBookmarkList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks_nullUniqueBookmarkList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookmarkList.setBookmarks((UniqueBookmarkList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks_uniqueBookmarkList_replacesOwnListWithProvidedUniqueBookmarkList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UniqueBookmarkList expectedUniqueBookmarkList \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedUniqueBookmarkList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.setBookmarks(expectedUniqueBookmarkList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUniqueBookmarkList, uniqueBookmarkList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookmarkList.setBookmarks((List\u003cBookmark\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e bookmarkList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        uniqueBookmarkList.setBookmarks(bookmarkList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UniqueBookmarkList expectedUniqueBookmarkList \u003d new UniqueBookmarkList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        expectedUniqueBookmarkList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(expectedUniqueBookmarkList, uniqueBookmarkList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void setBookmarks_listWithDuplicateBookmarks_throwsDuplicateBookmarkException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cBookmark\u003e listWithDuplicateBookmarks \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(DuplicateBookmarkException.class, () -\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                uniqueBookmarkList.setBookmarks(listWithDuplicateBookmarks));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                uniqueBookmarkList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 85,
      "Na-Nazhou": 3,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/bookmark/UrlTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class UrlTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Url(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void constructor_invalidUrl_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String invalidUrl \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Url(invalidUrl));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void isValidUrl_nullUrl_throwsException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Url.isValidUrl(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void isValidUrl_invalidUrl_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // blank url"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid scheme"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"example.com\")); // missing scheme"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"abc://example.com\")); // invalid scheme"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid authority"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://\")); // missing authority"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://a\")); // authority too short"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://.example.com\")); // authority starts with a period"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://example.com.\")); // authority ends with a period"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\" http://peterjack.example.com\")); // leading space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://peterjack.example.com \")); // trailing space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://peter jack.example.com\")); // spaces in authority"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid optional parts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://example.com?\")); // empty query"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://example.com#\")); // empty fragment"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://example.com##example\")); // double \u0027#\u0027 symbol"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://example.com#example1#example\")); // double fragment"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // invalid characters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://example.com/%\")); // \u0027%\u0027 without hexadecimal characters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Url.isValidUrl(\"https://example.com/%Gz\")); // invalid hexadecimal characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void isValidUrl_validUrl_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // valid url scheme"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"http://example.com\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"ftp://example.com\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"file://example.com\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // valid url - different parts present"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://mark.com/\")); // ends with slash"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com/path?query#index.html\")); // all parts present"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com/some/path/should/work\")); // multiple path segments"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com/check.php?my-query\")); // path segment and query"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com/check.php#fragment-to-show\")); // path segment and fragment"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com?my-query\")); // query alone"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com?my-query/\")); // query with slash"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com#fragment-to-show\")); // fragment alone"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // valid url - lengths"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://ab\")); // minimal authority"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"http://ab/a\")); // minimal path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"http://ab?a\")); // minimal query"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"http://ab#a\")); // minimal fragment"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://peter_jack.very-very-very-long-example.com\")); // long authority"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://peter_jack.example.com/very-very-very-long-path.php\")); // long path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://peter_jack.example.com?very\u003dvery-very\u0026query\u003dlong\")); // long query"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://peter_jack.example.com#very-very-very-long-fragment\")); // long fragment"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // valid url - special characters"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"http://!$\u0026\u0027*+,;\u003d:()@-_.~\")); // special characters in authority"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com/!$\u0026\u0027*+,;\u003d:()@-_~.\")); // special characters in path"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com?!$\u0026\u0027*+,;\u003d:()@-_~./?\")); // special characters in query"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com#!$\u0026\u0027*+,;\u003d:()@-_~./?\")); // special characters in response"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Url.isValidUrl(\"https://example.com/%FF-%12-%1a\")); // hexadecimal encoded characters"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 92
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/predicates/BookmarkContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class BookmarkContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate firstPredicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                firstPredicateKeywordList, firstPredicateKeywordList, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate secondPredicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                secondPredicateKeywordList, secondPredicateKeywordList, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate firstPredicateCopy \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                firstPredicateKeywordList, firstPredicateKeywordList, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_bookmarkContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Name predicate matches"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.singletonList(\"website\"), Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"A Website\").withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Url predicate matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.singletonList(\"http\"), Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"A Website\").withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Both Name and Url matches"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.singletonList(\"google\"), Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new BookmarkBuilder().withName(\"Google Website\").withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Tag predicate matches"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.emptyList(), Collections.singletonList(\"tag\"), Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withTags(\"tag\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Folder predicate matches"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.emptyList(), Collections.emptyList(), Collections.singletonList(\"folder\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withFolder(\"folder\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Arrays.asList(\"com\", \"google\"), Collections.singletonList(\"tag\"), Collections.singletonList(\"folder\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .withName(\"Google Website\").withUrl(\"http://google.com\").withTags(\"tag\").withFolder(\"folder\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_bookmarkDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Zero predicates match"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        BookmarkContainsKeywordsPredicate predicate \u003d new BookmarkContainsKeywordsPredicate("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.emptyList(), Collections.emptyList(), Collections.emptyList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 86
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/predicates/FolderContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class FolderContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new FolderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new FolderContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                new FolderContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_folderContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderContainsKeywordsPredicate predicate \u003d new FolderContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withFolder(\"Alice\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new FolderContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withFolder(\"Alice\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new FolderContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withFolder(\"Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new FolderContainsKeywordsPredicate(Arrays.asList(\"aLIce\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withFolder(\"Alice\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_folderDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        FolderContainsKeywordsPredicate predicate \u003d new FolderContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withFolder(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new FolderContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withFolder(\"AliceBob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Keywords match name and url, but does not match folder"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new FolderContainsKeywordsPredicate(Arrays.asList(\"https://www.example.com\", \"Example\", \"Folder\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withName(\"Example\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .withUrl(\"https://www.example.com\").withFolder(\"DifferentFolder\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Partially matching keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new FolderContainsKeywordsPredicate(Arrays.asList(\"al\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withFolder(\"Alice\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 83
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/predicates/IdentifiersContainKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class IdentifiersContainKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        IdentifiersContainKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new IdentifiersContainKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        IdentifiersContainKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new IdentifiersContainKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        IdentifiersContainKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new IdentifiersContainKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_identifierContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Name predicate matches"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        IdentifiersContainKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new IdentifiersContainKeywordsPredicate(Collections.singletonList(\"website\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"A Website\").withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Url predicate matches"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new IdentifiersContainKeywordsPredicate(Collections.singletonList(\"http\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"A Website\").withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Multiple predicates match"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new IdentifiersContainKeywordsPredicate(Collections.singletonList(\"google\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new BookmarkBuilder().withName(\"Google Website\").withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new IdentifiersContainKeywordsPredicate(Arrays.asList(\"com\", \"google\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new BookmarkBuilder().withName(\"Google Website\").withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_identifierDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Zero predicates match"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        IdentifiersContainKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                new IdentifiersContainKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 70,
      "Na-Nazhou": 3
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/predicates/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Partially matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"al\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Keywords match url and remark, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"https://www.example.com\", \"Example\", \"Remark\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withName(\"Different name\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .withUrl(\"https://www.example.com\").withRemark(\"Example Remark\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 13,
      "Na-Nazhou": 4,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/predicates/TagContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "public class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withTags(\"Alice\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withTags(\"Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"aLIce\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withTags(\"Alice\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withTags(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withTags(\"AliceBob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Keywords match name and url, but does not match tag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"https://www.example.com\", \"Example\", \"Tag\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withName(\"Example\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .withUrl(\"https://www.example.com\").withTags(\"DifferentTag\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        // Partially matching keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"al\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withTags(\"Alice\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Na-Nazhou": 79
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/predicates/UrlContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class UrlContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UrlContainsKeywordsPredicate firstPredicate \u003d new UrlContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UrlContainsKeywordsPredicate secondPredicate \u003d new UrlContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UrlContainsKeywordsPredicate firstPredicateCopy \u003d new UrlContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void test_urlContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UrlContainsKeywordsPredicate predicate \u003d new UrlContainsKeywordsPredicate(Collections.singletonList(\"google\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new UrlContainsKeywordsPredicate(Arrays.asList(\"http\", \"google\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new UrlContainsKeywordsPredicate(Arrays.asList(\"https\", \"google\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new UrlContainsKeywordsPredicate(Arrays.asList(\"hTTp\", \"GoOgLe\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(predicate.test(new BookmarkBuilder().withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    public void test_urlDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        UrlContainsKeywordsPredicate predicate \u003d new UrlContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        predicate \u003d new UrlContainsKeywordsPredicate(Collections.singletonList(\"Facebook\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withUrl(\"http://google.com\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Keywords match remark and name, but do not match url"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        predicate \u003d new UrlContainsKeywordsPredicate(Arrays.asList(\"Example Bookmark\", \"Example\", \"Remark\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        assertFalse(predicate.test(new BookmarkBuilder().withName(\"Example Bookmark\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "                .withUrl(\"https://www.different-url.com\").withRemark(\"Example Remark\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 70,
      "Na-Nazhou": 5
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/reminder/NoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "class NoteTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Note(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void constructor_invalidNote_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        String invalidNote \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Note(invalidNote));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void isValidNote() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Note.isValidNote(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // invalid notes"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(Note.isValidNote(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(Note.isValidNote(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(Note.isValidNote(\" r/r\")); // contains forward slash"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // valid notes"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(Note.isValidNote(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(Note.isValidNote(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(Note.isValidNote(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long Note"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void isEmptyNote() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // null Note"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Note.isEmptyNote(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // empty notes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(Note.isEmptyNote(\"\")); // empty string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(Note.isEmptyNote(\" \")); // spaces only"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // non-empty note"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(Note.isEmptyNote(\"abc\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 49
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/reminder/ReminderAssociationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalReminders.OPEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalReminders.READ;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.BookmarkContainNoReminderException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.ExistReminderException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.exceptions.ReminderNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "class ReminderAssociationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    //TODO: Change test method name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private final ReminderAssociation association \u003d new ReminderAssociation();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void contains_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(association.isBookmarkHasReminder(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void contains_bookmarkNotInAssociation_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(association.isBookmarkHasReminder(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void contains_bookmarkInAssociation_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.addReminder(ALICE, OPEN);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(association.isBookmarkHasReminder(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void add_duplicateBookmark_throwsExistReminderException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.addReminder(ALICE, OPEN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(ExistReminderException.class, () -\u003e association.addReminder(ALICE, READ));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void setBookmark_nullEditedBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e association.setReminder(OPEN, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void setBookmark_notExistBookmark_throwsBookmarkContainNoReminderException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(BookmarkContainNoReminderException.class, () -\u003e association.setReminder(READ, OPEN));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void setBookmark_notExistReminderOfSpecifiedBookmark_throwsReminderNotFoundException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.addReminder(ALICE, OPEN);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder reminder \u003d new ReminderBuilder().withNote(\"Read\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(ReminderNotFoundException.class, () -\u003e association.setReminder(reminder, OPEN));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void setBookmark_existReminderOfSpecifiedBookmark_setReminder() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.addReminder(ALICE, OPEN);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder reminder \u003d new ReminderBuilder().withNote(\"Read\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.setReminder(OPEN, reminder);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        ReminderAssociation expectedAssociation \u003d new ReminderAssociation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        expectedAssociation.addReminder(ALICE, reminder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertEquals(expectedAssociation, association);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void remove_nullBookmark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e association.deleteReminder(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void remove_notExistReminder_throwsBookmarkContainNoReminderException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(BookmarkContainNoReminderException.class, () -\u003e association.deleteReminder(READ));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void remove_notExistReminderofSepcifiedBookmark_throwsReminderNotFoundException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.addReminder(ALICE, OPEN);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder reminder \u003d new ReminderBuilder().withBookmark(ALICE).withNote(\"Read\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertThrows(ReminderNotFoundException.class, () -\u003e association.deleteReminder(reminder));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void remove_existingReminder_removesReminder() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.addReminder(ALICE, OPEN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        association.deleteReminder(OPEN);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        ReminderAssociation expectedAssociation \u003d new ReminderAssociation();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertEquals(expectedAssociation, association);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 98
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/reminder/ReminderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NOTE_OPEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NOTE_READ;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TIME_OPEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TIME_READ;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BENSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalReminders.OPEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalReminders.READ;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "class ReminderTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void isSameBookmark() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(OPEN.isSameReminder(OPEN));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // different note, different bookmark, different time-\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder editedOpen \u003d new ReminderBuilder(OPEN).withNote(VALID_NOTE_READ)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .withBookmark(BENSON).withTime(VALID_TIME_READ).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // same note, different bookmark, same time-\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        editedOpen \u003d new ReminderBuilder(OPEN).withNote(VALID_NOTE_OPEN)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .withBookmark(BENSON).withTime(VALID_TIME_OPEN).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // different note, same bookmark, same time -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        editedOpen \u003d new ReminderBuilder(OPEN).withNote(VALID_NOTE_READ)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .withBookmark(ALICE).withTime(VALID_TIME_OPEN).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // same note, same bookmark, different time -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        editedOpen \u003d new ReminderBuilder(OPEN).withNote(VALID_NOTE_OPEN)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .withBookmark(ALICE).withTime(VALID_TIME_READ).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        //same attributes -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        editedOpen \u003d new ReminderBuilder(OPEN).withNote(VALID_NOTE_OPEN)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "                .withBookmark(ALICE).withTime(VALID_TIME_OPEN).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder openCopy \u003d new ReminderBuilder(OPEN).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(OPEN.equals(openCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertTrue(OPEN.equals(OPEN));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // different reminder -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.equals(READ));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        Reminder editedOpen \u003d new ReminderBuilder(OPEN).withNote(VALID_NOTE_READ).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        editedOpen \u003d new ReminderBuilder(OPEN).withBookmark(BENSON).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        editedOpen \u003d new ReminderBuilder(OPEN).withTime(VALID_TIME_READ).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        assertFalse(OPEN.isSameReminder(editedOpen));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 86
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag((String) null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag((Tag) null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 4,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/mark/model/util/SampleDataUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package seedu.mark.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void getSampleBookmarks_mustHaveAtLeastOneBookmark_returnsTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(SampleDataUtil.getSampleBookmarks().length \u003e 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void getSampleFolderStructure_mustHaveAtLeastOneSubFolder_returnsTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(SampleDataUtil.getSampleFolderStructure().getSubfolders().size() \u003e 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void getSampleMark_mustHaveData_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ReadOnlyMark mark \u003d SampleDataUtil.getSampleMark();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(mark.getBookmarkList().size() \u003e 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertTrue(mark.getFolderStructure().getSubfolders().size() \u003e 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void getTagSet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(SampleDataUtil.getTagSet(VALID_TAG_HUSBAND, VALID_TAG_FRIEND),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                Set.of(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_HUSBAND)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 39
    }
  },
  {
    "path": "src/test/java/seedu/mark/storage/JsonAdaptedBookmarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.storage.JsonAdaptedBookmark.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class JsonAdaptedBookmarkTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String INVALID_URL \u003d \"exam?ple.com?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String INVALID_REMARK \u003d \"t/ means tag\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final String INVALID_FOLDER \u003d \"^hobbies\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_URL \u003d BENSON.getUrl().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String VALID_REMARK \u003d BENSON.getRemark().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final String VALID_FOLDER \u003d BENSON.getFolder().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final List\u003cString\u003e VALID_CACHED_COPIES \u003d BENSON.getCachedCopies().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .map(copy -\u003e copy.html).collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_validBookmarkDetails_returnsBookmark() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d new JsonAdaptedBookmark(BENSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(BENSON, bookmark.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d new JsonAdaptedBookmark(INVALID_NAME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                VALID_URL, VALID_REMARK, VALID_FOLDER, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d new JsonAdaptedBookmark(null,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                VALID_URL, VALID_REMARK, VALID_FOLDER, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_invalidUrl_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d new JsonAdaptedBookmark(VALID_NAME,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                INVALID_URL, VALID_REMARK, VALID_FOLDER, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d Url.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_nullUrl_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new JsonAdaptedBookmark(VALID_NAME,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                        null, VALID_REMARK, VALID_FOLDER, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Url.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_invalidRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new JsonAdaptedBookmark(VALID_NAME,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                        VALID_URL, INVALID_REMARK, VALID_FOLDER, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d Remark.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_nullRemark_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d new JsonAdaptedBookmark(VALID_NAME,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                VALID_URL, null, VALID_FOLDER, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void toModelType_invalidFolder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new JsonAdaptedBookmark(VALID_NAME,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                        VALID_URL, VALID_REMARK, INVALID_FOLDER, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String expectedMessage \u003d Folder.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void toModelType_nullFolder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d new JsonAdaptedBookmark(VALID_NAME,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                VALID_URL, VALID_REMARK, null, VALID_TAGS, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Folder.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, bookmark::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonAdaptedBookmark bookmark \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                new JsonAdaptedBookmark(VALID_NAME,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                        VALID_URL, VALID_REMARK, VALID_FOLDER, invalidTags, VALID_CACHED_COPIES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, bookmark::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 33,
      "openorclose": 37,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/mark/storage/JsonMarkStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class JsonMarkStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Path.of(\"src\", \"test\", \"data\", \"JsonMarkStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void readMark_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMark(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMark\u003e readMark(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        return new JsonMarkStorage(Path.of(filePath)).readMark(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(readMark(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMark(\"notJsonFormatMark.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void readMark_invalidBookmarkMark_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMark(\"invalidBookmarkMark.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void readMark_invalidAndValidBookmarkMark_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMark(\"invalidAndValidBookmarkMark.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void readAndSaveMark_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMark.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark original \u003d getTypicalMark();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonMarkStorage jsonMarkStorage \u003d new JsonMarkStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        jsonMarkStorage.saveMark(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ReadOnlyMark readBack \u003d jsonMarkStorage.readMark(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(original, new Mark(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        original.addBookmark(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        original.removeBookmark(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        original.addFolder(new Folder(\"newfolder\"), Folder.ROOT_FOLDER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        jsonMarkStorage.saveMark(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        readBack \u003d jsonMarkStorage.readMark(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(original, new Mark(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        original.addBookmark(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        jsonMarkStorage.saveMark(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        readBack \u003d jsonMarkStorage.readMark().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(original, new Mark(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark_nullMark_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMark(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Saves {@code mark} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void saveMark(ReadOnlyMark mark, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "            new JsonMarkStorage(Path.of(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    .saveMark(mark, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMark(new Mark(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 106,
      "openorclose": 2,
      "Na-Nazhou": 3
    }
  },
  {
    "path": "src/test/java/seedu/mark/storage/JsonSerializableMarkTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.testutil.TypicalBookmarks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class JsonSerializableMarkTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Path.of(\"src\", \"test\", \"data\", \"JsonSerializableMarkTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path TYPICAL_BOOKMARKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBookmarksMark.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path INVALID_BOOKMARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookmarkMark.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Path DUPLICATE_BOOKMARK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookmarkMark.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final Path DUPLICATE_FOLDER_IN_STRUCTURE_FILE \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateFolderInFolderStructureMark.json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    private static final Path NO_ROOT_FOLDER_IN_STRUCTURE_FILE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"noRootFolderInStructureMark.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_typicalBookmarksFile_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure family \u003d new FolderStructure(new Folder(\"family\"), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure contacts \u003d new FolderStructure(new Folder(\"contacts\"), List.of(family));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure friends \u003d new FolderStructure(new Folder(\"friends\"), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure f \u003d new FolderStructure(Folder.ROOT_FOLDER, List.of(contacts, friends));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertEquals(f, f.clone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonSerializableMark dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOKMARKS_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                JsonSerializableMark.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark markFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark typicalBookmarksMark \u003d TypicalBookmarks.getTypicalMark();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(markFromFile, typicalBookmarksMark);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_invalidBookmarkFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonSerializableMark dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOKMARK_FILE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                JsonSerializableMark.class).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void toModelType_duplicateBookmarks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonSerializableMark dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOKMARK_FILE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                JsonSerializableMark.class).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMark.MESSAGE_DUPLICATE_BOOKMARK,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void toModelType_duplicateFolderInStrucutre_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonSerializableMark dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOLDER_IN_STRUCTURE_FILE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                JsonSerializableMark.class).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMark.MESSAGE_DUPLICATE_FOLDER,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public void toModelType_noRootFolderInStructure_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        JsonSerializableMark dataFromFile \u003d JsonUtil.readJsonFile(NO_ROOT_FOLDER_IN_STRUCTURE_FILE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                JsonSerializableMark.class).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMark.MESSAGE_NO_ROOT_FOLDER,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23,
      "openorclose": 31,
      "Na-Nazhou": 1,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/mark/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Path.of(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        userPrefs.setMarkFilePath(Path.of(\"mark.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 5,
      "Na-Nazhou": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/mark/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.getTypicalMark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        JsonMarkStorage markStorage \u003d new JsonMarkStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        storageManager \u003d new StorageManager(markStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void markReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * {@link JsonMarkStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMarkStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark original \u003d getTypicalMark();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        storageManager.saveMark(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ReadOnlyMark retrieved \u003d storageManager.readMark().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(original, new Mark(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void getMarkFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertNotNull(storageManager.getMarkFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 17,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/mark/storage/StorageStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyMark;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A default Storage Stub that has all of its methods failing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public final class StorageStub implements Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Path getMarkFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Optional\u003cReadOnlyMark\u003e readMark() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Optional\u003cReadOnlyMark\u003e readMark(Path filePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark(ReadOnlyMark mark) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void saveMark(ReadOnlyMark mark, Path filePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 53
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/BookmarkUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_FOLDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.parser.CliSyntax.PREFIX_URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A utility class for Bookmark."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class BookmarkUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns an add command string for adding the {@code bookmark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static String getAddCommand(Bookmark bookmark) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getBookmarkDetails(bookmark);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the part of command string for the given {@code bookmark}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static String getBookmarkDetails(Bookmark bookmark) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        sb.append(PREFIX_NAME + bookmark.getName().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        sb.append(PREFIX_URL + bookmark.getUrl().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        sb.append(PREFIX_REMARK + bookmark.getRemark().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        sb.append(PREFIX_FOLDER + bookmark.getFolder().folderName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        bookmark.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the part of command string for the given {@code EditBookmarkDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static String getEditBookmarkDescriptorDetails(EditCommand.EditBookmarkDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.getUrl().ifPresent(url -\u003e sb.append(PREFIX_URL).append(url.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.getRemark().ifPresent(remark -\u003e sb.append(PREFIX_REMARK).append(remark.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        descriptor.getFolder().ifPresent(folder -\u003e sb.append(PREFIX_FOLDER).append(folder.folderName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23,
      "openorclose": 3,
      "Na-Nazhou": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/EditBookmarkDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.logic.commands.EditCommand.EditBookmarkDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Url;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A utility class to help with building EditBookmarkDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class EditBookmarkDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private EditBookmarkDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor \u003d new EditBookmarkDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptorBuilder(EditBookmarkDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.descriptor \u003d new EditBookmarkDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns an {@code EditBookmarkDescriptor} with fields containing {@code bookmark}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptorBuilder(Bookmark bookmark) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor \u003d new EditBookmarkDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.setName(bookmark.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.setUrl(bookmark.getUrl());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.setRemark(bookmark.getRemark());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        descriptor.setFolder(bookmark.getFolder());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.setTags(bookmark.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBookmarkDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the {@code Url} of the {@code EditBookmarkDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptorBuilder withUrl(String url) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.setUrl(new Url(url));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Sets the {@code Remark} of the {@code EditBookmarkDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptorBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        descriptor.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     * Sets the {@code Folder} of the {@code EditBookmarkDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public EditBookmarkDescriptorBuilder withFolder(String folder) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        descriptor.setFolder(new Folder(folder));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditBookmarkDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EditBookmarkDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 32,
      "openorclose": 10,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/MarkBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A utility class to help with building Mark objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " *     {@code Mark mark \u003d new MarkBuilder().withBookmark(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class MarkBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Mark mark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public MarkBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        mark \u003d new Mark();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public MarkBuilder(Mark mark) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.mark \u003d mark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Adds a new {@code Bookmark} to the {@code Mark} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public MarkBuilder withBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        mark.addBookmark(bookmark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Mark build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return mark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 34
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/ReminderBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import static seedu.mark.testutil.TypicalBookmarks.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * A utility class to help with building Reminder objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class ReminderBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d Note.DEFAULT_VALUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final Bookmark DEFAULT_BOOKMARK \u003d ALICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final String DEFAULT_TIME \u003d \"12/12/2020 1800\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static final String DATE_FORMATTER \u003d \"dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMATTER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private Bookmark bookmark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ReminderBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        bookmark \u003d (new BookmarkBuilder(DEFAULT_BOOKMARK)).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        time \u003d LocalDateTime.parse(DEFAULT_TIME, FORMATTER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Initializes the ReminderBuilder with the data of {@code reminderToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ReminderBuilder(Reminder reminderToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        note \u003d reminderToCopy.getNote();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        bookmark \u003d reminderToCopy.getBookmark();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        time \u003d reminderToCopy.getRemindTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Sets the {@code Note} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ReminderBuilder withNote(String note) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Sets the {@code Bookmark} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ReminderBuilder withBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.bookmark \u003d (new BookmarkBuilder(bookmark)).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     * Sets the {@code Time} of the {@code Reminder} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public ReminderBuilder withTime(String time) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        this.time \u003d LocalDateTime.parse(time, FORMATTER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public Reminder build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return new Reminder(bookmark, time, note);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 71,
      "Na-Nazhou": 1
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Path.of(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the middle index of the bookmark in the {@code model}\u0027s bookmark list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookmarkList().size() / 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the last index of the bookmark in the {@code model}\u0027s bookmark list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookmarkList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the bookmark in the {@code model}\u0027s bookmark list at {@code index}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Bookmark getBookmark(Model model, Index index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return model.getFilteredBookmarkList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 11,
      "Na-Nazhou": 1,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/TypicalBookmarks.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_URL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.logic.commands.CommandTestUtil.VALID_URL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.Mark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.annotation.OfflineDocument;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.model.bookmark.Bookmark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.CachedCopy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.bookmark.Folder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "import seedu.mark.model.bookmark.util.BookmarkBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import seedu.mark.model.folderstructure.FolderStructure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * A utility class containing a list of {@code Bookmark} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class TypicalBookmarks {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark ALICE \u003d new BookmarkBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withRemark(\"123, Jurong West Ave 6, #08-111\").withUrl(\"https://alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .withFolder(\"contacts\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark BENSON \u003d new BookmarkBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withRemark(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(\"https://johnd@example.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .withFolder(\"contacts\").withCachedCopy(new CachedCopy(OfflineDocument.OFFLINE_HTML_EXAMPLE))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark CARL \u003d new BookmarkBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .withUrl(\"https://heinz@example.com\").withRemark(\"wall street\").withFolder(\"family\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark DANIEL \u003d new BookmarkBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(\"https://cornelia@example.com\").withRemark(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark ELLE \u003d new BookmarkBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .withUrl(\"https://werner@example.com\").withRemark(\"michegan ave\").withFolder(\"family\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark FIONA \u003d new BookmarkBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(\"https://lydia@example.com\").withRemark(\"little tokyo\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark GEORGE \u003d new BookmarkBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(\"https://anna@example.com\").withRemark(\"4th street\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark HOON \u003d new BookmarkBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(\"https://stefan@example.com\").withRemark(\"little india\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark IDA \u003d new BookmarkBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(\"https://hans@example.com\").withRemark(\"chicago ave\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // Manually added - Bookmark\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark AMY \u003d new BookmarkBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(VALID_URL_AMY).withRemark(VALID_REMARK_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Bookmark BOB \u003d new BookmarkBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .withUrl(VALID_URL_BOB).withRemark(VALID_REMARK_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    private TypicalBookmarks() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Na-Nazhou"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a {@code Mark} instance with all the typical bookmarks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Mark getTypicalMark() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Mark mark \u003d new Mark();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (Bookmark bookmark : getTypicalBookmarks()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            mark.addBookmark(bookmark);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        mark.setFolderStructure(getTypicalFolderStructure());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return mark;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    public static FolderStructure getTypicalFolderStructure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure family \u003d new FolderStructure(CARL.getFolder(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        FolderStructure contacts \u003d new FolderStructure(BENSON.getFolder(), List.of(family));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return new FolderStructure(Folder.ROOT_FOLDER, List.of(contacts));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static List\u003cBookmark\u003e getTypicalBookmarks() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 69,
      "openorclose": 15,
      "Na-Nazhou": 3
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Index INDEX_FIRST_BOOKMARK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Index INDEX_SECOND_BOOKMARK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final Index INDEX_THIRD_BOOKMARK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/mark/testutil/TypicalReminders.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "package seedu.mark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "import seedu.mark.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " * A utility class containing a list of {@code Reminder} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "public class TypicalReminders {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final Reminder OPEN \u003d new ReminderBuilder().withNote(\"Open\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            .withBookmark(TypicalBookmarks.ALICE).withTime(\"12/12/2020 1800\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static final Reminder READ \u003d new ReminderBuilder().withNote(\"Read\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            .withBookmark(TypicalBookmarks.BENSON).withTime(\"02/03/2019 0500\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    private TypicalReminders() {} // prevents instantiation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    public static List\u003cReminder\u003e getTypicalReminders() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(OPEN, READ));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TSAI-HSIAO-HAN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TSAI-HSIAO-HAN": 25
    }
  },
  {
    "path": "src/test/java/seedu/mark/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/mark/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package seedu.mark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static seedu.mark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import seedu.mark.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003c?import seedu.mark.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "\u003cfx:root type\u003d\"seedu.mark.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 1,
      "-": 5
    }
  }
]
